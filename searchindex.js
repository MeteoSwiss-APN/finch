Search.setIndex({"titles": ["API", "finch.DaskRunConfig", "finch.DaskRunConfig.__eq__", "finch.DaskRunConfig.__init__", "finch.DaskRunConfig.__repr__", "finch.DaskRunConfig.cleanup", "finch.DaskRunConfig.cluster_config", "finch.DaskRunConfig.construct_output", "finch.DaskRunConfig.create_report", "finch.DaskRunConfig.measure", "finch.DaskRunConfig.setup", "finch.DaskRunConfig.workers", "finch.DaskRuntime", "finch.DaskRuntime.__eq__", "finch.DaskRuntime.__init__", "finch.DaskRuntime.__repr__", "finch.DaskRuntime.graph_construction", "finch.DaskRuntime.optimization", "finch.DaskRuntime.serialization", "finch.DefaultOperator", "finch.DefaultOperator.__call__", "finch.DefaultOperator.__class_getitem__", "finch.DefaultOperator.__subclasshook__", "finch.OperatorRunConfig", "finch.OperatorRunConfig.__eq__", "finch.OperatorRunConfig.__init__", "finch.OperatorRunConfig.__repr__", "finch.OperatorRunConfig.construct_output", "finch.OperatorRunConfig.impl", "finch.OperatorRunConfig.input_obj", "finch.OperatorRunConfig.input_version", "finch.OperatorRunConfig.load_input", "finch.OperatorRunConfig.measure", "finch.OperatorRunConfig.store_output", "finch.RunConfig", "finch.RunConfig.__eq__", "finch.RunConfig.__init__", "finch.RunConfig.__repr__", "finch.RunConfig.cleanup", "finch.RunConfig.impl", "finch.RunConfig.iterations", "finch.RunConfig.load_input", "finch.RunConfig.measure", "finch.RunConfig.runtime_reduction", "finch.RunConfig.setup", "finch.RunConfig.warmup", "finch.Runtime", "finch.Runtime.__eq__", "finch.Runtime.__init__", "finch.Runtime.__repr__", "finch.Runtime.compute", "finch.Runtime.full", "finch.Runtime.input_loading", "finch.brn.brn", "finch.brn.get_brn_input", "finch.brn.get_repeated_brn", "finch.brn.get_repeated_brn_name", "finch.brn.list_brn_implementations", "finch.brn.list_implementations", "finch.brn.list_thetav_implementations", "finch.brn.thetav", "finch.config.ConfigParser", "finch.config.ConfigParser.BOOLEAN_STATES", "finch.config.ConfigParser.NONSPACECRE", "finch.config.ConfigParser.OPTCRE", "finch.config.ConfigParser.OPTCRE_NV", "finch.config.ConfigParser.SECTCRE", "finch.config.ConfigParser.__getitem__", "finch.config.ConfigParser.__init__", "finch.config.ConfigParser.__setitem__", "finch.config.ConfigParser.add_section", "finch.config.ConfigParser.clear", "finch.config.ConfigParser.converters", "finch.config.ConfigParser.defaults", "finch.config.ConfigParser.get", "finch.config.ConfigParser.getboolean", "finch.config.ConfigParser.getfloat", "finch.config.ConfigParser.getint", "finch.config.ConfigParser.has_option", "finch.config.ConfigParser.has_section", "finch.config.ConfigParser.items", "finch.config.ConfigParser.options", "finch.config.ConfigParser.optionxform", "finch.config.ConfigParser.pop", "finch.config.ConfigParser.popitem", "finch.config.ConfigParser.read", "finch.config.ConfigParser.read_dict", "finch.config.ConfigParser.read_file", "finch.config.ConfigParser.read_string", "finch.config.ConfigParser.readfp", "finch.config.ConfigParser.remove_option", "finch.config.ConfigParser.remove_section", "finch.config.ConfigParser.sections", "finch.config.ConfigParser.set", "finch.config.ConfigParser.setdefault", "finch.config.ConfigParser.update", "finch.config.ConfigParser.write", "finch.config.ExtendedInterpolation", "finch.config.ExtendedInterpolation.before_get", "finch.config.ExtendedInterpolation.before_read", "finch.config.ExtendedInterpolation.before_set", "finch.config.ExtendedInterpolation.before_write", "finch.config.StringIO", "finch.config.StringIO.__iter__", "finch.config.StringIO.__new__", "finch.config.StringIO.__next__", "finch.config.StringIO.close", "finch.config.StringIO.closed", "finch.config.StringIO.detach", "finch.config.StringIO.encoding", "finch.config.StringIO.errors", "finch.config.StringIO.fileno", "finch.config.StringIO.flush", "finch.config.StringIO.getvalue", "finch.config.StringIO.isatty", "finch.config.StringIO.line_buffering", "finch.config.StringIO.newlines", "finch.config.StringIO.read", "finch.config.StringIO.readable", "finch.config.StringIO.readline", "finch.config.StringIO.readlines", "finch.config.StringIO.seek", "finch.config.StringIO.seekable", "finch.config.StringIO.tell", "finch.config.StringIO.truncate", "finch.config.StringIO.writable", "finch.config.StringIO.write", "finch.config.StringIO.writelines", "finch.config.config", "finch.config.debug", "finch.config.expand", "finch.config.read_config", "finch.config.set_debug_mode", "finch.config.set_log_level", "finch.constants.P0", "finch.constants.PC_CP_D", "finch.constants.PC_G", "finch.constants.PC_R_D", "finch.constants.PC_R_V", "finch.data.Chunks", "finch.data.Chunks.__eq__", "finch.data.Chunks.__getitem__", "finch.data.Chunks.__subclasshook__", "finch.data.Chunks.get", "finch.data.Chunks.items", "finch.data.Chunks.keys", "finch.data.Chunks.values", "finch.data.DimOrder", "finch.data.Format", "finch.data.Format.FAKE", "finch.data.Format.GRIB", "finch.data.Format.NETCDF", "finch.data.Format.ZARR", "finch.data.Format.name", "finch.data.Format.value", "finch.data.Hashable", "finch.data.Hashable.__hash__", "finch.data.Hashable.__subclasshook__", "finch.data.Input", "finch.data.Input.Version", "finch.data.Input.Version.__eq__", "finch.data.Input.Version.__init__", "finch.data.Input.Version.__le__", "finch.data.Input.Version.__repr__", "finch.data.Input.Version.chunks", "finch.data.Input.Version.coords", "finch.data.Input.Version.dim_order", "finch.data.Input.Version.finch_version", "finch.data.Input.Version.format", "finch.data.Input.Version.from_yaml", "finch.data.Input.Version.get_all_chunks", "finch.data.Input.Version.impose", "finch.data.Input.Version.name", "finch.data.Input.Version.to_yaml", "finch.data.Input.Version.yaml_dumper", "finch.data.Input.Version.yaml_dumper.ANCHOR_TEMPLATE", "finch.data.Input.Version.yaml_dumper.DEFAULT_MAPPING_TAG", "finch.data.Input.Version.yaml_dumper.DEFAULT_SCALAR_TAG", "finch.data.Input.Version.yaml_dumper.DEFAULT_SEQUENCE_TAG", "finch.data.Input.Version.yaml_dumper.DEFAULT_TAG_PREFIXES", "finch.data.Input.Version.yaml_dumper.ESCAPE_REPLACEMENTS", "finch.data.Input.Version.yaml_dumper.__init__", "finch.data.Input.Version.yaml_dumper.add_implicit_resolver", "finch.data.Input.Version.yaml_dumper.add_multi_representer", "finch.data.Input.Version.yaml_dumper.add_path_resolver", "finch.data.Input.Version.yaml_dumper.add_representer", "finch.data.Input.Version.yaml_dumper.analyze_scalar", "finch.data.Input.Version.yaml_dumper.anchor_node", "finch.data.Input.Version.yaml_dumper.ascend_resolver", "finch.data.Input.Version.yaml_dumper.check_empty_document", "finch.data.Input.Version.yaml_dumper.check_empty_mapping", "finch.data.Input.Version.yaml_dumper.check_empty_sequence", "finch.data.Input.Version.yaml_dumper.check_resolver_prefix", "finch.data.Input.Version.yaml_dumper.check_simple_key", "finch.data.Input.Version.yaml_dumper.choose_scalar_style", "finch.data.Input.Version.yaml_dumper.close", "finch.data.Input.Version.yaml_dumper.descend_resolver", "finch.data.Input.Version.yaml_dumper.determine_block_hints", "finch.data.Input.Version.yaml_dumper.dispose", "finch.data.Input.Version.yaml_dumper.emit", "finch.data.Input.Version.yaml_dumper.expect_alias", "finch.data.Input.Version.yaml_dumper.expect_block_mapping", "finch.data.Input.Version.yaml_dumper.expect_block_mapping_key", "finch.data.Input.Version.yaml_dumper.expect_block_mapping_simple_value", "finch.data.Input.Version.yaml_dumper.expect_block_mapping_value", "finch.data.Input.Version.yaml_dumper.expect_block_sequence", "finch.data.Input.Version.yaml_dumper.expect_block_sequence_item", "finch.data.Input.Version.yaml_dumper.expect_document_end", "finch.data.Input.Version.yaml_dumper.expect_document_root", "finch.data.Input.Version.yaml_dumper.expect_document_start", "finch.data.Input.Version.yaml_dumper.expect_first_block_mapping_key", "finch.data.Input.Version.yaml_dumper.expect_first_block_sequence_item", "finch.data.Input.Version.yaml_dumper.expect_first_document_start", "finch.data.Input.Version.yaml_dumper.expect_first_flow_mapping_key", "finch.data.Input.Version.yaml_dumper.expect_first_flow_sequence_item", "finch.data.Input.Version.yaml_dumper.expect_flow_mapping", "finch.data.Input.Version.yaml_dumper.expect_flow_mapping_key", "finch.data.Input.Version.yaml_dumper.expect_flow_mapping_simple_value", "finch.data.Input.Version.yaml_dumper.expect_flow_mapping_value", "finch.data.Input.Version.yaml_dumper.expect_flow_sequence", "finch.data.Input.Version.yaml_dumper.expect_flow_sequence_item", "finch.data.Input.Version.yaml_dumper.expect_node", "finch.data.Input.Version.yaml_dumper.expect_nothing", "finch.data.Input.Version.yaml_dumper.expect_scalar", "finch.data.Input.Version.yaml_dumper.expect_stream_start", "finch.data.Input.Version.yaml_dumper.flush_stream", "finch.data.Input.Version.yaml_dumper.generate_anchor", "finch.data.Input.Version.yaml_dumper.ignore_aliases", "finch.data.Input.Version.yaml_dumper.increase_indent", "finch.data.Input.Version.yaml_dumper.inf_value", "finch.data.Input.Version.yaml_dumper.need_events", "finch.data.Input.Version.yaml_dumper.need_more_events", "finch.data.Input.Version.yaml_dumper.open", "finch.data.Input.Version.yaml_dumper.prepare_anchor", "finch.data.Input.Version.yaml_dumper.prepare_tag", "finch.data.Input.Version.yaml_dumper.prepare_tag_handle", "finch.data.Input.Version.yaml_dumper.prepare_tag_prefix", "finch.data.Input.Version.yaml_dumper.prepare_version", "finch.data.Input.Version.yaml_dumper.process_anchor", "finch.data.Input.Version.yaml_dumper.process_scalar", "finch.data.Input.Version.yaml_dumper.process_tag", "finch.data.Input.Version.yaml_dumper.represent", "finch.data.Input.Version.yaml_dumper.represent_binary", "finch.data.Input.Version.yaml_dumper.represent_bool", "finch.data.Input.Version.yaml_dumper.represent_complex", "finch.data.Input.Version.yaml_dumper.represent_data", "finch.data.Input.Version.yaml_dumper.represent_date", "finch.data.Input.Version.yaml_dumper.represent_datetime", "finch.data.Input.Version.yaml_dumper.represent_dict", "finch.data.Input.Version.yaml_dumper.represent_float", "finch.data.Input.Version.yaml_dumper.represent_int", "finch.data.Input.Version.yaml_dumper.represent_list", "finch.data.Input.Version.yaml_dumper.represent_mapping", "finch.data.Input.Version.yaml_dumper.represent_module", "finch.data.Input.Version.yaml_dumper.represent_name", "finch.data.Input.Version.yaml_dumper.represent_none", "finch.data.Input.Version.yaml_dumper.represent_object", "finch.data.Input.Version.yaml_dumper.represent_ordered_dict", "finch.data.Input.Version.yaml_dumper.represent_scalar", "finch.data.Input.Version.yaml_dumper.represent_sequence", "finch.data.Input.Version.yaml_dumper.represent_set", "finch.data.Input.Version.yaml_dumper.represent_str", "finch.data.Input.Version.yaml_dumper.represent_tuple", "finch.data.Input.Version.yaml_dumper.represent_undefined", "finch.data.Input.Version.yaml_dumper.represent_yaml_object", "finch.data.Input.Version.yaml_dumper.resolve", "finch.data.Input.Version.yaml_dumper.serialize", "finch.data.Input.Version.yaml_dumper.serialize_node", "finch.data.Input.Version.yaml_dumper.write_double_quoted", "finch.data.Input.Version.yaml_dumper.write_folded", "finch.data.Input.Version.yaml_dumper.write_indent", "finch.data.Input.Version.yaml_dumper.write_indicator", "finch.data.Input.Version.yaml_dumper.write_line_break", "finch.data.Input.Version.yaml_dumper.write_literal", "finch.data.Input.Version.yaml_dumper.write_plain", "finch.data.Input.Version.yaml_dumper.write_single_quoted", "finch.data.Input.Version.yaml_dumper.write_stream_end", "finch.data.Input.Version.yaml_dumper.write_stream_start", "finch.data.Input.Version.yaml_dumper.write_tag_directive", "finch.data.Input.Version.yaml_dumper.write_version_directive", "finch.data.Input.Version.yaml_dumper.yaml_implicit_resolvers", "finch.data.Input.Version.yaml_dumper.yaml_multi_representers", "finch.data.Input.Version.yaml_dumper.yaml_path_resolvers", "finch.data.Input.Version.yaml_dumper.yaml_representers", "finch.data.Input.Version.yaml_flow_style", "finch.data.Input.Version.yaml_loader", "finch.data.Input.Version.yaml_tag", "finch.data.Input.__init__", "finch.data.Input.add_version", "finch.data.Input.get_version", "finch.data.Input.has_version", "finch.data.Input.list_versions", "finch.data.Input.name", "finch.data.Input.source", "finch.data.Input.source_version", "finch.data.Input.versions", "finch.data.Iterable", "finch.data.Iterable.__class_getitem__", "finch.data.Iterable.__subclasshook__", "finch.data.adjust_dims", "finch.data.auto_chunk_size", "finch.data.can_rechunk_no_split", "finch.data.chunk_args_equal", "finch.data.dataclass", "finch.data.deprecated", "finch.data.field", "finch.data.get_chunk_sizes", "finch.data.get_dim_order_list", "finch.data.glob", "finch.data.grib_dir", "finch.data.load_array_grib", "finch.data.load_grib", "finch.data.netcdf_dir", "finch.data.overload", "finch.data.simplify_chunks", "finch.data.tmp_dir", "finch.data.translate_order", "finch.data.zarr_dir", "finch.environment.Version", "finch.environment.Version.__eq__", "finch.environment.Version.__ge__", "finch.environment.Version.__gt__", "finch.environment.Version.__hash__", "finch.environment.Version.__init__", "finch.environment.Version.__le__", "finch.environment.Version.__lt__", "finch.environment.Version.__ne__", "finch.environment.Version.__repr__", "finch.environment.Version.__str__", "finch.environment.Version.base_version", "finch.environment.Version.dev", "finch.environment.Version.epoch", "finch.environment.Version.is_devrelease", "finch.environment.Version.is_postrelease", "finch.environment.Version.is_prerelease", "finch.environment.Version.local", "finch.environment.Version.major", "finch.environment.Version.micro", "finch.environment.Version.minor", "finch.environment.Version.post", "finch.environment.Version.pre", "finch.environment.Version.public", "finch.environment.Version.release", "finch.environment.WorkerEnvironment", "finch.environment.WorkerEnvironment.env_var_map", "finch.environment.WorkerEnvironment.get_job_script_prologue", "finch.environment.WorkerEnvironment.load", "finch.environment.WorkerEnvironment.omp_threads", "finch.environment.WorkerEnvironment.set", "finch.environment.custom_config_env_var", "finch.environment.data_dir", "finch.environment.default_custom_config", "finch.environment.get_version", "finch.environment.node_name_env_var", "finch.environment.package_root", "finch.environment.proj_config", "finch.environment.version_file", "finch.evaluation.amdahl_speedup", "finch.evaluation.combine_runtimes", "finch.evaluation.create_cores_dimension", "finch.evaluation.create_plots", "finch.evaluation.create_result_dataset", "finch.evaluation.deprecated", "finch.evaluation.exp_name_attr", "finch.evaluation.find_scaling", "finch.evaluation.get_plots_dir", "finch.evaluation.get_pyplot_grouped_bar_pos", "finch.evaluation.plot_runtime_parts", "finch.evaluation.plot_style", "finch.evaluation.print_results", "finch.evaluation.print_version_results", "finch.evaluation.remove_labels", "finch.evaluation.rename_labels", "finch.evaluation.rt_combined_attr", "finch.evaluation.serial_overhead_analysis", "finch.evaluation.simple_lin_reg", "finch.evaluation.speedup", "finch.evaluation.store_config", "finch.measure_runtimes", "finch.operators.custom_map_blocks", "finch.scheduler.Client", "finch.scheduler.Client.__init__", "finch.scheduler.Client.__repr__", "finch.scheduler.Client.amm", "finch.scheduler.Client.as_current", "finch.scheduler.Client.benchmark_hardware", "finch.scheduler.Client.call_stack", "finch.scheduler.Client.cancel", "finch.scheduler.Client.close", "finch.scheduler.Client.collections_to_dsk", "finch.scheduler.Client.compute", "finch.scheduler.Client.current", "finch.scheduler.Client.dashboard_link", "finch.scheduler.Client.dump_cluster_state", "finch.scheduler.Client.futures_of", "finch.scheduler.Client.gather", "finch.scheduler.Client.get", "finch.scheduler.Client.get_dataset", "finch.scheduler.Client.get_events", "finch.scheduler.Client.get_executor", "finch.scheduler.Client.get_metadata", "finch.scheduler.Client.get_scheduler_logs", "finch.scheduler.Client.get_task_stream", "finch.scheduler.Client.get_versions", "finch.scheduler.Client.get_worker_logs", "finch.scheduler.Client.has_what", "finch.scheduler.Client.io_loop", "finch.scheduler.Client.list_datasets", "finch.scheduler.Client.log_event", "finch.scheduler.Client.loop", "finch.scheduler.Client.map", "finch.scheduler.Client.nbytes", "finch.scheduler.Client.ncores", "finch.scheduler.Client.normalize_collection", "finch.scheduler.Client.nthreads", "finch.scheduler.Client.persist", "finch.scheduler.Client.preloads", "finch.scheduler.Client.processing", "finch.scheduler.Client.profile", "finch.scheduler.Client.publish_dataset", "finch.scheduler.Client.rebalance", "finch.scheduler.Client.register_scheduler_plugin", "finch.scheduler.Client.register_worker_callbacks", "finch.scheduler.Client.register_worker_plugin", "finch.scheduler.Client.replicate", "finch.scheduler.Client.restart", "finch.scheduler.Client.restart_workers", "finch.scheduler.Client.retire_workers", "finch.scheduler.Client.retry", "finch.scheduler.Client.run", "finch.scheduler.Client.run_on_scheduler", "finch.scheduler.Client.scatter", "finch.scheduler.Client.scheduler_info", "finch.scheduler.Client.set_metadata", "finch.scheduler.Client.shutdown", "finch.scheduler.Client.start", "finch.scheduler.Client.story", "finch.scheduler.Client.submit", "finch.scheduler.Client.subscribe_topic", "finch.scheduler.Client.unpublish_dataset", "finch.scheduler.Client.unregister_worker_plugin", "finch.scheduler.Client.unsubscribe_topic", "finch.scheduler.Client.upload_file", "finch.scheduler.Client.wait_for_workers", "finch.scheduler.Client.who_has", "finch.scheduler.Client.write_scheduler_file", "finch.scheduler.Cluster", "finch.scheduler.Cluster.__eq__", "finch.scheduler.Cluster.__hash__", "finch.scheduler.Cluster.__init__", "finch.scheduler.Cluster.__repr__", "finch.scheduler.Cluster.adapt", "finch.scheduler.Cluster.close", "finch.scheduler.Cluster.dashboard_link", "finch.scheduler.Cluster.get_client", "finch.scheduler.Cluster.get_logs", "finch.scheduler.Cluster.logs", "finch.scheduler.Cluster.loop", "finch.scheduler.Cluster.name", "finch.scheduler.Cluster.observed", "finch.scheduler.Cluster.plan", "finch.scheduler.Cluster.requested", "finch.scheduler.Cluster.scale", "finch.scheduler.Cluster.scheduler_address", "finch.scheduler.ClusterConfig", "finch.scheduler.ClusterConfig.__eq__", "finch.scheduler.ClusterConfig.__init__", "finch.scheduler.ClusterConfig.__repr__", "finch.scheduler.ClusterConfig.cores_per_worker", "finch.scheduler.ClusterConfig.exclusive_jobs", "finch.scheduler.ClusterConfig.omp_parallelism", "finch.scheduler.ClusterConfig.queuing", "finch.scheduler.ClusterConfig.workers_per_job", "finch.scheduler.SLURMCluster", "finch.scheduler.SLURMCluster.__init__", "finch.scheduler.SLURMCluster.adapt", "finch.scheduler.SLURMCluster.asynchronous", "finch.scheduler.SLURMCluster.from_name", "finch.scheduler.SLURMCluster.job_cls", "finch.scheduler.SLURMCluster.job_cls.__init__", "finch.scheduler.SLURMCluster.job_cls.__repr__", "finch.scheduler.SLURMCluster.job_cls.cancel_command", "finch.scheduler.SLURMCluster.job_cls.close", "finch.scheduler.SLURMCluster.job_cls.config_name", "finch.scheduler.SLURMCluster.job_cls.default_config_name", "finch.scheduler.SLURMCluster.job_cls.finished", "finch.scheduler.SLURMCluster.job_cls.job_file", "finch.scheduler.SLURMCluster.job_cls.job_id_regexp", "finch.scheduler.SLURMCluster.job_cls.job_script", "finch.scheduler.SLURMCluster.job_cls.start", "finch.scheduler.SLURMCluster.job_cls.status", "finch.scheduler.SLURMCluster.job_cls.submit_command", "finch.scheduler.SLURMCluster.job_cls.worker_process_memory", "finch.scheduler.SLURMCluster.job_cls.worker_process_threads", "finch.scheduler.SLURMCluster.job_header", "finch.scheduler.SLURMCluster.job_name", "finch.scheduler.SLURMCluster.job_script", "finch.scheduler.SLURMCluster.new_worker_spec", "finch.scheduler.SLURMCluster.plan", "finch.scheduler.SLURMCluster.requested", "finch.scheduler.SLURMCluster.scale", "finch.scheduler.SLURMCluster.scale_down", "finch.scheduler.SLURMCluster.scale_up", "finch.scheduler.SLURMCluster.sync", "finch.scheduler.clear_memory", "finch.scheduler.client", "finch.scheduler.dask_config_get_not_none", "finch.scheduler.dataclass", "finch.scheduler.get_client", "finch.scheduler.parse_slurm_time", "finch.scheduler.scale_and_wait", "finch.scheduler.start_scheduler", "finch.scheduler.start_slurm_cluster", "finch.scheduler.timedelta", "finch.scheduler.timedelta.__abs__", "finch.scheduler.timedelta.__add__", "finch.scheduler.timedelta.__bool__", "finch.scheduler.timedelta.__divmod__", "finch.scheduler.timedelta.__eq__", "finch.scheduler.timedelta.__floordiv__", "finch.scheduler.timedelta.__ge__", "finch.scheduler.timedelta.__getattribute__", "finch.scheduler.timedelta.__gt__", "finch.scheduler.timedelta.__hash__", "finch.scheduler.timedelta.__le__", "finch.scheduler.timedelta.__lt__", "finch.scheduler.timedelta.__mod__", "finch.scheduler.timedelta.__mul__", "finch.scheduler.timedelta.__ne__", "finch.scheduler.timedelta.__neg__", "finch.scheduler.timedelta.__new__", "finch.scheduler.timedelta.__pos__", "finch.scheduler.timedelta.__radd__", "finch.scheduler.timedelta.__rdivmod__", "finch.scheduler.timedelta.__repr__", "finch.scheduler.timedelta.__rfloordiv__", "finch.scheduler.timedelta.__rmod__", "finch.scheduler.timedelta.__rmul__", "finch.scheduler.timedelta.__rsub__", "finch.scheduler.timedelta.__rtruediv__", "finch.scheduler.timedelta.__str__", "finch.scheduler.timedelta.__sub__", "finch.scheduler.timedelta.__truediv__", "finch.scheduler.timedelta.days", "finch.scheduler.timedelta.max", "finch.scheduler.timedelta.microseconds", "finch.scheduler.timedelta.min", "finch.scheduler.timedelta.resolution", "finch.scheduler.timedelta.seconds", "finch.scheduler.timedelta.total_seconds", "finch.set_debug_mode", "finch.set_log_level", "finch.util.Config", "finch.util.Config.list_configs", "finch.util.ImgSuffix", "finch.util.PathLike", "finch.util.PbarArg", "finch.util.RandomWord", "finch.util.RandomWord.__init__", "finch.util.RandomWord.filter", "finch.util.RandomWord.random_words", "finch.util.RandomWord.read_words", "finch.util.RandomWord.word", "finch.util.RecursiveNamespace", "finch.util.RecursiveNamespace.__delattr__", "finch.util.RecursiveNamespace.__eq__", "finch.util.RecursiveNamespace.__ge__", "finch.util.RecursiveNamespace.__getattribute__", "finch.util.RecursiveNamespace.__gt__", "finch.util.RecursiveNamespace.__init__", "finch.util.RecursiveNamespace.__le__", "finch.util.RecursiveNamespace.__lt__", "finch.util.RecursiveNamespace.__ne__", "finch.util.RecursiveNamespace.__new__", "finch.util.RecursiveNamespace.__reduce__", "finch.util.RecursiveNamespace.__repr__", "finch.util.RecursiveNamespace.__setattr__", "finch.util.RecursiveNamespace.map_entry", "finch.util.TypeVar", "finch.util.TypeVar.__init__", "finch.util.TypeVar.__init_subclass__", "finch.util.TypeVar.__or__", "finch.util.TypeVar.__reduce__", "finch.util.TypeVar.__repr__", "finch.util.TypeVar.__ror__", "finch.util.add_missing_properties", "finch.util.arg2list", "finch.util.check_socket_open", "finch.util.clear_dir", "finch.util.closing", "finch.util.closing.__class_getitem__", "finch.util.closing.__enter__", "finch.util.closing.__exit__", "finch.util.closing.__init__", "finch.util.closing.__subclasshook__", "finch.util.equals_not_none", "finch.util.fill_none_properties", "finch.util.flat_list", "finch.util.flatten_dict", "finch.util.funcs_from_args", "finch.util.get_absolute", "finch.util.get_class_attribute_names", "finch.util.get_class_attributes", "finch.util.get_path", "finch.util.get_pbar", "finch.util.get_primitive_attrs_from_dataclass", "finch.util.has_attributes", "finch.util.inverse", "finch.util.is_2d_list_of", "finch.util.is_callable_list", "finch.util.is_list_of", "finch.util.list_funcs_matching", "finch.util.map_keys", "finch.util.parse_bool", "finch.util.random_entity_name", "finch.util.recursive_update", "finch.util.remove_if_exists", "finch.util.sig_matches_hint", "zebra.brn", "zebra.set_threads", "zebra.thetav", "Adding new Operators", "Setup", "finch [distributed data processing for ICON data]", "Operators", "Installation", "Introduction", "Configuration", "Evaluation", "Running Experiments", "First Steps", "Input Management", "Using the library", "Running Finch"], "terms": {"finch": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 624, 625, 626, 627, 628, 629, 630, 631], "environ": [0, 1, 10, 23, 34, 44, 130, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 625, 626, 627], "package_root": [0, 354], "home": [0, 85, 130, 350, 354, 355, 356], "runner": [0, 130, 350, 354, 355, 356], "work": [0, 130, 350, 354, 355, 356, 360, 380, 402, 418, 442, 473, 578, 600, 627, 628], "src": [0, 350, 354, 355, 356, 622, 627, 633], "The": [0, 1, 6, 7, 11, 12, 16, 17, 18, 23, 27, 28, 29, 30, 34, 39, 40, 43, 46, 50, 51, 52, 53, 55, 56, 60, 74, 79, 80, 84, 87, 102, 110, 124, 131, 148, 153, 154, 158, 159, 164, 166, 167, 168, 172, 286, 287, 288, 289, 292, 294, 295, 300, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 323, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 347, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 386, 387, 391, 393, 394, 395, 397, 402, 411, 412, 414, 417, 422, 423, 424, 428, 429, 430, 433, 438, 439, 443, 444, 445, 464, 468, 472, 505, 509, 511, 512, 556, 557, 559, 578, 580, 587, 597, 598, 600, 601, 604, 611, 615, 617, 622, 623, 626, 627, 629, 630, 631, 632, 633], "root": [0, 174, 221, 354], "directori": [0, 85, 287, 308, 309, 312, 315, 317, 350, 354, 360, 365, 442, 473, 588, 600, 603, 616, 627, 628, 630, 631, 633], "packag": [0, 318, 352, 354, 356, 380, 403, 442, 622, 625], "data_dir": [0, 350], "file": [0, 61, 85, 87, 91, 96, 102, 106, 111, 123, 124, 126, 128, 131, 148, 159, 168, 308, 309, 310, 311, 312, 313, 317, 349, 350, 351, 355, 356, 380, 393, 402, 418, 442, 445, 473, 478, 486, 554, 614, 623, 628, 630, 631, 632, 633], "proj_config": [0, 355], "config": [0, 34, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 158, 159, 349, 355, 360, 361, 438, 442, 464, 506, 512, 552, 553, 622, 629, 632, 633], "default": [0, 43, 53, 55, 61, 68, 73, 74, 78, 79, 80, 84, 92, 96, 97, 98, 121, 124, 130, 139, 143, 287, 303, 304, 305, 351, 355, 359, 360, 362, 372, 375, 376, 379, 380, 386, 390, 391, 392, 393, 396, 397, 400, 401, 402, 404, 405, 410, 411, 415, 417, 420, 424, 425, 429, 431, 437, 442, 444, 455, 473, 506, 507, 513, 557, 559, 560, 562, 578, 580, 600, 606, 611, 614, 627, 628, 629, 630, 631, 633], "ini": [0, 61, 96, 351, 355, 627], "locat": [0, 85, 311, 349, 351, 355, 356, 431, 627, 628, 633], "project": [0, 304, 318, 329, 355, 362, 473, 479], "version_fil": [0, 356], "version": [0, 23, 25, 30, 43, 55, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 304, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 352, 356, 361, 362, 364, 369, 370, 380, 393, 402, 403, 473, 557, 597, 624, 628, 629, 630, 632], "specifi": [0, 1, 23, 34, 43, 61, 78, 83, 85, 86, 87, 120, 147, 287, 299, 305, 349, 356, 380, 386, 390, 396, 402, 404, 415, 426, 429, 431, 473, 500, 557, 559, 560, 562, 611, 615, 631, 632, 633], "default_custom_config": [0, 351], "custom": [0, 19, 22, 61, 139, 142, 155, 157, 296, 298, 349, 351, 379, 557, 559, 560, 562, 589, 594, 627, 630, 633], "custom_config_env_var": [0, 349], "name": [0, 56, 61, 70, 79, 80, 81, 86, 87, 92, 147, 148, 153, 158, 159, 161, 164, 172, 287, 288, 292, 299, 302, 311, 316, 349, 353, 358, 359, 360, 363, 372, 373, 379, 380, 381, 385, 386, 393, 397, 398, 403, 407, 408, 410, 418, 419, 421, 422, 423, 429, 432, 437, 438, 439, 440, 446, 449, 458, 473, 474, 477, 478, 479, 497, 513, 521, 563, 564, 567, 576, 578, 579, 601, 611, 614, 624, 627, 628, 630, 631], "variabl": [0, 128, 130, 310, 311, 343, 344, 348, 349, 353, 358, 379, 422, 429, 578, 614, 627], "node_name_env_var": [0, 353], "slurmd_nodenam": [0, 353], "hold": [0, 159, 165, 170, 353, 627, 628], "current": [0, 85, 102, 121, 123, 124, 133, 343, 346, 352, 353, 380, 384, 391, 408, 415, 417, 422, 423, 429, 473, 504, 505, 508, 510, 551, 600, 623, 626, 627, 629, 633], "slurm": [0, 353, 464, 472, 473, 478, 483, 509, 511, 512, 623, 627, 630, 633], "node": [0, 159, 169, 173, 174, 187, 226, 266, 267, 353, 380, 412, 414, 442, 464, 469, 473, 482], "get_vers": [0, 158, 289, 352, 380, 403, 631], "return": [0, 1, 2, 4, 12, 13, 15, 22, 23, 24, 26, 34, 35, 37, 43, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 74, 78, 80, 81, 83, 84, 85, 87, 92, 102, 104, 108, 111, 114, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 139, 140, 142, 155, 156, 157, 158, 159, 160, 163, 170, 287, 288, 289, 290, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 311, 316, 318, 319, 320, 321, 322, 324, 325, 326, 343, 345, 346, 352, 357, 358, 359, 362, 364, 365, 366, 372, 374, 375, 376, 378, 379, 380, 382, 384, 385, 386, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 410, 413, 415, 418, 419, 423, 425, 429, 430, 431, 436, 437, 446, 447, 448, 450, 454, 455, 464, 465, 467, 473, 478, 480, 497, 506, 507, 508, 509, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 552, 553, 557, 559, 560, 562, 563, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 578, 581, 583, 584, 585, 586, 587, 589, 591, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 611, 612, 614, 615, 616, 617, 624, 628, 629, 630, 631], "workerenviron": [0, 343, 344, 345, 346, 347, 348], "thi": [0, 1, 10, 12, 19, 22, 23, 34, 43, 44, 46, 50, 55, 56, 61, 85, 95, 102, 106, 112, 114, 128, 139, 142, 155, 157, 158, 159, 165, 167, 168, 170, 171, 172, 287, 288, 289, 291, 292, 295, 296, 298, 299, 304, 310, 318, 323, 332, 333, 334, 343, 344, 348, 357, 361, 362, 364, 372, 374, 379, 380, 384, 387, 388, 390, 393, 395, 396, 397, 399, 400, 402, 405, 408, 410, 411, 413, 415, 418, 419, 420, 422, 423, 424, 425, 426, 429, 430, 431, 433, 434, 437, 440, 442, 445, 446, 473, 477, 482, 504, 552, 557, 561, 578, 580, 589, 594, 597, 604, 626, 627, 628, 629, 630, 631, 633], "worker": [0, 1, 3, 11, 23, 25, 343, 345, 346, 348, 359, 380, 385, 390, 393, 395, 396, 399, 403, 404, 405, 410, 412, 414, 415, 417, 418, 420, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 434, 437, 440, 442, 443, 444, 446, 455, 462, 464, 468, 470, 472, 473, 475, 478, 482, 489, 497, 500, 501, 502, 504, 510, 627, 628, 629, 630], "dimord": [0, 147, 307], "type": [0, 1, 3, 7, 12, 14, 23, 25, 27, 34, 36, 43, 46, 48, 53, 55, 56, 57, 58, 59, 61, 68, 86, 93, 102, 104, 130, 147, 159, 161, 166, 174, 181, 281, 289, 299, 307, 360, 364, 375, 379, 380, 381, 385, 390, 391, 392, 395, 396, 397, 399, 401, 402, 410, 411, 413, 415, 419, 431, 432, 437, 446, 449, 451, 455, 464, 466, 473, 474, 478, 479, 497, 513, 530, 555, 556, 557, 558, 559, 560, 562, 563, 569, 573, 578, 579, 587, 589, 593, 597, 601, 608, 609, 610, 611, 615, 617, 627, 628], "hint": [0, 102, 120, 147, 611, 617], "dimens": [0, 43, 147, 159, 164, 166, 170, 287, 299, 302, 306, 307, 310, 316, 359, 360, 361, 367, 371, 372, 376, 379, 628], "order": [0, 74, 86, 147, 159, 166, 289, 299, 303, 304, 307, 316, 359, 362, 367, 379, 380, 401, 404, 422, 507, 631], "If": [0, 1, 22, 23, 34, 43, 45, 61, 74, 78, 83, 84, 86, 87, 95, 96, 117, 130, 131, 132, 142, 147, 157, 158, 287, 288, 289, 298, 302, 303, 304, 305, 308, 310, 323, 360, 362, 372, 374, 375, 379, 380, 386, 387, 388, 390, 391, 393, 395, 396, 397, 398, 400, 402, 404, 410, 418, 422, 423, 424, 428, 429, 431, 433, 437, 454, 464, 470, 471, 473, 507, 511, 512, 550, 594, 597, 600, 603, 625, 627, 628, 630, 631, 633], "i": [0, 1, 22, 23, 34, 43, 55, 61, 70, 74, 78, 79, 80, 83, 84, 85, 86, 87, 95, 96, 102, 106, 108, 111, 112, 114, 117, 119, 124, 126, 127, 128, 132, 139, 142, 147, 157, 159, 162, 170, 287, 289, 298, 299, 302, 303, 304, 305, 308, 310, 313, 316, 318, 329, 332, 333, 334, 359, 360, 361, 362, 364, 374, 375, 376, 379, 380, 387, 390, 391, 393, 395, 396, 397, 398, 400, 402, 410, 411, 413, 415, 418, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 433, 437, 438, 440, 442, 446, 464, 470, 473, 507, 509, 511, 512, 550, 552, 553, 557, 560, 578, 580, 586, 587, 589, 594, 596, 597, 600, 604, 617, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633], "string": [0, 61, 70, 78, 86, 88, 102, 117, 119, 126, 147, 168, 316, 323, 328, 390, 395, 396, 402, 410, 415, 418, 433, 437, 442, 559, 560, 562, 627, 628], "ar": [0, 43, 74, 80, 85, 86, 96, 127, 147, 302, 303, 308, 310, 343, 346, 359, 360, 361, 367, 372, 377, 380, 385, 386, 390, 393, 396, 402, 404, 405, 410, 415, 419, 422, 425, 426, 437, 446, 473, 476, 507, 513, 557, 559, 560, 562, 578, 595, 598, 599, 625, 626, 627, 628, 629, 630, 631, 633], "individu": [0, 1, 23, 34, 147, 159, 359, 366, 380, 424, 464, 552, 553, 627, 628], "charact": [0, 102, 117, 120, 121, 126, 130, 147], "x": [0, 147, 316, 360, 364, 375, 390, 395, 396, 402, 405, 411, 413, 415, 417, 424, 431, 433, 444, 578, 585, 586, 595, 596, 606, 630, 631], "y": [0, 130, 147, 174, 280, 316, 360, 364, 368, 375, 390, 396, 405, 411, 415, 417, 431, 433, 444, 562, 578, 585, 595, 596, 606, 630, 631], "etc": [0, 147, 393, 630], "With": [0, 43, 147, 629, 630], "list": [0, 1, 7, 23, 27, 31, 34, 41, 57, 58, 59, 61, 80, 81, 85, 92, 102, 120, 127, 147, 158, 159, 161, 166, 170, 174, 283, 291, 295, 299, 306, 307, 308, 310, 311, 316, 343, 344, 345, 358, 359, 360, 361, 367, 369, 370, 371, 372, 373, 378, 380, 386, 387, 390, 395, 396, 400, 402, 404, 405, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 424, 426, 427, 428, 429, 431, 433, 444, 455, 464, 473, 552, 553, 557, 559, 560, 562, 578, 586, 597, 599, 601, 608, 609, 610, 611, 614, 624, 628, 629, 630, 631], "possibl": [0, 147, 287, 629, 630, 631], "give": [0, 147, 380], "more": [0, 43, 120, 147, 308, 313, 360, 380, 410, 426, 437, 440, 473, 475, 482, 578, 629, 630, 631], "descript": [0, 56, 147, 624], "auto_chunk_s": [0, 300], "int": [0, 1, 3, 11, 23, 25, 34, 36, 40, 43, 53, 55, 133, 159, 161, 164, 170, 174, 280, 283, 300, 301, 302, 304, 306, 310, 314, 318, 322, 330, 331, 336, 337, 338, 339, 340, 342, 343, 347, 362, 364, 366, 375, 376, 380, 390, 396, 401, 402, 404, 410, 415, 424, 426, 433, 437, 443, 446, 462, 464, 466, 468, 472, 473, 475, 500, 502, 510, 551, 557, 559, 560, 562, 578, 587, 604, 619, 624, 627], "1": [0, 1, 3, 6, 11, 23, 25, 43, 53, 61, 62, 102, 117, 119, 120, 121, 130, 138, 174, 280, 299, 300, 304, 318, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 347, 357, 360, 362, 364, 374, 376, 380, 390, 395, 396, 405, 411, 412, 414, 417, 423, 424, 429, 430, 431, 432, 440, 444, 449, 464, 466, 468, 472, 512, 513, 545, 547, 548, 557, 560, 624, 630, 631], "chunk": [0, 139, 140, 141, 142, 143, 144, 145, 146, 159, 161, 164, 170, 287, 300, 301, 302, 306, 310, 314, 379, 630, 631], "size": [0, 43, 102, 117, 119, 120, 124, 159, 164, 170, 299, 300, 302, 306, 310, 360, 368, 385, 410, 630], "us": [0, 1, 6, 12, 16, 17, 18, 22, 23, 29, 30, 43, 46, 50, 52, 55, 61, 74, 80, 86, 87, 89, 97, 102, 111, 130, 142, 157, 159, 167, 286, 287, 298, 300, 304, 305, 310, 315, 318, 323, 360, 361, 362, 364, 368, 374, 379, 380, 390, 393, 396, 410, 415, 418, 420, 423, 424, 425, 426, 427, 429, 430, 431, 433, 434, 437, 445, 446, 464, 469, 471, 473, 556, 557, 559, 561, 578, 587, 594, 619, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633], "auto": [0, 159, 161, 164, 170, 300, 301, 302, 314], "keyword": [0, 43, 74, 300, 303, 304, 305, 362, 379, 380, 386, 397, 402, 405, 410, 411, 412, 414, 420, 423, 424, 427, 429, 430, 432, 442, 444, 451, 475, 507, 511, 557], "simplify_chunk": [0, 314], "map": [0, 61, 95, 130, 139, 159, 161, 164, 170, 174, 176, 221, 252, 301, 302, 305, 314, 316, 343, 344, 372, 380, 385, 390, 396, 399, 404, 405, 410, 411, 415, 417, 437, 442, 444, 497, 612], "hashabl": [0, 155, 156, 157, 159, 161, 164, 170, 299, 301, 302, 314, 360], "tupl": [0, 43, 61, 80, 84, 158, 159, 161, 164, 170, 174, 283, 289, 301, 302, 303, 314, 318, 340, 342, 364, 366, 375, 393, 394, 429, 430, 431, 437, 438, 507], "simplyfi": [0, 314], "dictionari": [0, 61, 74, 80, 86, 170, 310, 314, 360, 372, 385, 395, 404, 429, 433, 455, 563, 598, 602, 607, 612, 615], "resolv": [0, 159, 174, 265, 314], "remov": [0, 61, 71, 83, 84, 90, 91, 299, 314, 371, 380, 423, 425, 429, 439, 441, 473, 588, 616, 631], "none": [0, 1, 5, 10, 12, 14, 16, 17, 18, 23, 34, 38, 43, 44, 46, 48, 50, 52, 61, 68, 71, 74, 75, 76, 77, 78, 80, 85, 87, 89, 93, 95, 102, 124, 131, 132, 133, 139, 143, 158, 159, 161, 164, 165, 166, 168, 170, 174, 181, 184, 252, 258, 259, 264, 272, 283, 284, 287, 288, 289, 301, 302, 303, 304, 305, 308, 310, 313, 314, 318, 330, 335, 339, 340, 343, 348, 360, 361, 362, 364, 367, 369, 370, 372, 374, 375, 376, 377, 379, 380, 381, 386, 387, 390, 393, 395, 396, 398, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 437, 440, 443, 444, 446, 449, 452, 457, 462, 473, 474, 475, 478, 479, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 550, 551, 559, 560, 562, 578, 579, 588, 595, 596, 604, 606, 611, 618, 619, 620, 627, 630], "entri": [0, 314, 360, 361, 367, 563, 577], "get_chunk_s": [0, 306], "": [0, 61, 63, 64, 65, 85, 102, 126, 128, 139, 144, 145, 146, 305, 306, 310, 311, 318, 360, 374, 379, 380, 390, 392, 393, 396, 399, 405, 410, 413, 415, 418, 424, 431, 436, 437, 440, 442, 444, 445, 473, 578, 622, 627, 628, 629, 630, 631], "d": [0, 61, 71, 83, 94, 95, 139, 143, 144, 145, 146, 159, 171, 306, 374, 478, 487, 497, 598, 607, 615, 633], "explicit": [0, 132, 306, 379, 386, 410, 550], "from": [0, 61, 71, 84, 86, 87, 88, 95, 102, 108, 120, 128, 130, 158, 159, 162, 288, 293, 306, 309, 310, 311, 312, 316, 317, 361, 371, 376, 379, 380, 387, 390, 392, 393, 395, 396, 397, 400, 401, 402, 404, 408, 418, 421, 426, 427, 429, 431, 439, 441, 442, 473, 509, 552, 557, 560, 585, 597, 601, 605, 606, 611, 614, 623, 627, 628, 629, 630, 631], "singl": [0, 85, 306, 359, 380, 389, 390, 410, 415, 438, 586, 597, 629, 630, 631], "chunk_args_equ": [0, 302], "c1": [0, 301, 302, 374], "bool": [0, 1, 3, 8, 23, 25, 33, 34, 36, 43, 45, 130, 131, 132, 158, 159, 161, 162, 165, 174, 280, 283, 289, 290, 301, 302, 310, 318, 319, 320, 321, 324, 325, 326, 332, 333, 334, 360, 378, 380, 387, 390, 391, 393, 395, 396, 403, 404, 410, 415, 418, 421, 423, 427, 428, 429, 431, 437, 440, 464, 466, 469, 470, 471, 473, 511, 550, 556, 560, 587, 595, 604, 606, 613, 617, 627], "whether": [0, 1, 8, 23, 33, 61, 79, 102, 114, 158, 159, 165, 289, 290, 302, 310, 318, 332, 333, 334, 360, 380, 390, 393, 395, 396, 404, 410, 415, 418, 423, 425, 429, 431, 437, 455, 464, 469, 470, 473, 587], "two": [0, 302, 313, 513, 578, 595, 629, 630], "xarrai": [0, 55, 57, 58, 59, 302, 311, 359, 360, 379, 624, 628, 629, 630, 631], "argument": [0, 55, 61, 74, 80, 86, 87, 102, 117, 124, 288, 302, 304, 305, 311, 362, 372, 378, 379, 380, 386, 388, 390, 393, 397, 399, 405, 410, 411, 412, 414, 420, 422, 424, 427, 429, 430, 432, 437, 438, 442, 444, 451, 473, 475, 511, 513, 556, 557, 559, 562, 578, 589, 597, 599, 603, 604, 617, 629, 630, 631], "equal": [0, 126, 159, 162, 302, 595], "alwai": [0, 126, 287, 302, 304, 362, 631], "present": [0, 61, 79, 84, 86, 95, 302, 380, 397, 400, 402, 421, 585, 595, 633], "its": [0, 289, 302, 379, 395, 413, 615, 629, 630, 631], "interpret": [0, 302, 367, 473], "can_rechunk_no_split": [0, 301], "true": [0, 1, 3, 22, 23, 25, 33, 34, 36, 43, 45, 61, 62, 68, 80, 96, 102, 118, 122, 125, 130, 131, 132, 142, 157, 174, 181, 268, 274, 275, 280, 289, 298, 301, 303, 305, 308, 310, 318, 332, 333, 334, 360, 368, 378, 380, 381, 387, 390, 391, 393, 395, 396, 402, 404, 410, 411, 415, 418, 425, 427, 428, 429, 430, 431, 437, 446, 455, 464, 470, 471, 473, 507, 511, 513, 516, 550, 560, 578, 587, 594, 595, 606, 617, 630, 631], "can": [0, 19, 22, 43, 46, 61, 74, 85, 102, 114, 118, 120, 122, 125, 139, 142, 155, 157, 159, 162, 168, 287, 289, 296, 298, 301, 302, 304, 315, 318, 328, 361, 362, 372, 379, 380, 386, 390, 393, 395, 396, 410, 419, 422, 423, 424, 426, 427, 431, 445, 473, 556, 557, 563, 578, 589, 594, 597, 622, 625, 626, 627, 628, 629, 630, 631, 633], "rechunk": [0, 301, 631], "accord": [0, 1, 23, 34, 40, 287, 301, 310, 343, 346, 348, 360, 612, 630, 631], "c2": [0, 301, 302], "without": [0, 159, 162, 301, 329, 380, 388, 425, 631], "need": [0, 170, 287, 289, 301, 473, 482, 625, 630, 631], "split": [0, 174, 268, 274, 275, 301, 367], "up": [0, 1, 10, 23, 34, 44, 74, 301, 343, 345, 358, 367, 380, 411, 423, 433, 440, 442, 446, 473, 510, 623, 629, 630, 633], "ani": [0, 1, 3, 7, 23, 25, 31, 34, 36, 41, 43, 61, 64, 65, 80, 106, 159, 162, 301, 308, 310, 311, 323, 329, 342, 360, 369, 370, 372, 379, 380, 384, 390, 393, 399, 403, 408, 413, 422, 423, 425, 442, 451, 464, 506, 511, 552, 553, 563, 569, 589, 592, 597, 602, 608, 609, 610, 611, 617, 629, 631], "adjust_dim": [0, 299], "dim": [0, 170, 299, 630], "iter": [0, 1, 3, 5, 10, 23, 25, 34, 36, 38, 40, 44, 45, 55, 61, 85, 87, 95, 102, 103, 139, 296, 297, 298, 299, 380, 390, 395, 396, 404, 410, 415, 431, 437, 455, 604, 606, 624, 629, 630], "arrai": [0, 43, 299, 310, 357, 359, 360, 361, 366, 371, 374, 376, 377, 379, 390, 413, 415, 628, 630], "dataarrai": [0, 19, 53, 55, 57, 58, 59, 60, 299, 310, 311, 360, 379, 624, 629, 630], "new": [0, 43, 61, 70, 102, 104, 121, 124, 158, 287, 288, 289, 299, 343, 346, 358, 359, 360, 372, 415, 422, 423, 425, 454, 511, 512, 513, 530, 556, 563, 573, 603, 604, 630, 632], "same": [0, 43, 158, 159, 166, 287, 288, 299, 303, 313, 357, 359, 376, 388, 390, 395, 396, 408, 410, 415, 423, 433, 434, 437, 445, 473, 507, 559, 560, 562, 606, 627, 628, 629, 630, 631], "content": [0, 80, 102, 113, 159, 162, 287, 299, 379, 588, 615, 631, 632], "match": [0, 287, 299, 308, 310, 395, 403, 420, 431, 557, 559, 560, 562, 611, 617, 628, 631], "achiev": [0, 299], "combin": [0, 1, 23, 34, 40, 299, 358, 359, 361, 373, 425, 628, 631], "expand_dim": [0, 299], "squeez": [0, 299], "transform": [0, 159, 171, 299, 307, 630, 631], "when": [0, 96, 128, 159, 162, 299, 366, 380, 388, 391, 393, 395, 396, 402, 418, 426, 431, 433, 482, 578, 580, 627, 628, 629, 630, 631], "try": [0, 299, 366, 393, 589, 628, 631, 633], "larger": [0, 299, 380, 410], "than": [0, 299, 360, 376, 395, 418, 431, 513, 545, 548, 560, 630, 631], "an": [0, 1, 23, 34, 43, 45, 54, 55, 61, 74, 78, 85, 90, 93, 96, 102, 108, 114, 117, 119, 131, 139, 146, 159, 166, 299, 303, 305, 313, 361, 366, 369, 370, 376, 380, 393, 399, 408, 422, 425, 429, 440, 446, 473, 477, 507, 600, 602, 614, 622, 624, 626, 628, 629, 631, 632], "error": [0, 102, 110, 131, 158, 288, 299, 304, 305, 362, 375, 380, 395, 429, 473, 474], "thrown": [0, 299], "get_dim_order_list": [0, 307], "str": [0, 56, 130, 131, 133, 147, 158, 159, 161, 166, 170, 172, 174, 177, 283, 287, 292, 299, 304, 307, 310, 311, 313, 316, 318, 323, 327, 328, 329, 335, 340, 341, 343, 344, 345, 358, 359, 360, 361, 362, 365, 367, 371, 372, 379, 380, 390, 392, 393, 396, 397, 398, 402, 403, 408, 410, 415, 418, 421, 423, 426, 427, 429, 437, 438, 439, 440, 443, 445, 446, 455, 463, 473, 475, 477, 500, 506, 509, 513, 540, 551, 555, 557, 559, 560, 562, 578, 587, 588, 598, 600, 601, 602, 603, 605, 606, 611, 613, 614, 616, 624], "form": [0, 307, 316, 372, 374, 628], "translate_ord": [0, 316], "translat": [0, 316], "compact": [0, 316], "verbos": [0, 61, 64, 65, 66, 174, 280, 316], "vice": [0, 316], "versa": [0, 316], "A": [0, 1, 12, 23, 46, 55, 56, 57, 58, 59, 85, 139, 158, 159, 287, 293, 299, 304, 310, 315, 316, 318, 327, 328, 357, 360, 362, 366, 372, 374, 379, 385, 390, 393, 396, 405, 410, 411, 412, 414, 415, 417, 420, 423, 437, 438, 444, 446, 455, 464, 473, 509, 511, 512, 554, 563, 578, 601, 604, 611, 614, 624, 625, 627, 628, 630, 631], "where": [0, 43, 309, 310, 312, 316, 317, 365, 438, 557, 596, 612, 627], "each": [0, 61, 80, 127, 313, 316, 380, 390, 396, 405, 410, 411, 412, 414, 415, 417, 424, 431, 437, 444, 455, 473, 557, 559, 560, 562], "letter": [0, 316, 560], "repres": [0, 174, 241, 316, 473, 477, 509], "e": [0, 61, 85, 95, 174, 180, 313, 316, 379, 390, 393, 396, 410, 415, 426, 431, 437, 578, 630], "g": [0, 85, 316, 379, 390, 393, 396, 410, 415, 426, 431, 437, 578], "xyz": [0, 316, 631], "generalverticallay": [0, 316], "load_array_grib": [0, 310, 311], "path": [0, 130, 131, 174, 184, 192, 287, 308, 310, 365, 380, 393, 442, 445, 473, 555, 588, 600, 603, 616, 627, 633], "load": [0, 1, 12, 23, 31, 34, 41, 46, 52, 309, 310, 311, 312, 317, 343, 346, 393, 431, 473, 627, 628, 629, 630, 631], "given": [0, 1, 23, 34, 61, 74, 78, 81, 83, 85, 87, 88, 158, 159, 171, 287, 289, 290, 310, 316, 357, 360, 361, 371, 372, 375, 376, 380, 408, 421, 430, 436, 464, 470, 509, 512, 552, 553, 587, 588, 595, 598, 600, 603, 611, 616], "grib": [0, 148, 150, 309, 310, 311, 627, 630, 631], "load_grib": [0, 311, 631], "grib_fil": [0, 311], "dataset": [0, 19, 23, 27, 53, 55, 57, 58, 59, 60, 158, 159, 171, 287, 288, 289, 293, 311, 358, 359, 360, 361, 363, 365, 367, 371, 372, 373, 377, 379, 380, 397, 407, 419, 439, 624, 629, 630, 631, 632], "conveni": [0, 311, 379, 380, 383, 604, 626], "multipl": [0, 310, 311, 360, 378, 408, 422, 557, 627, 628, 630, 631], "them": [0, 311, 358, 387, 425, 431, 478, 489, 510, 625, 628, 629, 630, 631], "format": [0, 61, 96, 148, 149, 150, 151, 152, 153, 154, 159, 161, 168, 304, 362, 393, 509, 627, 628, 629, 630, 631], "enum": [0, 148, 153, 154, 557], "support": [0, 55, 97, 148, 379, 390, 393, 395, 556, 625, 628, 629, 633], "disk": [0, 158, 380, 385, 393, 630], "measure_runtim": [0, 378, 629, 630], "runtim": [0, 1, 9, 12, 16, 17, 18, 23, 32, 34, 40, 42, 45, 46, 47, 48, 49, 50, 51, 52, 357, 358, 359, 360, 361, 367, 373, 374, 376, 377, 378, 578, 589, 591, 592, 623, 630, 632], "measur": [0, 1, 5, 9, 10, 12, 23, 32, 34, 38, 42, 44, 45, 46, 50, 374, 375, 378, 411, 630, 632], "run": [0, 1, 12, 23, 28, 34, 39, 40, 46, 50, 130, 159, 361, 369, 378, 380, 385, 386, 387, 391, 393, 402, 410, 417, 422, 423, 429, 430, 435, 437, 442, 446, 464, 470, 473, 476, 511, 512, 552, 553, 623, 625, 626, 628, 632], "daskrunconfig": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 23, 629], "runconfig": [0, 1, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 361, 369, 378, 628, 629, 630], "oper": [0, 1, 12, 23, 28, 34, 39, 53, 55, 56, 57, 58, 59, 60, 106, 379, 390, 395, 396, 420, 424, 623, 626, 628, 631, 632], "cluster": [0, 1, 6, 23, 380, 385, 388, 390, 393, 395, 410, 411, 415, 422, 423, 424, 426, 432, 436, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 473, 475, 477, 482, 500, 502, 510, 511, 512, 627, 628, 629, 633], "daskruntim": [0, 1, 9, 12, 13, 14, 15, 16, 17, 18, 23, 32, 629, 630], "report": [0, 1, 8, 12, 23, 423, 440, 626, 627, 629], "operatorrunconfig": [0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 629, 630], "conform": [0, 23, 159, 171, 323, 629, 630], "standard": [0, 23, 318, 360, 446, 627, 630], "signatur": [0, 1, 3, 12, 14, 23, 25, 34, 36, 46, 48, 61, 68, 102, 104, 159, 161, 174, 181, 304, 362, 380, 381, 446, 449, 464, 466, 473, 474, 478, 479, 513, 530, 557, 558, 563, 569, 573, 578, 579, 589, 593, 611, 617, 629, 630], "abc": [0, 3, 19, 21, 22, 25, 34, 36, 55, 57, 58, 59, 61, 139, 142, 157, 161, 296, 297, 298, 329, 335, 341, 359, 360, 380, 408, 594, 599, 609, 611, 624], "set": [0, 1, 10, 23, 34, 43, 44, 45, 61, 93, 94, 102, 110, 130, 132, 139, 144, 145, 174, 283, 343, 345, 348, 380, 390, 391, 395, 396, 397, 402, 410, 413, 415, 424, 426, 431, 433, 437, 446, 473, 550, 557, 560, 596, 619, 623, 627, 629, 631], "captur": [0, 46, 629, 630], "differ": [0, 46, 158, 159, 162, 295, 358, 360, 361, 369, 370, 379, 402, 426, 473, 512, 513, 626, 628, 629, 630, 631], "stage": [0, 46], "cathegor": [0, 46], "serial": [0, 12, 14, 16, 17, 18, 46, 50, 52, 159, 174, 266, 357, 360, 364, 374, 380, 381, 393, 630], "overhead": [0, 12, 46, 50, 360, 364, 630], "parallel": [0, 12, 46, 50, 310, 431, 464, 470, 619, 623, 626, 629], "region": [0, 46], "get_pyplot_grouped_bar_po": [0, 366], "ndarrai": [0, 3, 25, 36, 43, 357, 364, 366, 374, 375, 376, 379, 618, 620], "float": [0, 12, 14, 16, 17, 18, 43, 46, 48, 50, 51, 52, 174, 280, 283, 366, 426, 443, 473, 513, 629], "bar": [0, 360, 366, 556, 604, 628], "posit": [0, 102, 121, 123, 124, 366, 437, 511, 513], "creat": [0, 1, 8, 23, 61, 70, 102, 104, 158, 159, 167, 287, 288, 289, 358, 360, 366, 368, 380, 395, 396, 431, 433, 473, 477, 513, 530, 556, 563, 573, 597, 603, 622, 626, 628, 629, 630, 632], "group": [0, 366, 628], "pyplot": [0, 366], "along": [0, 1, 23, 34, 43, 289, 366, 375, 557, 628, 630, 633], "width": [0, 181, 366, 368], "row": [0, 313, 366], "contain": [0, 43, 128, 139, 308, 361, 366, 390, 393, 395, 446, 473, 578, 609, 622, 629, 630, 631, 633], "label": [0, 360, 361, 366, 371, 372], "while": [0, 43, 55, 360, 366, 393, 410, 420, 426, 429, 430, 624, 628, 629, 630], "column": [0, 366, 374], "print_version_result": [0, 370], "result": [0, 43, 358, 359, 360, 361, 363, 365, 367, 369, 370, 371, 372, 373, 377, 379, 380, 385, 387, 390, 393, 395, 396, 402, 415, 429, 626, 627, 629, 630, 632], "print": [0, 130, 330, 335, 339, 340, 369, 370, 429, 430, 628, 633], "print_result": [0, 369], "exp_name_attr": [0, 363], "attribut": [0, 87, 287, 303, 343, 344, 346, 361, 363, 373, 379, 393, 423, 446, 507, 557, 585, 596, 601, 602, 606, 628, 629, 630, 631], "store": [0, 23, 33, 287, 305, 312, 317, 360, 363, 365, 373, 375, 377, 380, 393, 419, 432, 433, 444, 627, 628, 629, 630, 631], "rt_combined_attr": [0, 373], "rt_combin": [0, 373], "create_result_dataset": [0, 361, 630], "construct": [0, 1, 7, 12, 16, 23, 27, 159, 162, 361, 478, 488, 631], "coordin": [0, 159, 165, 310, 359, 360, 361, 372, 377, 379, 628], "which": [0, 1, 7, 23, 27, 34, 43, 80, 126, 158, 159, 170, 287, 293, 299, 302, 304, 305, 310, 315, 323, 359, 360, 361, 362, 367, 372, 375, 376, 379, 380, 388, 390, 393, 396, 405, 408, 410, 411, 415, 419, 420, 424, 429, 430, 431, 437, 438, 443, 446, 464, 473, 552, 553, 556, 559, 560, 562, 563, 585, 596, 599, 611, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633], "were": [0, 361, 422, 585, 612, 628, 629, 631], "record": [0, 360, 361, 402, 628, 630], "nan": [0, 1, 12, 14, 23, 34, 43, 46, 48, 51, 361], "everi": [0, 159, 170, 360, 361, 380, 402, 438, 596, 622, 628, 631], "create_cores_dimens": [0, 359], "merg": [0, 174, 280, 359], "contribut": [0, 359], "total": [0, 120, 359, 374, 473, 513, 549], "amount": [0, 53, 359, 390, 396, 410, 415, 433, 437, 473, 475, 500, 557, 560], "core": [0, 55, 57, 58, 59, 128, 357, 359, 360, 374, 379, 380, 412, 414, 431, 446, 464, 468, 470, 473, 474, 478, 500, 502, 624, 626, 628, 629, 630], "number": [0, 1, 11, 23, 34, 40, 43, 55, 61, 64, 65, 120, 126, 304, 318, 330, 339, 343, 347, 359, 362, 366, 380, 388, 390, 396, 401, 402, 404, 410, 412, 414, 415, 424, 426, 431, 437, 443, 462, 464, 468, 470, 472, 473, 475, 500, 502, 513, 543, 545, 548, 604, 605, 618, 619, 620, 628, 629], "calcul": [0, 359, 360, 376], "product": [0, 1, 23, 34, 159, 359, 464, 552, 553, 629], "sort": [0, 318, 359], "increas": [0, 359, 379], "rename_label": [0, 372], "renam": [0, 372, 633], "some": [0, 12, 46, 50, 372, 379, 402, 413, 426, 427, 578, 623, 629, 630, 631], "chang": [0, 102, 121, 159, 162, 304, 362, 372, 473, 622, 628], "remove_label": [0, 371], "main": [0, 130, 360, 367, 371, 410, 437, 628], "combine_runtim": [0, 358], "togeth": [0, 358, 625], "ad": [0, 1, 23, 34, 45, 86, 127, 303, 358, 422, 442, 473, 507, 585, 629, 630, 631], "simple_lin_reg": [0, 375], "perform": [0, 1, 5, 23, 34, 38, 55, 159, 162, 375, 379, 390, 396, 410, 415, 424, 437, 559, 604, 615, 626, 627, 630, 631], "simpl": [0, 170, 308, 375], "linear": [0, 375], "regress": [0, 364, 374, 375], "axi": [0, 1, 23, 34, 43, 360, 364, 368, 375, 376], "speedup": [0, 357, 360, 364, 376], "find_scal": [0, 364], "scale": [0, 360, 364, 446, 462, 473, 475, 482, 497, 500, 502, 510, 626, 627, 630], "factor": [0, 360, 364], "rate": [0, 360, 364], "seri": [0, 360, 364, 375, 376], "done": [0, 364, 374], "via": [0, 364, 374, 401, 404, 556, 625, 627, 628, 629, 631], "lpha": [0, 364, 375], "eta": [0, 364, 375], "indic": [0, 61, 79, 121, 174, 238, 271, 289, 310, 360, 364, 379, 390, 396, 410, 415, 437, 556, 630], "assum": [0, 61, 78, 364, 433, 633], "amdahl_speedup": [0, 357], "f": [0, 61, 87, 95, 130, 174, 180, 280, 357, 379, 423, 589, 599, 622, 629], "c": [0, 19, 22, 61, 130, 139, 142, 155, 157, 296, 298, 314, 357, 374, 380, 395, 396, 403, 405, 411, 412, 414, 417, 419, 424, 429, 430, 431, 432, 433, 437, 439, 444, 578, 589, 594, 622, 625, 633], "fraction": [0, 357, 374], "select": [0, 357, 374, 418, 426, 427, 455, 562, 628, 630], "count": [0, 174, 230, 357, 359, 374, 380, 402, 426], "serial_overhead_analysi": [0, 374], "t": [0, 61, 64, 114, 170, 174, 180, 280, 374, 393, 402, 464, 470, 473, 509, 557, 560, 561, 562, 563, 577, 578, 585, 586, 596, 607, 608, 610, 611, 612, 615, 617, 622, 631], "estim": [0, 360, 374], "close": [0, 102, 106, 107, 174, 195, 287, 374, 380, 388, 427, 434, 446, 452, 473, 478, 482, 589, 590, 591, 592, 593, 594], "solut": [0, 374], "least": [0, 374, 559, 560, 562, 625], "squar": [0, 374, 375], "amdahl": [0, 374], "law": [0, 374], "store_config": [0, 377, 628], "yaml": [0, 130, 158, 159, 174, 176, 177, 178, 179, 280, 285, 286, 377, 393, 473, 627, 628, 633], "valu": [0, 1, 2, 12, 13, 23, 24, 34, 35, 43, 46, 47, 61, 69, 74, 80, 83, 86, 93, 96, 97, 98, 99, 100, 101, 102, 130, 139, 140, 146, 148, 154, 158, 159, 160, 174, 258, 265, 280, 288, 305, 310, 313, 318, 319, 320, 321, 324, 325, 326, 360, 372, 375, 377, 380, 390, 396, 400, 401, 404, 410, 413, 415, 433, 437, 446, 447, 464, 465, 473, 506, 513, 515, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 532, 533, 535, 536, 537, 538, 539, 541, 542, 557, 563, 565, 566, 568, 570, 571, 572, 576, 578, 581, 584, 628, 630, 633], "get_plots_dir": [0, 365, 628], "o": [0, 102, 130, 174, 280, 310, 311, 365, 429, 555, 588, 600, 603, 616], "pathlik": [0, 287, 310, 311, 365, 555, 588, 600, 603, 616], "should": [0, 22, 86, 109, 110, 121, 142, 157, 287, 298, 313, 359, 360, 364, 365, 376, 380, 390, 395, 396, 402, 404, 410, 415, 429, 430, 433, 437, 446, 464, 470, 473, 482, 556, 559, 560, 562, 594, 611, 630, 633], "specif": [0, 135, 365, 412, 414, 424, 557, 627, 628, 629, 630, 631], "plot_styl": [0, 368], "ax": [0, 43, 368], "axisbelow": [0, 368], "edgecolor": [0, 368], "6272a4": [0, 368], "facecolor": [0, 368], "282a36": [0, 368], "grid": [0, 368], "labelcolor": [0, 368], "labelpad": [0, 368], "18": [0, 130, 368], "linewidth": [0, 368], "0": [0, 43, 61, 62, 102, 121, 130, 134, 135, 159, 167, 170, 174, 180, 280, 305, 316, 318, 327, 331, 336, 337, 338, 342, 357, 364, 368, 380, 390, 395, 396, 410, 415, 429, 431, 432, 437, 451, 473, 474, 500, 502, 513, 545, 548, 557, 630], "3": [0, 43, 130, 174, 280, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 368, 390, 395, 396, 405, 411, 417, 423, 424, 431, 440, 444, 557, 560, 625], "prop_cycl": [0, 368], "cycler": [0, 368], "color": [0, 368], "8be9fd": [0, 368], "ffb86c": [0, 368], "50fa7b": [0, 368], "ff5555": [0, 368], "bd93f9": [0, 368], "ff79c6": [0, 368], "44475a": [0, 368], "f1fa8c": [0, 368], "spine": [0, 368], "bottom": [0, 368], "fals": [0, 1, 3, 6, 8, 22, 23, 25, 61, 62, 68, 74, 75, 76, 77, 78, 80, 114, 129, 130, 131, 132, 142, 157, 174, 181, 202, 206, 209, 221, 228, 271, 280, 289, 298, 303, 308, 318, 332, 333, 334, 360, 368, 380, 381, 387, 390, 391, 393, 396, 402, 403, 404, 410, 411, 415, 418, 421, 425, 429, 430, 431, 437, 446, 449, 455, 464, 466, 469, 470, 471, 474, 507, 511, 512, 513, 516, 550, 560, 578, 579, 587, 594, 617, 629, 630, 631], "left": [0, 43, 368, 578, 584], "right": [0, 368, 578, 581], "top": [0, 368], "titlepad": [0, 368], "40": [0, 368, 630], "titles": [0, 368], "14": [0, 368, 625], "xmargin": [0, 368], "ymargin": [0, 368], "boxplot": [0, 368], "boxprop": [0, 368], "f8f8f2": [0, 368], "capprop": [0, 368], "flierprop": [0, 368], "markeredgecolor": [0, 368], "whiskerprop": [0, 368], "figur": [0, 368, 402], "font": [0, 368], "legend": [0, 368], "framealpha": [0, 368], "line": [0, 87, 102, 120, 127, 304, 360, 362, 368, 473, 628, 633], "patch": [0, 304, 362, 368], "savefig": [0, 368], "text": [0, 102, 109, 174, 197, 268, 269, 273, 274, 275, 304, 362, 368], "xtick": [0, 368], "major": [0, 304, 318, 336, 362, 368], "4": [0, 43, 174, 280, 368, 380], "minor": [0, 304, 318, 338, 362, 368], "ytick": [0, 368], "style": [0, 130, 174, 258, 308, 368], "create_plot": [0, 360, 628, 630], "creation": [0, 303, 360, 507], "follow": [0, 61, 64, 65, 95, 304, 313, 360, 362, 426, 427, 433, 446, 578, 622, 625, 629, 630], "ha": [0, 43, 61, 87, 95, 106, 108, 299, 304, 357, 360, 362, 395, 423, 454, 464, 470, 478, 485, 606, 629], "correspond": [0, 61, 83, 360, 433, 628], "implement": [0, 1, 9, 23, 28, 31, 32, 34, 39, 41, 42, 43, 55, 57, 58, 59, 61, 102, 103, 105, 112, 139, 313, 360, 379, 446, 464, 470, 563, 564, 576, 580, 624, 628, 629, 632], "For": [0, 43, 313, 360, 390, 420, 423, 433, 446, 451, 473, 622, 625, 628, 629, 630, 631], "greater": [0, 360], "except": [0, 43, 139, 323, 360, 393, 429, 560, 589, 592], "imp": [0, 360], "other": [0, 1, 2, 12, 13, 23, 24, 34, 35, 46, 47, 61, 139, 140, 159, 160, 162, 318, 319, 320, 321, 324, 325, 326, 360, 387, 419, 429, 434, 446, 447, 464, 465, 473, 557, 622, 628], "reduc": [0, 43, 360, 424], "flatten": [0, 43, 360, 375, 597, 598, 605, 628], "reduct": [0, 359, 360], "plot_runtime_part": [0, 367], "how": [0, 359, 367, 425, 626, 630], "full": [0, 12, 14, 46, 48, 51, 367, 400, 427, 464, 469, 629, 632], "schedul": [0, 3, 25, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 629, 630], "clusterconfig": [0, 1, 3, 6, 23, 25, 464, 465, 466, 467, 468, 469, 470, 471, 472, 512, 629, 630], "client": [0, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 454, 473, 505, 508, 511, 512], "distribut": [0, 380, 381, 388, 392, 395, 401, 402, 404, 416, 421, 423, 426, 427, 431, 438, 440, 441, 443, 446, 451, 473, 474, 475, 505, 508, 511, 625], "activ": [0, 304, 362, 380, 386, 424, 426, 427, 431, 432, 473, 475, 505, 622], "start_slurm_clust": [0, 511, 512], "start": [0, 1, 10, 23, 34, 44, 45, 121, 308, 380, 388, 402, 410, 415, 418, 423, 435, 440, 473, 478, 489, 510, 511, 512, 559, 560, 562], "alreadi": [0, 106, 158, 288, 289, 290, 380, 387, 402, 413, 421, 423, 454, 512, 585, 630, 631], "shut": [0, 380, 425, 434, 482, 512], "down": [0, 380, 425, 434, 482, 512], "start_schedul": [0, 511], "either": [0, 61, 95, 316, 372, 379, 386, 393, 395, 420, 511, 556, 617, 625], "debug": [0, 129, 132, 380, 393, 430, 473, 511, 550, 627], "mode": [0, 129, 132, 387, 395, 396, 428, 431, 437, 511, 550, 622, 627, 633], "clear_memori": [0, 504], "clear": [0, 61, 71, 504], "memori": [0, 102, 379, 380, 385, 393, 395, 405, 420, 424, 431, 473, 475, 500, 502, 504], "attent": [0, 504], "rais": [0, 43, 61, 83, 84, 106, 111, 131, 158, 288, 323, 380, 388, 391, 395, 397, 400, 403, 425, 429, 431, 436, 437, 443, 504, 560, 562, 578, 589, 592], "notimplementederror": [0, 504], "becaus": [0, 84, 504, 629], "provid": [0, 43, 61, 74, 80, 127, 139, 144, 145, 146, 159, 170, 379, 380, 386, 398, 400, 415, 446, 504, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633], "effici": [0, 393, 504, 630, 631], "wai": [0, 323, 504, 629], "clearn": [0, 504], "get_client": [0, 446, 454, 473, 508], "regist": [0, 380, 421, 422, 423, 508, 510], "scale_and_wait": [0, 510], "n": [0, 55, 61, 64, 65, 66, 174, 180, 280, 380, 401, 404, 424, 443, 446, 462, 473, 500, 502, 510, 557, 560, 578], "wait": [0, 380, 405, 420, 425, 426, 429, 430, 443, 444, 473, 478, 485, 510, 627], "dask_config_get_not_non": [0, 506], "kei": [0, 61, 67, 69, 74, 83, 86, 95, 96, 139, 141, 145, 310, 360, 380, 386, 390, 396, 400, 405, 410, 411, 418, 420, 423, 426, 429, 431, 433, 436, 437, 440, 506, 557, 598, 612], "get": [0, 61, 74, 94, 139, 143, 158, 293, 380, 390, 396, 397, 400, 401, 402, 404, 423, 426, 427, 446, 506, 628, 630, 631], "would": [0, 289, 506, 630, 631], "parse_slurm_tim": [0, 509], "timedelta": [0, 390, 396, 410, 415, 437, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549], "durat": [0, 380, 402, 509, 513, 549], "being": [0, 86, 87, 360, 387, 426, 509], "pass": [0, 43, 80, 159, 168, 287, 303, 311, 360, 372, 379, 380, 390, 393, 402, 408, 415, 421, 423, 440, 473, 475, 507, 509, 511, 627, 629, 631], "check_socket_open": [0, 587], "host": [0, 130, 473, 474, 587], "localhost": [0, 587, 630], "port": [0, 426, 427, 431, 473, 587], "open": [0, 85, 130, 174, 232, 380, 392, 393, 587, 589], "alia": [0, 19, 147, 159, 174, 410, 437, 473, 478, 554, 555], "recommend": [0, 420, 555, 625], "py": [0, 313, 442, 555, 630], "pep": [0, 303, 323, 507, 555, 578], "519": [0, 555], "get_absolut": [0, 600], "abolut": [0, 600], "context": [0, 380, 384, 391, 402, 446, 473, 503, 589, 591, 592, 600], "rel": [0, 121, 360, 600], "wa": [0, 132, 159, 167, 303, 316, 379, 388, 425, 507, 550, 560, 600, 604, 628, 630, 631], "absolut": [0, 121, 124, 600], "directli": [0, 287, 289, 372, 379, 380, 393, 395, 396, 431, 600, 630, 631], "get_path": [0, 603], "arg": [0, 7, 19, 20, 23, 27, 379, 380, 389, 419, 423, 424, 429, 430, 437, 440, 446, 456, 473, 475, 503, 578, 580, 597, 599, 603, 611], "join": [0, 603], "do": [0, 159, 167, 286, 313, 380, 390, 397, 402, 403, 421, 603, 629], "exist": [0, 61, 78, 80, 85, 102, 111, 131, 158, 288, 289, 290, 380, 390, 391, 396, 400, 410, 413, 415, 421, 437, 440, 473, 477, 557, 559, 562, 578, 603, 616, 631], "yet": [0, 387, 603, 625], "thei": [0, 367, 380, 387, 410, 413, 422, 578, 603, 628, 631], "remove_if_exist": [0, 616], "origin": [0, 43, 96, 560, 616, 628], "clear_dir": [0, 588], "pbararg": [0, 378, 556, 604], "tqdm": [0, 378, 556, 604], "std": [0, 378, 556, 604], "progress": [0, 556, 604], "accept": [0, 395, 438, 556], "output": [0, 1, 7, 23, 27, 33, 43, 53, 55, 56, 60, 299, 375, 379, 393, 395, 429, 431, 556, 624, 628, 629, 630, 631], "boolean": [0, 387, 395, 402, 411, 418, 429, 455, 556, 628], "all": [0, 43, 57, 58, 59, 61, 71, 74, 80, 85, 86, 120, 139, 159, 166, 287, 303, 318, 327, 360, 380, 386, 387, 390, 396, 398, 403, 404, 405, 410, 411, 412, 414, 415, 417, 418, 420, 422, 423, 424, 425, 426, 429, 430, 431, 437, 442, 444, 455, 507, 513, 556, 557, 559, 560, 562, 578, 595, 622, 624, 628, 629, 631, 633], "preexist": [0, 288, 556, 631], "updat": [0, 61, 95, 556, 615], "get_pbar": [0, 604], "pbar": [0, 378, 604], "make": [0, 380, 604, 625, 630], "sure": [0, 604, 625, 630], "one": [0, 43, 87, 102, 111, 304, 310, 360, 362, 376, 415, 423, 424, 455, 464, 469, 470, 559, 560, 562, 604, 627, 629], "request": [0, 311, 446, 461, 473, 499, 560, 604, 630, 631], "fill_none_properti": [0, 596], "copi": [0, 379, 413, 424, 446, 585, 596, 615], "add_missing_properti": [0, 585], "object": [0, 23, 29, 54, 61, 68, 74, 75, 76, 77, 80, 87, 102, 104, 106, 111, 113, 118, 122, 125, 128, 139, 144, 145, 146, 159, 168, 169, 173, 174, 281, 287, 305, 318, 319, 323, 326, 380, 384, 390, 395, 396, 399, 410, 413, 415, 418, 419, 423, 429, 430, 431, 446, 454, 473, 482, 509, 513, 530, 563, 573, 585, 595, 597, 602, 605, 606, 609, 624, 630, 631, 632], "equals_not_non": [0, 595], "compar": [0, 305, 318, 360, 595, 630], "common": [0, 380, 390, 396, 410, 415, 437, 446, 595, 623], "properti": [0, 72, 158, 288, 289, 290, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 383, 392, 406, 409, 453, 457, 458, 459, 460, 461, 463, 476, 490, 492, 493, 494, 495, 498, 499, 595, 629, 631], "both": [0, 305, 402, 473, 595, 630], "has_attribut": [0, 606], "get_class_attribute_nam": [0, 601], "cl": [0, 174, 264, 303, 507, 601], "get_class_attribut": [0, 602], "obj": [0, 602], "dict": [0, 61, 68, 86, 159, 164, 170, 174, 283, 310, 316, 343, 344, 360, 372, 380, 385, 390, 393, 395, 396, 397, 402, 405, 410, 411, 412, 414, 415, 419, 420, 424, 427, 429, 430, 431, 432, 433, 437, 442, 444, 455, 473, 497, 598, 599, 602, 605, 607, 612, 615], "sig_matches_hint": [0, 617], "sig": [0, 617], "callabl": [0, 1, 3, 19, 21, 23, 25, 28, 34, 36, 39, 55, 57, 58, 59, 158, 287, 293, 359, 360, 379, 410, 422, 429, 430, 437, 438, 599, 609, 611, 617, 624], "list_funcs_match": [0, 611], "collect": [0, 1, 3, 7, 19, 21, 23, 25, 27, 36, 55, 57, 58, 59, 61, 139, 161, 174, 283, 296, 297, 359, 360, 380, 386, 389, 390, 393, 395, 396, 400, 402, 408, 413, 415, 418, 419, 429, 455, 599, 609, 611, 624, 631], "modul": [0, 174, 283, 304, 362, 423, 589, 611, 622, 628, 629, 630], "paramet": [0, 7, 27, 43, 53, 55, 56, 60, 131, 287, 289, 299, 302, 304, 305, 306, 307, 310, 311, 316, 323, 357, 358, 359, 360, 362, 366, 367, 372, 374, 375, 376, 378, 379, 380, 386, 387, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 439, 440, 442, 443, 444, 445, 455, 462, 473, 475, 500, 502, 509, 511, 512, 557, 559, 560, 562, 578, 587, 597, 600, 601, 604, 606, 611, 614, 615, 617, 628], "base": [0, 55, 80, 303, 309, 312, 317, 318, 329, 376, 379, 393, 415, 431, 473, 475, 507, 552, 626, 629], "inherit": [0, 304, 362, 552, 629], "must": [0, 43, 55, 56, 61, 74, 80, 87, 121, 159, 166, 287, 305, 357, 379, 393, 408, 423, 424, 431, 438, 446, 552, 559, 560, 562, 578, 628, 629, 630, 631], "dataclass": [0, 303, 305, 507, 552, 605, 629], "decor": [0, 304, 313, 362, 552], "flatten_dict": [0, 598], "separ": [0, 12, 46, 50, 102, 108, 127, 380, 435, 598, 627, 628, 633], "_": [0, 130, 174, 180, 598, 628, 631], "inner": [0, 598], "append": [0, 393, 598], "outer": [0, 598], "recursive_upd": [0, 615], "replac": [0, 372, 380, 413, 423, 615], "wherev": [0, 615, 633], "nest": [0, 395, 396, 400, 433, 563, 615, 628], "won": [0, 464, 470, 473, 611, 615, 631], "recurs": [0, 308, 615], "recursivenamespac": [0, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577], "simplenamespac": [0, 563], "is_list_of": [0, 610], "val": [0, 608, 609, 610], "typ": [0, 608, 610], "typeguard": [0, 608, 609, 610], "guard": [0, 608, 609, 610], "check": [0, 61, 78, 403, 431, 587, 608, 609, 610, 611], "is_2d_list_of": [0, 608], "is_callable_list": [0, 609], "random_entity_nam": [0, 614], "exclud": [0, 61, 92, 393, 601, 606, 614, 628], "random": [0, 410, 423, 431, 437, 557, 560, 562, 614, 630], "entiti": [0, 614], "funcs_from_arg": [0, 599], "take": [0, 380, 390, 393, 396, 410, 415, 422, 429, 430, 437, 446, 599, 629, 630, 631], "partial": [0, 56, 289, 599, 624], "applic": [0, 102, 112, 380, 437, 599], "onto": [0, 424, 599], "imgsuffix": [0, 554], "liter": [0, 161, 554], "imag": [0, 554, 623], "suffix": [0, 342, 393, 554], "class": [1, 7, 12, 19, 21, 22, 23, 27, 34, 43, 46, 61, 68, 97, 102, 139, 142, 148, 155, 157, 174, 281, 283, 285, 289, 296, 297, 298, 303, 304, 305, 318, 343, 344, 361, 362, 379, 380, 381, 384, 423, 440, 446, 451, 464, 474, 477, 507, 513, 552, 557, 563, 578, 580, 589, 590, 594, 601, 602, 630, 631, 632], "configur": [1, 6, 10, 23, 34, 44, 61, 70, 79, 85, 86, 88, 96, 128, 159, 287, 349, 351, 355, 369, 377, 378, 380, 401, 404, 420, 464, 470, 473, 500, 511, 512, 552, 553, 623, 626, 628, 630, 631, 632], "dask": [1, 7, 8, 11, 12, 16, 17, 18, 23, 27, 310, 343, 379, 380, 388, 389, 390, 393, 396, 402, 413, 415, 418, 419, 423, 427, 431, 438, 440, 441, 443, 446, 451, 464, 471, 473, 475, 504, 505, 506, 511, 623, 627, 630, 633], "cluster_config": [1, 3, 6, 23, 25, 629, 630], "workers_per_job": [1, 3, 6, 23, 25, 464, 466, 472, 512], "cores_per_work": [1, 3, 6, 23, 25, 464, 466, 468, 512, 630], "omp_parallel": [1, 3, 6, 23, 25, 464, 466, 470, 512], "exclusive_job": [1, 3, 6, 23, 25, 464, 466, 469, 512], "queu": [1, 3, 6, 23, 25, 464, 466, 471, 512], "spawn": [1, 11, 23, 464, 472], "create_report": [1, 3, 8, 23, 25], "5": [1, 3, 23, 25, 34, 36, 40, 43, 130, 174, 280, 629, 630], "runtime_reduct": [1, 3, 23, 25, 34, 36, 40, 43], "warmup": [1, 3, 23, 25, 34, 36, 45, 629], "addit": [1, 23, 34, 45, 80, 311, 360, 390, 393, 396, 397, 410, 415, 437, 473, 626, 630], "whose": [1, 23, 34, 43, 45, 80, 343, 346, 629, 631], "discard": [1, 23, 34, 45, 629], "impl": [1, 3, 23, 25, 28, 34, 36, 39, 55, 56, 360, 624, 628, 629, 630], "setup": [1, 10, 23, 34, 44, 380, 422, 423, 440, 625, 629, 630], "call": [1, 10, 19, 20, 23, 34, 44, 305, 380, 386, 387, 390, 396, 402, 410, 415, 418, 419, 422, 429, 433, 437, 438, 440, 443, 446, 473, 482, 503, 578, 580, 631, 633], "onc": [1, 10, 23, 34, 44, 304, 362, 380, 402, 437], "befor": [1, 10, 23, 34, 44, 323, 380, 402, 443, 473], "cleanup": [1, 5, 23, 34, 38], "after": [1, 5, 23, 34, 38, 106, 108, 303, 380, 387, 388, 389, 402, 425, 431, 443, 482, 507, 622, 628, 629, 630], "abstract": [1, 7, 19, 20, 22, 23, 27, 34, 41, 61, 139, 141, 142, 155, 156, 157, 296, 298, 318, 589, 594, 629], "construct_output": [1, 7, 23, 27], "daskcollect": [1, 7, 23, 27], "comput": [1, 7, 12, 14, 23, 27, 34, 43, 46, 48, 50, 55, 376, 379, 380, 385, 390, 396, 402, 410, 413, 415, 419, 420, 429, 437, 618, 619, 620, 624, 629], "dtype": [1, 3, 23, 25, 34, 36, 43, 379], "out": [1, 23, 34, 43, 395, 401, 404, 425, 431, 629], "arithmet": [1, 23, 34, 43], "mean": [1, 23, 34, 43, 372, 375, 379, 611, 630], "ignor": [1, 23, 34, 43, 85, 304, 310, 362, 402, 429], "load_input": [1, 7, 23, 27, 31, 34, 41], "input": [1, 12, 23, 25, 29, 30, 31, 34, 41, 43, 46, 52, 53, 54, 55, 60, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 361, 369, 370, 375, 379, 390, 395, 410, 415, 422, 429, 431, 607, 624, 627, 628, 629, 632], "classmethod": [1, 19, 22, 23, 34, 61, 139, 142, 155, 157, 159, 169, 173, 174, 182, 183, 184, 185, 296, 298, 343, 346, 380, 391, 464, 473, 477, 478, 484, 552, 553, 578, 580, 589, 594], "list_config": [1, 23, 34, 159, 464, 552, 553, 628, 629, 630], "kwarg": [1, 23, 34, 75, 76, 77, 102, 104, 159, 304, 311, 362, 372, 379, 380, 381, 389, 390, 396, 397, 399, 405, 407, 410, 411, 412, 414, 415, 419, 420, 423, 424, 427, 429, 430, 432, 435, 437, 439, 440, 442, 444, 446, 451, 456, 464, 473, 475, 503, 513, 530, 552, 553, 557, 558, 563, 569, 573], "euclidean": [1, 23, 34, 159, 464, 552, 553], "between": [1, 23, 34, 96, 97, 159, 289, 357, 380, 390, 396, 410, 415, 420, 437, 464, 473, 513, 552, 553, 628, 629], "initi": [1, 3, 12, 14, 23, 25, 34, 36, 46, 48, 61, 68, 128, 159, 161, 168, 174, 181, 305, 318, 323, 343, 346, 380, 381, 446, 449, 454, 464, 466, 473, 474, 478, 479, 557, 558, 563, 569, 578, 579, 589, 593, 628, 630], "self": [1, 2, 3, 4, 12, 13, 14, 15, 19, 20, 23, 24, 25, 26, 34, 35, 36, 37, 46, 47, 48, 49, 61, 68, 102, 103, 105, 130, 139, 140, 155, 156, 159, 160, 161, 162, 163, 174, 181, 318, 319, 320, 321, 322, 324, 325, 326, 380, 381, 382, 384, 423, 440, 446, 447, 448, 449, 450, 464, 465, 466, 467, 473, 474, 478, 479, 480, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 578, 579, 581, 583, 584, 589, 591, 593], "see": [1, 3, 12, 14, 23, 25, 34, 36, 46, 48, 61, 68, 102, 104, 159, 161, 174, 181, 360, 381, 393, 421, 442, 446, 449, 451, 464, 466, 473, 474, 478, 479, 513, 530, 557, 558, 563, 569, 573, 578, 579, 589, 593, 628, 630, 631], "help": [1, 3, 12, 14, 23, 25, 34, 36, 46, 48, 61, 68, 102, 104, 159, 161, 174, 181, 380, 381, 424, 446, 449, 464, 466, 473, 474, 478, 479, 513, 530, 557, 558, 563, 569, 573, 578, 579, 589, 593], "accur": [1, 3, 12, 14, 23, 25, 34, 36, 46, 48, 61, 68, 102, 104, 159, 161, 174, 181, 380, 381, 411, 446, 449, 464, 466, 473, 474, 478, 479, 513, 530, 557, 558, 563, 569, 573, 578, 579, 589, 593], "__repr__": [1, 4, 12, 15, 23, 26, 34, 37, 46, 49, 159, 163, 303, 318, 327, 380, 382, 446, 450, 464, 467, 473, 478, 480, 507, 513, 534, 563, 575, 578, 583], "repr": [1, 4, 12, 15, 23, 26, 34, 37, 46, 49, 159, 163, 303, 305, 380, 382, 446, 450, 464, 467, 473, 478, 480, 507, 513, 534, 563, 575, 578, 583], "__eq__": [1, 2, 12, 13, 23, 24, 34, 35, 46, 47, 61, 139, 140, 159, 160, 318, 319, 446, 447, 464, 465, 473, 513, 518, 563, 565], "numpi": [3, 25, 36, 43, 310, 357, 374, 379, 618, 620], "float64": [3, 25, 36, 43, 379, 618, 620], "function": [3, 19, 20, 25, 36, 54, 55, 158, 174, 281, 283, 287, 293, 303, 304, 305, 311, 313, 359, 360, 361, 362, 364, 379, 380, 390, 402, 405, 410, 411, 412, 414, 418, 420, 422, 423, 424, 427, 429, 430, 431, 432, 437, 438, 442, 444, 446, 504, 507, 556, 578, 599, 604, 611, 617, 624, 628, 629, 630, 631], "nanmean": [3, 25, 36, 43], "graph_construct": [12, 14, 16], "graph": [12, 16, 17, 18, 380, 389, 390, 396, 410, 413, 415], "optim": [12, 14, 17, 380, 389, 390, 415], "experi": [12, 34, 46, 51, 158, 360, 361, 363, 369, 370, 377, 378, 623, 626, 628, 632, 633], "input_load": [12, 14, 46, 48, 52, 629], "unmeasur": [12, 46, 50], "final": [12, 46, 50, 589], "includ": [12, 43, 46, 50, 86, 305, 342, 380, 402, 410, 413, 423, 625, 628, 629], "well": [12, 46, 50, 420, 578, 625, 630], "cannot": [12, 46, 50, 84, 85, 287, 622], "defaultoper": [19, 20, 21, 22, 629, 630], "__call__": [19, 20], "kwd": [19, 20, 578, 580], "__subclasshook__": [19, 22, 61, 139, 142, 155, 157, 296, 298, 589, 594], "overrid": [19, 22, 61, 80, 109, 110, 139, 142, 155, 157, 296, 298, 589, 594, 633], "issubclass": [19, 22, 61, 139, 142, 155, 157, 296, 298, 578, 589, 594], "bound": [19, 21, 61, 139, 174, 283, 296, 297, 578, 579, 589, 590], "_callablegenericalia": [19, 21], "method": [21, 43, 95, 106, 170, 283, 297, 303, 313, 384, 394, 402, 420, 423, 424, 426, 429, 440, 482, 507, 561, 580, 590], "invok": [22, 142, 157, 298, 594], "earli": [22, 142, 157, 298, 594], "abcmeta": [22, 142, 157, 298, 594], "__subclasscheck__": [22, 142, 157, 298, 594], "It": [22, 128, 142, 157, 287, 298, 305, 380, 402, 413, 420, 422, 423, 424, 580, 594, 622, 623, 629, 630, 631], "notimpl": [22, 142, 157, 298, 594], "normal": [22, 142, 157, 298, 323, 360, 380, 390, 410, 413, 420, 594, 633], "algorithm": [22, 142, 157, 298, 420, 594], "otherwis": [22, 43, 61, 83, 142, 157, 298, 305, 360, 380, 390, 391, 393, 396, 410, 425, 437, 454, 586, 594, 617, 627, 628], "outcom": [22, 142, 157, 298, 594], "cach": [22, 142, 157, 298, 310, 594], "store_output": [23, 25, 33, 629], "zarr": [23, 33, 148, 152, 317, 629, 631], "input_obj": [23, 25, 29, 629, 630], "input_vers": [23, 25, 30, 629, 630], "data": [25, 43, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 350, 355, 356, 358, 360, 369, 370, 379, 380, 386, 395, 396, 402, 405, 418, 420, 424, 431, 433, 444, 626, 628, 629, 630, 631, 633], "util": [34, 158, 159, 287, 380, 446, 464, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 629], "keepdim": 43, "averag": [43, 385, 629, 630], "element": [43, 130, 376, 379, 431, 586, 597], "taken": [43, 87, 380, 411, 421], "over": [43, 170, 380, 385, 393, 410, 425], "intermedi": 43, "integ": [43, 446, 513], "slice": [43, 630], "runtimewarn": 43, "8": [43, 130, 174, 280, 412, 414], "array_lik": 43, "desir": [43, 387, 402, 473], "convers": 43, "attempt": [43, 106], "option": [43, 53, 55, 61, 64, 65, 74, 75, 76, 77, 78, 80, 81, 86, 87, 90, 93, 97, 98, 99, 100, 101, 131, 161, 287, 359, 360, 372, 374, 375, 376, 379, 380, 386, 390, 396, 397, 398, 400, 402, 403, 405, 410, 411, 412, 414, 415, 417, 420, 423, 424, 425, 427, 429, 430, 431, 432, 437, 442, 443, 444, 455, 473, 474, 513, 559, 560, 562, 600, 606, 611, 614, 627, 628, 630, 633], "inexact": 43, "altern": [43, 402, 419, 423, 622, 625, 627, 633], "place": [43, 313, 442, 623], "have": [43, 127, 287, 357, 359, 360, 376, 387, 393, 402, 410, 423, 426, 431, 557, 622, 625, 629, 630, 631], "shape": [43, 357, 374, 376], "expect": [43, 631], "cast": 43, "necessari": [43, 628], "ufunc": 43, "detail": [43, 390, 396, 410, 415, 420, 426, 437, 473, 578, 630], "broadcast": [43, 357, 380, 424, 431], "correctli": 43, "against": [43, 413, 420], "anyth": [43, 578], "through": [43, 473, 623, 630], "sum": 43, "sub": 43, "doe": [43, 61, 78, 95, 111, 131, 323, 400, 402, 424, 425, 426, 482, 557, 580, 622], "22": [43, 130], "m": [43, 402, 410, 437], "refer": [43, 360, 419, 420, 438, 578, 627], "onli": [43, 74, 112, 303, 305, 310, 360, 376, 379, 380, 393, 426, 434, 464, 470, 482, 507, 557, 578, 625, 629, 630, 631], "abov": [43, 446, 622, 629], "weight": 43, "var": [43, 61, 74, 75, 76, 77, 80, 130], "nanvar": 43, "note": [43, 96, 379, 402, 408, 434, 557, 578], "non": [43, 112, 304, 313, 362, 379], "divid": 43, "point": [43, 478, 489], "precis": 43, "depend": [43, 380, 387, 410, 415, 420, 446, 473, 503, 511, 622], "caus": [43, 380, 384, 423, 440], "inaccur": 43, "especi": [43, 630], "float32": 43, "higher": [43, 390, 396, 410, 415, 437], "accumul": 43, "allevi": 43, "issu": 43, "exampl": [43, 130, 313, 380, 386, 390, 392, 395, 396, 400, 402, 403, 405, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 423, 424, 426, 427, 429, 430, 431, 432, 433, 437, 438, 439, 440, 442, 444, 445, 451, 462, 473, 502, 557, 559, 560, 562, 578, 628, 629, 630, 631], "np": [43, 357, 359, 374, 375, 376, 379, 410, 437], "2": [43, 121, 130, 174, 280, 304, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 362, 380, 390, 395, 396, 405, 410, 411, 415, 417, 423, 424, 431, 437, 440, 444, 557, 560, 625, 630], "6666666666666665": 43, "mai": [43, 80, 85, 303, 308, 390, 393, 396, 402, 410, 411, 415, 419, 423, 425, 426, 427, 434, 437, 507, 513, 580], "vari": 43, "brn": [53, 54, 55, 56, 57, 58, 59, 60, 618, 628, 629], "rep": [53, 55, 624], "blockwis": [53, 60, 379, 624], "thetav": [53, 59, 60, 620], "wrapper": [53, 60, 380, 394, 624], "zebra": [53, 60, 464, 470, 618, 619, 620, 622, 624], "xr": [53, 55, 158, 287, 289, 299, 358, 359, 360, 372, 379, 628, 630], "repeat": [53, 55, 56, 578, 624, 629], "execut": [53, 379, 380, 410, 415, 426, 438, 473, 626, 629], "get_brn_input": [54, 624, 628, 629], "get_repeated_brn": [55, 56, 624], "brn_blocked_cpp": 55, "previou": [55, 415, 445, 624, 628], "next": [55, 102, 105, 473, 497, 624], "get_repeated_brn_nam": [56, 624], "functool": 56, "list_brn_implement": [57, 624, 628], "avail": [57, 58, 59, 158, 291, 343, 347, 380, 407, 412, 414, 419, 464, 468, 470, 623, 624, 630, 633], "abail": [57, 58], "list_implement": [58, 624], "list_thetav_implement": [59, 624], "configpars": [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 128, 627], "rawconfigpars": [61, 70, 93], "interpol": [61, 68, 74, 80, 93, 97], "section": [61, 70, 74, 75, 76, 77, 78, 79, 80, 81, 84, 86, 90, 91, 92, 93, 97, 98, 99, 100, 101, 473, 627], "extend": [61, 70, 93, 580], "valid": [61, 70, 93, 304, 362], "syntax": [61, 93, 97, 473], "add_sect": [61, 70], "has_sect": [61, 79], "read": [61, 85, 86, 87, 88, 102, 112, 117, 118, 119, 120, 131, 393, 630], "filenam": [61, 85, 89, 308, 380, 393, 402, 418, 442], "encod": [61, 85, 102, 109, 110, 159, 181, 286], "pars": [61, 85, 130, 323], "read_fil": [61, 87, 89], "sourc": [61, 86, 87, 88, 130, 158, 287, 293, 294, 630, 631], "like": [61, 87, 102, 139, 144, 145, 380, 388, 390, 393, 402, 410, 413, 415, 418, 437, 473, 589, 630], "read_str": [61, 88], "read_dict": [61, 86], "readfp": [61, 89], "fp": [61, 89, 96], "deprec": [61, 89, 170, 304, 316, 362, 364, 473, 557, 559, 560, 561, 562, 627], "instead": [61, 89, 310, 360, 364, 400, 429, 464, 470, 473, 557, 560, 561, 622, 625, 627, 629, 630, 631, 633], "raw": [61, 74, 75, 76, 77, 80, 360, 554, 628, 630], "getint": [61, 77], "getfloat": [61, 76], "getboolean": [61, 75], "item": [61, 71, 80, 95, 139, 144, 159, 168, 318, 336, 337, 338, 455], "popitem": [61, 84], "parser": [61, 84, 97, 98, 99, 100, 101], "section_nam": [61, 84], "section_proxi": [61, 84], "keyerror": [61, 83, 84, 380, 397, 400], "optionxform": [61, 82], "optionstr": [61, 82], "has_opt": [61, 78], "empti": [61, 78, 117, 119, 304, 362, 379, 390, 393, 396, 410, 412, 414, 415, 437, 614], "write": [61, 96, 102, 112, 126, 127, 380, 393, 445, 478, 486, 630], "space_around_delimit": [61, 96], "represent": [61, 96, 168, 169, 173, 174, 183, 185, 281, 283, 316, 323, 327, 328, 628], "state": [61, 96, 108, 318, 327, 380, 390, 393, 396, 410, 415, 423, 425, 426, 437, 440, 563, 574, 630], "remove_opt": [61, 90], "remove_sect": [61, 91], "pop": [61, 83], "v": [61, 83, 95, 174, 180, 612], "found": [61, 74, 83, 627, 630, 633], "k": [61, 83, 94, 95, 138, 139, 143, 631], "lack": [61, 95], "In": [61, 95, 313, 380, 557, 626, 628, 630, 631, 633], "case": [61, 95, 304, 308, 362, 380, 390, 396, 410, 415, 437, 630], "setdefault": [61, 94], "also": [61, 85, 94, 289, 422, 473, 557, 578, 625, 626, 628, 629, 630, 631, 633], "view": [61, 139, 144, 145, 146], "sectcr": [61, 66], "re": [61, 63, 64, 65, 66, 174, 280, 421, 429, 431, 473, 559, 560, 562, 622], "compil": [61, 63, 64, 65, 66, 174, 280, 625], "p": [61, 64, 65, 66, 174, 180, 473, 478, 487, 554, 631, 633], "header": [61, 66, 473], "veri": [61, 64, 65, 66, 410], "permiss": [61, 64, 65, 66], "optcr": [61, 64], "vi": [61, 64, 65], "space": [61, 64, 65, 96], "tab": [61, 64, 65], "optcre_nv": [61, 65], "nonspacecr": [61, 63], "boolean_st": [61, 62], "off": [61, 62, 174, 280, 415, 622], "ye": [61, 62, 174, 280], "genericalia": [61, 139, 296, 297, 589, 590], "dict_typ": [61, 68], "__getitem__": [61, 67, 139, 141], "__setitem__": [61, 69], "convert": [61, 68, 72, 86, 159, 169, 173, 376, 380, 389], "allow_no_valu": 68, "delimit": [68, 96], "comment_prefix": 68, "inline_comment_prefix": 68, "strict": [68, 130], "empty_lines_in_valu": 68, "default_sect": 68, "fallback": [74, 75, 76, 77], "look": [74, 390, 393, 423, 629, 630, 631], "defaultsect": 74, "enabl": [74, 97, 130, 132, 550, 559, 560, 562], "expand": [74, 80, 130], "special": [74, 80, 170, 308, 629, 630], "acknowledg": 79, "constructor": [80, 423, 440, 629, 630, 631], "unless": [80, 560], "substitut": [80, 627], "pre": [80, 318, 329, 334, 340, 342], "never": 84, "silent": 85, "design": [85, 623, 630], "so": [85, 120, 127, 393, 442, 473, 625], "you": [85, 304, 362, 380, 386, 388, 402, 419, 423, 424, 426, 427, 431, 433, 440, 446, 473, 557, 622, 625, 627, 630, 631, 633], "potenti": [85, 620], "user": [85, 130, 380, 393, 418, 629, 630], "systemwid": 85, "successfulli": 85, "preserv": [86, 96], "held": [86, 380, 405], "dure": [86, 130, 159, 168], "second": [86, 87, 302, 318, 338, 388, 426, 431, 443, 445, 473, 513, 544, 545, 548, 549, 627, 630], "time": [87, 380, 388, 390, 396, 402, 408, 410, 415, 418, 425, 431, 432, 437, 443, 509, 628, 629, 631], "surround": 96, "pleas": [96, 557], "comment": 96, "back": [96, 393, 402, 425, 429, 431], "extendedinterpol": [97, 98, 99, 100, 101], "advanc": 97, "variant": 97, "zc": 97, "buildout": 97, "before_get": [97, 98], "before_set": [97, 100], "before_read": [97, 99], "before_writ": [97, 101], "stringio": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], "_io": 102, "_textiobas": 102, "buffer": [102, 108, 112], "initial_valu": 102, "newlin": [102, 116, 119], "textiowrapp": 102, "__next__": [102, 105], "__iter__": [102, 103, 139], "io": [102, 106, 111, 118, 122, 125, 421], "getvalu": [102, 113], "retriev": [102, 113, 380, 397, 398, 401, 404, 628, 632], "entir": [102, 113, 380, 393, 420, 424, 431], "most": [102, 117, 410, 629], "readlin": [102, 119, 120], "until": [102, 117, 119, 424, 429, 478, 485, 557], "eof": [102, 117, 119], "tell": [102, 123, 124], "truncat": [102, 124], "po": [102, 121, 124], "seek": [102, 121, 122], "whenc": [102, 121], "stream": [102, 109, 112, 114, 120, 121, 127, 174, 181, 380, 402], "seekabl": [102, 122], "readabl": [102, 118, 628], "writabl": [102, 125], "written": [102, 125, 126, 393, 622], "detach": [102, 108], "underli": [102, 108, 111, 390, 415], "textiobas": [102, 108], "flush": [102, 112], "fileno": [102, 111], "descriptor": [102, 111], "isatti": [102, 114], "interact": [102, 114], "writelin": [102, 127], "line_buff": [102, 115], "decod": [102, 110], "further": 106, "valueerror": [106, 380, 391, 403, 437], "effect": [106, 423, 429, 626, 629], "been": [108, 423, 454], "textio": 108, "unus": 108, "subclass": [109, 110, 578, 580, 629], "oserror": 111, "block": [112, 380, 424, 429, 443, 589], "determin": [114, 303, 376, 379, 431, 507], "neg": [117, 513], "omit": [117, 304, 362, 631], "reach": 117, "hit": 119, "immedi": [119, 419, 422, 429], "control": [120, 379, 393, 423, 425, 629, 630], "byte": [120, 174, 283, 313, 380, 411, 578], "far": 120, "exce": 120, "offset": 121, "end": [121, 127, 388, 559, 560, 562, 589], "unchang": 124, "length": [126, 304, 362, 374, 401, 404, 410, 559, 560, 562], "usual": [127, 360], "librari": [128, 304, 362, 429, 622, 623, 626, 627], "import": [128, 130, 390, 392, 393, 395, 396, 402, 408, 438, 442, 473, 628, 629, 630, 631], "toggl": [129, 132, 464, 469, 470, 550, 627], "vars_": 130, "nounset": 130, "selenium_jar_path": 130, "usr": [130, 630], "share": [130, 445, 473], "java": 130, "selenium": 130, "server": [130, 380, 418, 478, 485], "jar": 130, "goroot_1_17_x64": 130, "opt": 130, "hostedtoolcach": 130, "go": [130, 630], "17": 130, "13": [130, 304, 362], "x64": 130, "conda": [130, 622], "miniconda3": 130, "github_workspac": 130, "java_home_11_x64": 130, "lib": 130, "jvm": 130, "temurin": 130, "11": 130, "jdk": 130, "amd64": 130, "conda_ex": 130, "bin": [130, 630], "_ce_m": 130, "pkg_config_path": 130, "python": [130, 159, 169, 173, 318, 388, 390, 442, 473, 622, 623, 627, 628, 629, 630], "10": [130, 380, 413, 451, 462, 473, 502, 625, 629, 631], "pkgconfig": 130, "github_path": 130, "_temp": 130, "_runner_file_command": 130, "add_path_38a94502": 130, "9367": 130, "472b": 130, "9649": 130, "38a754a21132": 130, "github_act": 130, "__run": 130, "java_hom": 130, "github_run_numb": 130, "runner_nam": 130, "agent": 130, "gradle_hom": 130, "gradl": 130, "github_repository_owner_id": 130, "15251199": 130, "xdg_config_hom": 130, "python_root_dir": 130, "dotnet_skip_first_time_experi": 130, "ant_hom": 130, "ant": 130, "java_home_8_x64": 130, "github_triggering_actor": 130, "tierrimin": 130, "pythonloc": 130, "github_ref_typ": 130, "branch": 130, "homebrew_cleanup_periodic_full_dai": 130, "3650": 130, "android_ndk": 130, "local": [130, 318, 335, 380, 384, 388, 391, 393, 425, 426, 431, 442, 473, 478, 489, 625, 627, 633], "android": 130, "sdk": 130, "ndk": 130, "25": 130, "9519653": 130, "bootstrap_haskell_noninteract": 130, "pwd": [130, 622], "pipx_bin_dir": 130, "pipx_bin": 130, "gsettings_schema_dir": 130, "env": [130, 622, 630], "glib": 130, "schema": 130, "conda_prefix": 130, "github_repository_id": 130, "545522204": 130, "deployment_basepath": 130, "android_ndk_latest_hom": 130, "systemd_exec_pid": 130, "661": 130, "gsettings_schema_dir_conda_backup": 130, "github_sha": 130, "cdb5dad779fa4fc46d69bfce0f58ce89ab0df620": 130, "github_workflow_ref": 130, "meteoswiss": [130, 625, 626], "apn": [130, 625], "github": [130, 623, 625], "workflow": 130, "cd": 130, "ref": 130, "head": 130, "powershell_distribution_channel": 130, "action": [130, 304, 362], "ubuntu22": 130, "dotnet_multilevel_lookup": 130, "github_ref": 130, "runner_o": 130, "linux": 130, "github_ref_protect": 130, "input_run_post": 130, "github_api_url": 130, "http": [130, 421, 623, 625, 630], "api": [130, 399, 446], "com": [130, 625], "lang": 130, "utf": 130, "runner_tracking_id": 130, "github_800e0f31": 130, "b0c4": 130, "41ee": 130, "989e": 130, "69b5e07d36d": 130, "runner_arch": 130, "runner_temp": 130, "conda_prompt_modifi": 130, "github_st": 130, "save_state_38a94502": 130, "edgewebdriv": 130, "edge_driv": 130, "github_env": 130, "set_env_38a94502": 130, "github_event_path": 130, "_github_workflow": 130, "event": [130, 174, 199, 380, 398, 408, 410, 437, 438, 441, 446, 473, 476], "json": [130, 380, 445], "invocation_id": 130, "f3e22d4a17b64725addc1427144ac0fd": 130, "conda_pkgs_dir": 130, "github_event_nam": 130, "push": 130, "github_run_id": 130, "4244896226": 130, "java_home_17_x64": 130, "android_ndk_hom": 130, "github_step_summari": 130, "step_summary_38a94502": 130, "homebrew_no_auto_upd": 130, "github_actor": 130, "nvm_dir": 130, "nvm": 130, "sgx_aesm_addr": 130, "github_run_attempt": 130, "stats_rdcl": 130, "android_hom": 130, "github_graphql_url": 130, "graphql": 130, "accept_eula": 130, "runner_us": 130, "_ce_conda": 130, "github_server_url": 130, "conda_shlvl": 130, "pipx_hom": 130, "pipx": 130, "geckowebdriv": 130, "gecko_driv": 130, "stats_nm": 130, "chromewebdriv": 130, "chrome_driv": 130, "shlvl": 130, "android_sdk_root": 130, "vcpkg_installation_root": 130, "vcpkg": 130, "github_actor_id": 130, "11408271": 130, "runner_tool_cach": 130, "imagevers": 130, "20230217": 130, "python3_root_dir": 130, "dotnet_nologo": 130, "github_workflow_sha": 130, "github_ref_nam": 130, "graalvm_11_root": 130, "graalvm": 130, "ce": 130, "java11": 130, "conda_python_ex": 130, "github_job": 130, "build_doc": 130, "ld_library_path": 130, "xdg_runtime_dir": 130, "1001": 130, "azure_extension_dir": 130, "az": 130, "azcliextens": 130, "perflog_location_set": 130, "runner_perflog": 130, "conda_default_env": 130, "github_repositori": 130, "python2_root_dir": 130, "android_ndk_root": 130, "chrome_bin": 130, "googl": 130, "chrome": 130, "goroot_1_18_x64": 130, "github_retention_dai": 130, "90": 130, "journal_stream": 130, "16910": 130, "runner_workspac": 130, "lein_hom": 130, "lein": 130, "xdg_data_dir": 130, "snapd": 130, "desktop": 130, "lein_jar": 130, "instal": [130, 429, 633], "leiningen": 130, "standalon": 130, "github_action_repositori": 130, "condabin": 130, "cargo": 130, "compos": 130, "vendor": 130, "ghcup": 130, "dotnet": 130, "tool": [130, 622], "snap": 130, "sbin": 130, "game": 130, "perflog": 130, "github_base_ref": 130, "ghcup_install_base_prefix": 130, "ci": 130, "swift_path": 130, "swift": 130, "imageo": 130, "github_repository_own": 130, "github_head_ref": 130, "github_action_ref": 130, "conda_prefix_1": 130, "goroot_1_19_x64": 130, "19": 130, "github_workflow": 130, "continu": [130, 380, 443], "deliveri": 130, "debian_frontend": 130, "noninteract": 130, "github_output": 130, "set_output_38a94502": 130, "agent_toolsdirectori": 130, "sphinx": 130, "build": [130, 380, 622, 625, 626], "docutilsconfig": 130, "doc": 130, "docutil": 130, "conf": 130, "grib_definition_path": [130, 627], "var_symbol": 130, "unix": 130, "param": 130, "similar": 130, "u": [130, 607, 612, 629, 630], "bash": [130, 343, 345, 627], "consid": [130, 390, 396, 402, 410, 415, 437, 631], "expans": 130, "identifi": [130, 299, 305, 360, 437], "usag": [130, 393, 578], "expandvar": 130, "some_undefined_path": 130, "Or": [130, 386], "somefil": 130, "read_config": 131, "cfg_path": 131, "noth": [131, 158, 288, 372, 580], "happen": [131, 158, 288, 360, 372], "set_debug_mod": [132, 550], "dbg": [132, 550], "disabl": [132, 424, 431, 464, 471, 550, 627, 629, 630], "log": [132, 133, 380, 393, 398, 401, 404, 408, 438, 446, 455, 456, 473, 550, 551, 627], "level": [132, 133, 433, 473, 550, 551, 627], "warn": [132, 304, 362, 393, 550], "set_log_level": [133, 551], "overwrit": [133, 551, 627], "constant": [134, 135, 136, 137, 138], "p0": 134, "100000": 134, "surfac": 134, "pressur": [134, 135], "pc_cp_d": 135, "1005": 135, "heat": 135, "capac": 135, "air": [135, 137], "pc_g": 136, "9": [136, 174, 280], "80665": 136, "gravit": 136, "acceler": 136, "pc_r_d": 137, "287": 137, "05": 137, "ga": [137, 138], "pc_r_v": 138, "461": 138, "51": 138, "water": 138, "vapour": 138, "j": [138, 473], "kg": 138, "gener": [139, 288, 360, 380, 420, 421, 424, 429, 473, 557, 560, 578, 614, 630, 631], "associ": [139, 473], "pair": [139, 431], "concret": [139, 390, 396, 437, 629], "__len__": 139, "els": [139, 143, 446, 513, 516, 578], "union": [147, 161], "netcdf": [148, 151, 312, 628, 630, 631], "fake": [148, 149, 630], "member": [153, 154], "__hash__": [155, 156, 303, 318, 322, 446, 448, 473, 507, 513, 523], "hash": [155, 156, 305, 318, 322, 431, 437, 446, 448, 473, 513, 523], "manag": [158, 343, 380, 384, 391, 402, 424, 431, 446, 455, 630, 632, 633], "yamlobject": [158, 159, 174, 283], "add_vers": [158, 288, 631], "add": [158, 288, 289, 358, 380, 390, 395, 396, 437, 473, 630, 631], "has_vers": [158, 290], "list_vers": [158, 291, 628, 631], "source_vers": [158, 287, 294, 630], "yaml_tag": [159, 286], "tag": [159, 174, 176, 177, 178, 179, 181, 182, 184, 234, 252, 258, 259, 264, 280, 286], "NOT": [159, 167, 286], "modifi": [159, 167, 286], "finch_vers": [159, 167], "1a8": [159, 167], "dim_ord": [159, 161, 166, 630, 631], "across": [159, 166, 385], "coord": [159, 161, 165, 630, 631], "short": [159, 164], "yaml_load": [159, 285], "loader": [159, 169, 285, 393], "fullload": [159, 285], "unsafeload": [159, 285], "yaml_flow_styl": [159, 284], "__le__": [159, 162, 318, 324, 513, 524, 563, 570], "less": [159, 162, 376, 393, 513, 545, 548, 560, 631], "relev": [159, 162, 376, 380, 386], "futur": [159, 162, 380, 384, 386, 387, 390, 394, 395, 396, 399, 410, 413, 415, 419, 420, 422, 423, 424, 425, 428, 431, 437, 444, 473], "access": [159, 162, 387, 393, 400, 423, 424, 631], "impos": [159, 171], "get_all_chunk": [159, 170], "from_yaml": [159, 169], "to_yaml": [159, 173, 174, 283], "dumper": [159, 173, 174], "yaml_dump": [159, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "emitt": [159, 174], "factori": 161, "sinc": [170, 316, 364, 622], "1a4": 170, "filter": [170, 304, 310, 362, 557, 559], "doesn": [170, 393, 562, 617], "default_styl": [174, 181], "yaml_represent": [174, 283], "nonetyp": [174, 283], "saferepresent": [174, 283], "represent_non": [174, 255, 283], "represent_str": [174, 261, 283], "represent_binari": [174, 242, 283], "represent_bool": [174, 243, 283], "represent_int": [174, 250, 283], "represent_float": [174, 249, 283], "represent_list": [174, 251, 283], "represent_tupl": [174, 262, 283], "represent_dict": [174, 248, 283], "represent_set": [174, 260, 283], "datetim": [174, 283, 513, 544, 546, 547], "date": [174, 283, 446], "represent_d": [174, 246, 283], "represent_datetim": [174, 247, 283], "represent_undefin": [174, 263, 283], "complex": [174, 283], "represent_complex": [174, 244, 283], "ordereddict": [174, 283], "represent_ordered_dict": [174, 257, 283], "represent_nam": [174, 254, 281, 283], "builtin_function_or_method": [174, 283], "represent_modul": [174, 253, 283], "default_tag_prefix": [174, 179], "org": [174, 176, 177, 178, 179, 280, 623], "2002": [174, 176, 177, 178, 179, 280], "escape_replac": [174, 180], "x00": [174, 180], "x07": [174, 180], "x08": [174, 180], "b": [174, 180, 340, 380, 433, 437, 613, 622], "x0b": [174, 180], "x0c": [174, 180], "r": [174, 180, 557, 559, 560, 562], "x1b": [174, 180], "x85": [174, 180], "xa0": [174, 180], "u2028": [174, 180], "l": [174, 180, 402, 410, 442], "u2029": [174, 180], "anchor_templ": [174, 175], "id": [174, 175, 432], "03d": [174, 175], "yaml_multi_represent": [174, 281], "represent_object": [174, 256, 281], "inf_valu": [174, 229], "inf": [174, 229], "yaml_implicit_resolv": [174, 280], "null": [174, 280], "9_": [174, 280], "ee": [174, 280], "0b": [174, 280], "1_": [174, 280], "7_": [174, 280], "0x": [174, 280], "9a": [174, 280], "fa": [174, 280], "f_": [174, 280], "timestamp": [174, 280, 438], "tt": [174, 280], "6": [174, 280, 390], "7": [174, 280], "No": [174, 280, 631], "NO": [174, 280], "On": [174, 280, 393], "ON": [174, 280], "default_scalar_tag": [174, 177], "default_sequence_tag": [174, 178], "seq": [174, 178, 442], "default_mapping_tag": [174, 176], "yaml_path_resolv": [174, 282], "dispos": [174, 198], "emit": [174, 199, 473], "need_more_ev": [174, 231], "need_ev": [174, 230], "increase_ind": [174, 228], "flow": [174, 228], "indentless": [174, 228], "expect_stream_start": [174, 224], "expect_noth": [174, 222], "expect_first_document_start": [174, 212], "expect_document_start": [174, 209], "first": [174, 182, 202, 206, 209, 302, 318, 336, 360, 367, 374, 376, 379, 401, 404, 424, 431, 625, 632], "expect_document_end": [174, 207], "expect_document_root": [174, 208], "expect_nod": [174, 221], "sequenc": [174, 221, 259, 380, 390, 403, 410, 415], "expect_alia": [174, 200], "expect_scalar": [174, 223], "expect_flow_sequ": [174, 219], "expect_first_flow_sequence_item": [174, 214], "expect_flow_sequence_item": [174, 220], "expect_flow_map": [174, 215], "expect_first_flow_mapping_kei": [174, 213], "expect_flow_mapping_kei": [174, 216], "expect_flow_mapping_simple_valu": [174, 217], "expect_flow_mapping_valu": [174, 218], "expect_block_sequ": [174, 205], "expect_first_block_sequence_item": [174, 211], "expect_block_sequence_item": [174, 206], "expect_block_map": [174, 201], "expect_first_block_mapping_kei": [174, 210], "expect_block_mapping_kei": [174, 202], "expect_block_mapping_simple_valu": [174, 203], "expect_block_mapping_valu": [174, 204], "check_empty_sequ": [174, 191], "check_empty_map": [174, 190], "check_empty_docu": [174, 189], "check_simple_kei": [174, 193], "process_anchor": [174, 238], "process_tag": [174, 240], "choose_scalar_styl": [174, 194], "process_scalar": [174, 239], "prepare_vers": [174, 237], "prepare_tag_handl": [174, 235], "handl": [174, 235, 318, 379, 423, 426, 556, 563, 604], "prepare_tag_prefix": [174, 236], "prefix": [174, 236, 410, 418, 473, 622, 627], "prepare_tag": [174, 234], "prepare_anchor": [174, 233], "anchor": [174, 233], "analyze_scalar": [174, 186], "scalar": [174, 186], "flush_stream": [174, 225], "write_stream_start": [174, 277], "write_stream_end": [174, 276], "write_ind": [174, 270, 271], "need_whitespac": [174, 271], "write_line_break": [174, 272], "write_version_direct": [174, 279], "version_text": [174, 279], "write_tag_direct": [174, 278], "handle_text": [174, 278], "prefix_text": [174, 278], "write_single_quot": [174, 275], "write_double_quot": [174, 268], "determine_block_hint": [174, 197], "write_fold": [174, 269], "write_liter": [174, 273], "write_plain": [174, 274], "anchor_nod": [174, 187], "generate_anchor": [174, 226], "serialize_nod": [174, 267], "parent": [174, 267], "index": [174, 267, 310, 316, 433, 627], "ignore_alias": [174, 227], "represent_yaml_object": [174, 264], "flow_styl": [174, 252, 259, 264], "represent_data": [174, 245], "add_represent": [174, 185], "data_typ": [174, 183, 185], "add_multi_represent": [174, 183], "represent_scalar": [174, 258], "represent_sequ": [174, 259], "represent_map": [174, 252], "add_implicit_resolv": [174, 182], "regexp": [174, 182], "add_path_resolv": [174, 184], "kind": [174, 184, 192, 265, 629], "descend_resolv": [174, 196], "current_nod": [174, 192, 196], "current_index": [174, 192, 196], "ascend_resolv": [174, 188], "check_resolver_prefix": [174, 192], "depth": [174, 192], "implicit": [174, 265], "default_flow_styl": 181, "canon": 181, "indent": [181, 271], "allow_unicod": 181, "line_break": 181, "explicit_start": 181, "explicit_end": 181, "sort_kei": 181, "simple_kei": 221, "whitespac": 271, "store_path": 287, "requir": [287, 390, 393, 396, 403, 410, 415, 437, 625, 629, 630, 631], "describ": [287, 630, 631], "field": [287, 303, 305, 507, 605, 630], "explicitli": [287, 410], "patharg": 287, "subdirectori": [287, 308], "actual": [288, 629, 630, 631], "newli": [288, 289, 358, 512], "add_if_not_exist": 289, "weak_compar": 289, "create_if_not_exist": 289, "smaller": [289, 413], "defin": [289, 303, 304, 362, 376, 390, 396, 410, 415, 437, 507, 578, 629, 632], "arrari": 299, "dim_siz": 302, "datastructur": 302, "appli": 302, "init": [303, 305, 507], "eq": [303, 507], "unsafe_hash": [303, 507], "frozen": [303, 507], "match_arg": [303, 507], "kw_onli": [303, 305, 507], "slot": [303, 507], "dunder": [303, 507], "examin": [303, 305, 507], "526": [303, 507], "__annotations__": [303, 507], "__init__": [303, 305, 423, 440, 507], "rich": [303, 507], "comparison": [303, 305, 318, 507, 606, 628], "assign": [303, 507], "instanc": [303, 318, 380, 390, 391, 396, 410, 415, 421, 423, 437, 473, 477, 507, 578, 629, 631], "__match_args__": [303, 507], "__slots__": [303, 507], "reason": [304, 362, 423, 440, 628], "line_length": [304, 362], "70": [304, 362], "insert": [304, 358, 362], "direct": [304, 362, 380, 395, 396, 431, 473, 628], "your": [304, 362, 380, 388, 392, 425, 429, 431, 473, 630, 631, 633], "docstr": [304, 362, 400, 423, 427, 440], "document": [304, 362, 380, 623, 625, 626, 627, 630, 633], "messag": [304, 310, 362, 408, 627], "featur": [304, 362, 557, 629, 630], "semant": [304, 362, 415], "max": [304, 362, 401, 404, 513, 544], "nul": [304, 362], "long": [304, 362, 393, 425, 560], "wrap": [304, 311, 362], "sever": [304, 362, 393], "miss": [304, 362], "global": [304, 362, 380, 390, 396, 415, 578], "mechan": [304, 362, 631], "categori": [304, 362, 557, 559, 560, 562], "By": [304, 362, 376, 390, 429, 431, 473, 559, 560, 562, 578, 628, 629, 631], "deprecationwarn": [304, 362], "own": [304, 362, 380, 425, 629, 630, 631], "reflect": [304, 362, 411], "_missing_typ": 305, "default_factori": 305, "metadata": [305, 380, 400, 433], "becom": 305, "glob": 308, "pathnam": 308, "root_dir": 308, "dir_fd": 308, "pattern": [308, 630], "shell": 308, "wildcard": 308, "la": 308, "fnmatch": 308, "howev": [308, 557, 625, 630, 631], "unlik": 308, "dot": 308, "zero": [308, 342, 390, 396, 410, 415, 437], "grib_dir": 309, "shortnam": 310, "key_filt": 310, "index_path": 310, "load_coord": 310, "per": [310, 390, 396, 415, 464, 468, 472, 473, 628, 630], "notmal": 310, "cfgrib": 310, "short_nam": 311, "netcdf_dir": 312, "overload": [313, 578], "func": [313, 380, 410, 424, 431, 437, 446, 473, 503], "stub": 313, "definit": [313, 578, 627, 629, 630], "def": [313, 423, 429, 430, 440, 578, 630, 631], "utf8": 313, "regular": [313, 473, 559, 560, 562], "goe": 313, "here": [313, 473], "tmp_dir": [315, 627], "tmp": [315, 627], "temporari": [315, 380, 442, 473, 478, 486, 627], "storag": [315, 393, 627], "dicitionari": 316, "1a1": [316, 364], "zarr_dir": 317, "_basevers": [318, 320, 321, 324, 325], "awar": 318, "interfac": [318, 379, 380, 423, 431, 473, 474], "v1": 318, "0a5": [318, 328], "v2": 318, "show": [318, 327], "intern": [318, 327, 380, 557, 561], "__str__": [318, 328, 513, 540], "round": [318, 328, 431], "trip": [318, 328], "epoch": [318, 331, 342], "releas": [318, 329, 332, 333, 334, 336, 337, 338, 339, 340, 342, 426, 622], "compon": [318, 342, 402], "segment": [318, 335, 340, 342], "post": [318, 329, 333, 339, 342], "dev": [318, 330], "develop": [318, 330, 332, 342, 557, 561, 623, 625], "public": [318, 329, 341, 557, 561], "portion": [318, 341], "base_vers": [318, 329], "is_prereleas": [318, 334], "is_postreleas": [318, 333], "is_devreleas": [318, 332], "unavail": [318, 336, 337, 338], "micro": [318, 337], "third": [318, 337], "__lt__": [318, 325, 513, 525, 563, 571], "__ge__": [318, 320, 513, 520, 563, 566], "__gt__": [318, 321, 513, 522, 563, 568], "__ne__": [318, 326, 513, 528, 563, 572], "invalidvers": 323, "440": 323, "dev1": [329, 330, 332, 341], "marker": 329, "post1": [333, 339], "3a1": [334, 340], "3b1": [334, 340], "3rc1": [334, 340], "3dev1": 334, "rc": [340, 628], "post0": 342, "trail": 342, "omp_thread": [343, 344, 347], "thread": [343, 347, 380, 384, 402, 412, 414, 418, 435, 464, 470, 473, 619], "openmp": [343, 347], "env_var_map": [343, 344], "omp_num_thread": [343, 344], "omp_thread_limit": [343, 344], "get_job_script_prologu": [343, 345], "command": [343, 345, 473, 622, 625, 633], "evalu": [357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 626, 632], "These": [357, 385, 419, 426, 626, 628, 629], "new_runtim": 358, "to_add": 358, "contributor": 359, "cluster_config_cores_per_work": [359, 628], "cores_dim": 359, "amin": 359, "min": [359, 513, 546], "nanmin": 360, "main_dim": [360, 371, 628], "relative_rt_dim": 360, "scaling_dim": [360, 630], "estimate_seri": [360, 630], "plot_scaling_fit": 360, "plot_scaling_baselin": 360, "runtime_select": [360, 630], "plot": [360, 365, 366, 367, 368, 380, 402, 418, 627, 630, 632], "save": [360, 402, 418, 630], "plot_dir": [360, 627, 630], "produc": [360, 629], "often": [360, 431, 630], "practic": [360, 622], "scalabl": [360, 630], "those": [360, 429, 433, 631], "fit": [360, 379, 557, 560, 562], "baselin": [360, 374], "run_config": [361, 369, 378, 629, 630], "experiment_nam": [361, 630], "analysi": [364, 630], "first_dim": 367, "priorit": [367, 390, 396, 410, 415, 437], "instruct": 372, "old": 372, "complet": [372, 402, 424, 630, 631], "neither": [372, 386, 625], "t1": 374, "n_implement": 374, "n_core_select": 374, "minim": 375, "2d": 375, "model": 375, "etax": 375, "last": [376, 432], "progressbar": 378, "custom_map_block": 379, "templat": 379, "f_in_out_typ": 379, "map_block": 379, "extract": [379, 380, 393, 601], "_type_": 379, "characterist": 379, "addition": [379, 426, 629, 630, 631], "irrelev": 379, "penalti": 379, "serv": [379, 380, 395, 396, 431, 578, 631], "still": [379, 404, 429, 578], "fulli": [379, 399, 559, 560, 562, 630], "da": [379, 630], "syncmethodmixin": [380, 446], "connect": [380, 395, 396, 402, 422, 423, 425, 431, 434, 445, 446, 511, 512], "submit": [380, 395, 399, 410, 424, 431, 437, 473], "asynchron": [380, 381, 387, 395, 396, 410, 428, 429, 430, 431, 437, 446, 449, 473, 474, 476, 503], "around": [380, 475], "resembl": 380, "executor": [380, 399, 410, 437], "concurr": [380, 399], "allow": [380, 390, 393, 396, 410, 415, 433, 437, 627, 629, 630, 631], "within": [380, 391, 400, 413, 420, 424, 589, 592, 628], "instanti": [380, 423, 445], "persist": [380, 386, 393, 413, 415, 419], "address": [380, 381, 396, 404, 405, 417, 424, 426, 427, 429, 437, 455], "localclust": 380, "background": [380, 415, 429, 430], "extra": [380, 403, 410, 473, 475], "inform": [380, 410, 412, 414, 418, 426, 427, 429, 432, 437, 440, 445, 563, 574, 578, 628, 633], "127": [380, 395, 396, 431, 432], "8786": 380, "loop": [380, 381, 409, 410, 437, 446, 449, 457, 473, 474, 476], "timeout": [380, 381, 388, 425, 426, 431, 443, 446, 452, 473, 627], "comm": 380, "set_as_default": [380, 381], "scheduler_fil": [380, 381, 445], "secur": [380, 381, 473, 474], "sign": [380, 473], "credenti": [380, 473], "automat": [380, 384, 388, 390, 393, 396, 410, 415, 421, 425, 431, 437, 473, 475, 589, 631], "async": [380, 429, 430, 473, 478, 482, 485, 489, 501], "await": [380, 429, 430, 473], "tornado": [380, 406, 409, 446, 457, 473], "gen": 380, "coroutin": [380, 403, 410, 437, 438], "remain": [380, 557, 561], "matter": 380, "relat": 380, "heartbeat_interv": [380, 381], "millisecond": [380, 513], "heartbeat": 380, "approach": 380, "deseri": [380, 381, 384, 402], "extens": [380, 381, 622], "direct_to_work": [380, 381], "ask": [380, 395, 396, 431, 473, 482, 630], "intermediari": [380, 395, 396, 431], "connection_limit": [380, 381], "maintain": 380, "pool": [380, 410, 437], "send": [380, 395, 410, 424, 431, 442], "20": [380, 413, 473, 625, 629], "gather": [380, 395, 431, 446], "33": 380, "n_worker": [380, 443, 473, 474], "threads_per_work": 380, "__no_default__": [380, 381, 388, 397, 400, 425, 431, 443], "io_loop": [380, 406], "ioloop": [380, 406, 409, 446, 457, 473], "dashboard_link": [380, 392, 446, 453, 473], "link": [380, 392], "dashboard": [380, 392, 402, 473, 630], "amm": [380, 383, 424, 431], "accessor": [380, 383], "active_memory_manag": [380, 383], "we": [380, 395, 412, 414, 424, 431, 446, 473, 476, 482, 628, 629, 630, 631], "as_curr": [380, 384], "task": [380, 384, 387, 390, 396, 399, 402, 410, 413, 415, 417, 423, 426, 429, 430, 433, 437, 464, 470], "insid": [380, 384, 627, 628, 630, 631], "attach": [380, 384, 393], "allow_glob": [380, 391], "as_client": [380, 391], "latest": [380, 391, 421], "initialis": [380, 391], "outsid": [380, 391, 429], "wait_for_work": [380, 425, 443], "shutdown": [380, 434], "get_executor": [380, 399], "resourc": [380, 390, 396, 399, 402, 410, 415, 437], "retri": [380, 390, 396, 410, 415, 428, 437], "scatter": [380, 395, 431], "cancel": [380, 387], "forc": [380, 387], "fail": [380, 390, 396, 410, 415, 425, 426, 428, 437, 633], "publish_dataset": [380, 397, 407, 419, 439], "publish": [380, 419], "unpublish_dataset": [380, 419, 439], "list_dataset": [380, 397, 407, 419, 439], "get_dataset": [380, 397, 407, 419], "run_on_schedul": [380, 430], "process": [380, 393, 405, 410, 417, 424, 429, 430, 431, 433, 440, 473, 478, 482, 626, 630], "system": [380, 425, 429, 442, 445, 627, 630, 633], "dsk": [380, 396], "allow_other_work": [380, 390, 396, 410, 415, 437], "normalize_collect": [380, 413], "sync": [380, 390, 396, 446, 473, 503], "optimize_graph": [380, 390, 415], "restart": [380, 388, 425, 426], "reset": [380, 425, 426], "restart_work": [380, 425, 426], "upload_fil": [380, 442], "upload": [380, 442], "rebal": [380, 420, 424], "network": [380, 385, 393, 420, 424, 473], "replic": [380, 424], "branching_factor": [380, 424], "nthread": [380, 405, 412, 414, 417, 444], "ncore": [380, 412], "who_ha": [380, 405, 411, 412, 414, 417, 444], "has_what": [380, 405, 412, 414, 417, 444], "nbyte": [380, 411], "summari": [380, 411], "call_stack": [380, 386], "stack": [380, 386], "profil": [380, 418], "stop": [380, 387, 402, 418], "statist": [380, 418], "about": [380, 412, 414, 418, 426, 427, 432, 482, 631], "recent": [380, 418], "scheduler_info": [380, 426, 427, 432, 446], "basic": [380, 432], "dump_cluster_st": [380, 393], "dump": [380, 393], "url": [380, 392, 393], "intend": [380, 393], "purpos": [380, 393, 433, 630], "write_scheduler_fil": [380, 445], "get_metadata": [380, 400, 433], "arbitrari": [380, 400, 433, 631], "get_scheduler_log": [380, 401], "get_worker_log": [380, 404], "nanni": [380, 404, 423, 425, 426, 429, 440, 473], "benchmark_hardwar": [380, 385], "benchmark": [380, 385], "bandwidth": [380, 385], "log_ev": [380, 408, 438, 441], "topic": [380, 398, 408, 438, 441], "msg": [380, 408, 438], "under": [380, 408], "get_ev": [380, 398, 438, 441], "structur": [380, 398, 433], "subscribe_top": [380, 438, 441], "handler": [380, 438, 441], "subscrib": [380, 438], "receiv": [380, 412, 414, 419, 438, 628], "unsubscribe_top": [380, 438, 441], "unsubscrib": [380, 441], "retire_work": [380, 427], "retir": [380, 427], "certain": [380, 427, 631], "set_metadata": [380, 400, 433], "versionsdict": [380, 403], "info": [380, 403, 438, 473], "myself": [380, 403], "futures_of": [380, 394], "static": [380, 389, 557, 561, 563, 577, 578], "collections_to_dsk": [380, 389], "mani": [380, 385, 389, 424, 425, 437, 446, 473], "stori": [380, 436], "keys_or_stimuli": [380, 436], "on_error": [380, 429, 436], "wide": [380, 436], "stimulus_id": [380, 436], "get_task_stream": [380, 402], "register_scheduler_plugin": [380, 421], "plugin": [380, 402, 421, 423, 440], "idempot": [380, 421, 423], "register_worker_callback": [380, 422], "callback": [380, 422], "register_worker_plugin": [380, 423, 440], "lifecycl": [380, 423, 440], "unregister_worker_plugin": [380, 423, 440], "unregist": [380, 440], "callback_timeout": [380, 446, 473, 503], "synchron": [380, 390, 446, 473, 503, 511], "preload": [380, 416, 423], "pubsub": 381, "pubsubclientextens": 381, "512": 381, "interest": [386, 630], "df": [386, 419], "dd": [386, 419], "read_parquet": 386, "delet": 387, "longer": [387, 631], "even": 387, "session": 388, "timeouterror": [388, 425, 431, 443], "prioriti": [390, 396, 410, 415, 437], "fifo_timeout": [390, 396, 410, 415, 437], "60": [390, 396, 402, 415, 627], "actor": [390, 396, 410, 415, 437], "travers": 390, "datafram": [390, 413, 415], "hostnam": [390, 396, 410, 415, 431, 437, 587], "leav": [390, 396, 410, 412, 414, 415, 418, 437], "preced": [390, 396, 410, 415, 437], "builtin": 390, "larg": [390, 393, 410], "expens": 390, "avoid": 390, "gpu": [390, 396, 410, 415, 437], "basi": [390, 396, 415], "delai": [390, 432], "xx": [390, 415], "yy": [390, 415], "statu": [390, 429, 430, 431, 478, 490], "finish": [390, 423, 429, 431, 440, 478, 485], "8f6e709446674bad78ea8aeecfee188": 390, "web": [392, 473], "browser": 392, "webbrows": 392, "write_from_schedul": 393, "run_spec": 393, "msgpack": [393, 408, 433], "storage_opt": 393, "minut": [393, 513], "unrespons": 393, "worker_addr": 393, "appropri": 393, "gz": 393, "fsspec": 393, "s3": [393, 419], "my": [393, 423], "bucket": 393, "sent": 393, "infer": 393, "local_dir": 393, "filesystem": 393, "care": [393, 412, 414, 631], "ephemer": 393, "hardwar": 393, "transfer": [393, 402], "much": [393, 446], "suppos": 393, "code": [393, 418, 589], "traceback": 393, "typic": [393, 418, 430, 473], "To": [393, 408, 446], "gzip": 393, "fd": 393, "unpack": 393, "cloader": 393, "importerror": 393, "queue": [395, 410, 431, 473, 478, 479], "possibli": 395, "skip": [395, 473], "er": 395, "inclus": 395, "now": [395, 402, 415, 630], "rather": [395, 418, 431, 628], "8787": [395, 396, 431], "known": [396, 413, 429], "pack": 396, "_get_dataset": 397, "compat": [399, 557, 561], "clientexecutor": 399, "10000": [401, 404], "admin": [401, 404], "revers": [401, 404], "newest": [401, 404], "html": [402, 418, 421], "bokeh_resourc": 402, "diagnost": [402, 429, 630], "particular": [402, 429], "wish": [402, 419, 423, 424, 431], "ensur": [402, 630], "thing": [402, 589, 593], "again": 402, "want": [402, 424, 426, 427, 433, 622, 628, 629, 630, 631, 633], "500": [402, 473], "bokeh": 402, "inlin": 402, "cdn": 402, "prime": 402, "myfil": 402, "sklearn": 403, "geopanda": 403, "remot": [405, 411, 412, 414, 424, 427, 429, 432, 444], "z": [405, 411, 417, 431, 433, 444, 631], "inc": [405, 411, 417, 418, 444], "192": [405, 412, 414, 417, 429, 444], "168": [405, 412, 414, 417, 429, 444], "141": [405, 412, 414, 417, 444], "46784": [405, 412, 414, 417, 444], "1c8dd6be1c21646c71f76c16d09304ea": [405, 411, 417, 444], "fd65c238a7ea60f6a01bf4c8a5fcf44b": [405, 411, 417, 444], "1e297fc27658d7b67b3a758f16bcf47a": [405, 411, 417, 444], "serializ": [408, 423, 433], "100": [410, 413, 429, 430, 431, 437, 630], "pure": [410, 437, 622], "batch_siz": 410, "100m": [410, 437], "impur": [410, 437], "batch": [410, 473], "later": [410, 630], "ones": 410, "sy": 411, "getsizeof": 411, "cost": 411, "summar": 411, "28": 411, "84": 411, "167": [412, 414], "142": [412, 414], "47548": [412, 414], "143": [412, 414], "47329": [412, 414], "144": [412, 414], "37297": [412, 414], "overlap": 413, "len": [413, 430, 578], "__dask_graph__": 413, "intersect": 413, "trigger": [413, 589, 592], "ident": [415, 446], "merge_work": 418, "restrict": [418, 424, 429], "administr": [418, 433], "itself": [418, 422, 423, 429, 430, 630], "download": 419, "prior": 419, "read_csv": 419, "my_dataset": [419, 439], "invoc": 419, "df2": 419, "move": [420, 431, 627], "roughli": [420, 473], "balanc": 420, "burden": 420, "affect": [420, 473], "subset": [420, 431], "side": [420, 429], "test": 420, "readthedoc": 421, "en": 421, "schedulerplugin": 421, "upon": [422, 589, 591], "dask_work": [422, 429], "popul": [422, 429, 629], "transit": [423, 440], "teardown": [423, 440], "release_kei": [423, 440], "workerplugin": [423, 440], "below": [423, 630], "pickl": [423, 563, 574, 578, 582], "cloudpickl": 423, "script": [423, 473, 478, 486, 488, 623, 626, 629, 632, 633], "nannyplugin": 423, "myplugin": [423, 440], "get_work": 423, "other_plugin": 423, "my_stat": 423, "frequent": 424, "improv": 424, "resili": 424, "tree": 424, "throughout": 424, "piec": 424, "guarante": 424, "incompat": [424, 431], "reducereplica": [424, 431], "polici": [424, 431], "three": [424, 557], "alic": 424, "bob": 424, "hope": 425, "extern": 425, "deploy": 425, "therefor": [425, 629], "just": [425, 625], "regardless": 425, "come": [425, 429], "asyncio": [425, 429, 430], "exceed": 425, "reconnect": 425, "granular": 425, "monitor": 426, "simpli": [426, 630], "gracefulli": [426, 482], "suspici": 426, "increment": [426, 630], "tcp": [426, 427], "close_work": 427, "lost": 429, "getpid": 429, "9000": 429, "1234": [429, 630], "101": 429, "4321": 429, "102": 429, "5555": 429, "get_statu": 429, "print_stat": [429, 430], "sleep": [429, 430], "live": [430, 446, 630], "dask_schedul": 430, "get_number_of_task": 430, "better": [431, 626], "job": [431, 464, 469, 472, 473, 474, 475, 478, 486, 488, 500], "constrain": 431, "robin": 431, "flag": [431, 633], "c0a8a20f903a4915b94db8de3ea63195": 431, "58e78e1b34eb49a68c65b54815d1b158": 431, "d3395e15f605bc35ab1bac6341a285e2": 431, "8788": 431, "rang": [431, 630], "2de2b6da": 432, "69ee": 432, "11e6": 432, "ab6a": 432, "e82aea155996": 432, "servic": 432, "40575": 432, "seen": 432, "1472038237": 432, "4845693": 432, "0061032772064208984": 432, "small": [433, 630], "central": 433, "clean": 433, "forgotten": 433, "123": 433, "Then": 433, "task_metadata": 433, "lower": 433, "demand": 433, "w": 433, "456": 433, "disrupt": 434, "uniqu": [437, 559], "typeerror": [437, 578], "clock": 438, "logger": 438, "getlogg": 438, "mylogg": 438, "shown": 438, "lambda": 438, "unpublish": 439, "As": [440, 630, 631], "part": [440, 559, 560, 562, 630], "unregistr": 440, "foo": [440, 631], "tempfil": 442, "gettempdir": 442, "egg": 442, "zip": 442, "mylibrari": 442, "myfunc": 442, "facilit": 445, "easi": [445, 628], "client2": 445, "superclass": 446, "scheduler_comm": 446, "rpc": 446, "_supports_sc": 446, "ipython": 446, "widget": 446, "adapt": [446, 451, 473, 475], "integr": 446, "labextens": 446, "quiet": [446, 449], "scheduler_address": [446, 463, 473], "plan": [446, 460, 473, 498], "observ": [446, 459, 473], "turn": [446, 451], "get_log": [446, 455, 473], "scheduler_sync_interv": 449, "deploi": 451, "minimum": [451, 475, 559, 560, 562], "maximum": [451, 475, 559, 560, 562], "interv": 451, "500m": 451, "target": [462, 500, 502, 622], "ten": [462, 502], "reserv": [464, 470], "think": [464, 470], "exclus": [464, 469, 606], "slurmclust": [473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503], "dask_jobqueu": [473, 474, 478], "jobqueueclust": 473, "launch": [473, 629, 633], "destin": 473, "sbatch": [473, 478, 491], "account": [473, 479], "pb": 473, "cut": 473, "good": [473, 630], "gil": 473, "workload": [473, 633], "sqrt": 473, "eth0": 473, "ib0": 473, "scheduler_opt": [473, 474], "your_worker_interfac": 473, "your_scheduler_interfac": 473, "local_directori": 473, "spill": 473, "death_timeout": 473, "worker_extra_arg": 473, "env_extra": 473, "job_script_prologu": 473, "header_skip": 473, "job_directives_skip": 473, "job_extra_direct": 473, "log_directori": 473, "shebang": 473, "submiss": [473, 478, 486, 488], "config_nam": [473, 474, 478, 479, 483], "jobqueu": 473, "silence_log": [473, 474], "tl": 473, "ssl": 473, "dashboard_address": [473, 474], "12435": 473, "scheduler_cl": [473, 474], "shared_temp_directori": [473, 474], "certif": 473, "walltim": [473, 479], "job_cpu": [473, 479], "cpu": 473, "book": 473, "job_mem": [473, 479], "job_extra": 473, "oe": 473, "prepend": 473, "myaccount": 473, "24": 473, "gb": 473, "kill": [473, 482], "maximum_job": [473, 475], "job_cl": [473, 474, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493], "slurmjob": [473, 478], "job_head": [473, 494], "job_nam": [473, 495], "job_script": [473, 478, 488, 496], "minimum_job": [473, 475], "new_worker_spec": [473, 497], "spec": [473, 497], "scale_down": [473, 501], "scale_up": [473, 502], "from_nam": [473, 477], "processinterfac": [473, 477], "protocol": 474, "job_kwarg": 474, "keep": [475, 631], "minimum_memori": 475, "maximum_memori": 475, "submit_command": [478, 491], "cancel_command": [478, 481], "scancel": [478, 481], "job_id_regexp": [478, 487], "job_id": [478, 487], "default_config_nam": [478, 484], "job_fil": [478, 486], "our": [478, 489, 628, 629, 630, 631], "worker_process_thread": [478, 493], "worker_process_memori": [478, 492], "base_class_kwarg": 479, "bit": 482, "forcefulli": 482, "worri": 482, "cluster_arg": 511, "cluster_kwarg": 511, "cfg": 512, "dai": [513, 543, 544, 546, 548], "microsecond": [513, 544, 545, 547], "hour": 513, "week": 513, "__getattribute__": [513, 521, 563, 567], "getattr": [513, 521, 563, 567], "__add__": [513, 515], "__radd__": [513, 532], "__sub__": [513, 541], "__rsub__": [513, 538], "__mul__": [513, 527], "__rmul__": [513, 537], "__mod__": [513, 526], "__rmod__": [513, 536], "__divmod__": [513, 517], "divmod": [513, 517, 533], "__rdivmod__": [513, 533], "__neg__": [513, 529], "__pos__": [513, 531], "__abs__": [513, 514], "ab": [513, 514], "__bool__": [513, 516], "__floordiv__": [513, 519], "__rfloordiv__": [513, 535], "__truediv__": [513, 542], "__rtruediv__": [513, 539], "total_second": [513, 549], "resolut": [513, 547], "999999999": [513, 544, 546], "86399": [513, 544], "999999": [513, 544], "ep": 554, "jpeg": 554, "jpg": 554, "pdf": 554, "pgf": 554, "png": 554, "rgba": 554, "svg": [554, 623], "svgz": 554, "tif": 554, "tiff": 554, "randomword": [557, 558, 559, 560, 561, 562], "encapsul": 557, "deal": 557, "word": [557, 559, 560, 562, 614], "wonderword": [557, 625], "noun": [557, 559, 560, 562], "appl": 557, "orang": 557, "r2": 557, "r3": 557, "fact": 557, "verb": 557, "adject": [557, 560], "backward": [557, 561], "parts_of_speech": 557, "soon": [557, 559, 560, 561, 562], "starts_with": [557, 559, 560, 562], "ends_with": [557, 559, 560, 562], "criteria": [557, 559, 560, 562], "random_word": [557, 560], "read_word": [557, 561], "word_fil": [557, 561], "Will": [557, 561, 627], "isn": [557, 561], "meant": [557, 561], "_get_words_from_text_fil": [557, 561], "include_categori": [559, 560, 562], "include_parts_of_speech": [559, 560, 562], "word_min_length": [559, 560, 562], "word_max_length": [559, 560, 562], "regex": [559, 560, 562, 611], "exact": [559, 630], "role": 559, "denot": [559, 560, 562], "speech": [559, 560, 562], "express": [559, 560, 562, 628], "fullmatch": [559, 560, 562], "return_less_if_necessari": 560, "aren": 560, "enough": 560, "statisfi": 560, "nowordstochosefrom": [560, 562], "did": 560, "queri": [560, 630, 631], "choos": 560, "map_entri": [563, 577], "__setattr__": [563, 576], "setattr": [563, 576], "__delattr__": [563, 564], "delattr": [563, 564], "__reduce__": [563, 574, 578, 582], "typevar": [578, 579, 580, 581, 582, 583, 584], "_final": 578, "_immut": 578, "_typevarlik": 578, "primarili": 578, "benefit": 578, "checker": 578, "longest": 578, "latter": 578, "essenti": 578, "plain": 578, "At": [578, 625], "isinst": 578, "covari": [578, 579], "contravari": [578, 579], "declar": 578, "484": 578, "invari": 578, "introspect": 578, "__name__": 578, "__constraints__": 578, "__covariant__": 578, "__contravariant__": 578, "scope": 578, "constraint": [578, 579], "__init_subclass__": [578, 580], "__or__": [578, 581], "__ror__": [578, 584], "helper": [578, 582], "overridden": 580, "arg2list": 586, "80": 587, "contextlib": [589, 590], "abstractcontextmanag": [589, 590], "someth": [589, 630], "equival": 589, "__enter__": [589, 591], "enter": [589, 591], "__exit__": [589, 592], "exc_info": [589, 592], "flat_list": 597, "flat": 597, "exlcud": 601, "get_primitive_attrs_from_dataclass": 605, "dc": 605, "primit": 605, "invers": 607, "type_hint": 611, "moduletyp": 611, "map_kei": 612, "d1": 612, "d2": 612, "parse_bool": 613, "inspect": [617, 630], "don": [617, 622, 631], "arg0": [618, 619, 620], "arg1": [618, 620], "arg2": [618, 620], "arg3": [618, 620], "arg4": 618, "arg5": 618, "arg6": 618, "arg7": 618, "bulk": [618, 620], "richardson": [618, 620], "set_thread": 619, "virtual": 620, "temperatur": 620, "enviro": 622, "yml": 622, "probabl": 622, "made": 622, "manual": [622, 625, 630], "cmake": [622, 625], "dinstall_gtest": 622, "creativ": 623, "licens": 623, "wikimedia": 623, "wiki": 623, "201903_zebra_finch": 623, "analyz": 623, "might": [623, 628, 629, 630, 631], "outdat": 623, "incomplet": 623, "prototyp": [623, 626], "infrastructur": [623, 626], "plu": 623, "page": 623, "nor": 625, "yourself": [625, 630, 631], "clone": 625, "repositori": 625, "git": 625, "recip": 625, "built": [625, 626, 628, 629, 630], "faster": 625, "boa": 625, "forg": 625, "mambabuild": 625, "finch_mch": 625, "prefer": 625, "few": [625, 626], "dependeci": 625, "pypi": 625, "proper": [625, 626], "concept": 625, "gcc": 625, "pipelin": 626, "understand": [626, 628], "find": [626, 629, 630, 631], "tex": 626, "henc": 626, "reproduc": [626, 628], "cross": [627, 629], "scratch_dir": 627, "scratch": 627, "fast": 627, "log_dir": 627, "log_level": 627, "debug_mod": 627, "log_format": 627, "levelnam": 627, "colon": 627, "input_stor": 627, "finch_stor": 627, "results_dir": 627, "scaling_timeout": 627, "startup": 627, "dir": 627, "finch_ev": 627, "pref_report_dir": 627, "config_dir": 627, "grib_index_dir": 627, "config_path": 627, "finch_run_config": [627, 633], "debug_config_path": 627, "finch_debug_config": [627, 633], "impract": 628, "easili": [628, 629, 630, 631], "create_results_dataset": 628, "eval": [628, 630], "measure_operator_runtim": 628, "daataset": 628, "numer": 628, "dedic": 628, "to_netcdf": 628, "nc": 628, "open_dataset": 628, "human": 628, "had": 628, "matplotlib": 628, "matplotx": 628, "put": 628, "properli": 628, "underscor": 628, "Its": 628, "promin": 629, "who": 629, "There": 629, "ingredi": 629, "explain": [629, 631], "input_manag": 629, "let": [629, 630], "five": 629, "begin": 629, "behavior": 629, "blow": 629, "unexpectedli": 629, "adjust": 629, "fine": 629, "grain": 629, "abil": 629, "15": 629, "anoth": 629, "deriv": [629, 631], "lazi": 629, "what": [629, 631], "chapter": 630, "principl": 630, "modular": 630, "fashion": 630, "independ": 630, "avg_xr": 630, "avg_split": 630, "dim_len": 630, "part1": 630, "isel": 630, "part2": 630, "stick": 630, "avg_": 630, "reli": 630, "hi": 630, "avg_input": 630, "avg_sourc": 630, "avg_src_vers": 630, "fly": 630, "dask_arrai": 630, "10_000": 630, "100_000": 630, "to_dataset": 630, "reformat": 630, "xy": 630, "45": 630, "could": 630, "avg_scal": 630, "prepar": 630, "srun": 630, "ll": 630, "8877": 630, "python3": 630, "randomst": 630, "manner": 631, "correct": 631, "afterward": 631, "besid": 631, "foo_sourc": 631, "foo_vers": 631, "zyx": 631, "realli": 631, "readi": 631, "mind": 631, "respons": 631, "unset": 631, "netcdf_explicit": 631, "previous": 631, "step": [631, 632], "version_list": 631, "brows": 631, "search": 631, "perfect": 631, "perfectli": 631, "notic": 631, "impact": 631, "netcdf_big": 631, "30": 631, "out_vers": 631, "assert": 631, "didn": 631, "transpos": 631, "yxz": 631, "ve": 633, "regularli": 633, "duplic": 633, "pick": 633, "custom_run_config": 633, "custom_debug_config": 633}, "objects": {"finch": [[1, 0, 1, "", "DaskRunConfig", "A run configuration class for running operators on a dask cluster."], [12, 0, 1, "", "DaskRuntime", "A class for reporting runtimes of a dask operator."], [19, 2, 1, "", "DefaultOperator", "alias of Callable[Dataset, DataArray]"], [23, 0, 1, "", "OperatorRunConfig", "A run configuration class for running operators conforming to the standard operator signature."], [34, 0, 1, "", "RunConfig", "Class for configuring and setting up the environment for experiments."], [46, 0, 1, "", "Runtime", "A class for capturing runtimes of different stages. The runtimes can be cathegorized into serial for serial overheads or parallel for runtimes in parallel regions."], [378, 4, 1, "", "measure_runtimes", "Measures the runtimes of multiple run configurations."], [550, 4, 1, "", "set_debug_mode", "Toggles the debug mode. If True, debug mode is enabled. If False, it is disabled. If the log level was not set explicitely, it will be set to WARNING if debug is disabled and to DEBUG if it is enabled."], [551, 4, 1, "", "set_log_level", "Overwrite the current logging level."]], "finch.DaskRunConfig": [[2, 1, 1, "", "__eq__", "Return self==value."], [3, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [4, 1, 1, "", "__repr__", "Return repr(self)."], [5, 1, 1, "", "cleanup", "Perform cleanup after the measurement iterations."], [6, 2, 1, "", "cluster_config", "The cluster configuration to use"], [7, 1, 1, "", "construct_output", "Abstract class which constructs the output dask collections to be computed."], [8, 2, 1, "", "create_report", "Whether to create a dask report."], [9, 1, 1, "", "measure", "Measures the runtime of the implementation."], [10, 1, 1, "", "setup", "Sets up the environment for this configuration. This will be called once before the measurement iterations start."], [11, 2, 1, "", "workers", "The number of dask workers to spawn"]], "finch.DaskRunConfig.construct_output": [[7, 3, 2, "p-args", "args", "The output of load_input."]], "finch.DaskRuntime": [[13, 1, 1, "", "__eq__", "Return self==value."], [14, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [15, 1, 1, "", "__repr__", "Return repr(self)."], [16, 2, 1, "", "graph_construction", "Serial. The runtime used for constructing the dask graph."], [17, 2, 1, "", "optimization", "Serial. The runtime used for optimizing the dask graph."], [18, 2, 1, "", "serialization", "Serial. The runtime used for serializing the dask graph."]], "finch.DefaultOperator": [[20, 1, 1, "", "__call__", "Call self as a function."], [21, 2, 1, "", "__class_getitem__", ""], [22, 1, 1, "", "__subclasshook__", "Abstract classes can override this to customize issubclass()."]], "finch.OperatorRunConfig": [[24, 1, 1, "", "__eq__", "Return self==value."], [25, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [26, 1, 1, "", "__repr__", "Return repr(self)."], [27, 1, 1, "", "construct_output", "Abstract class which constructs the output dask collections to be computed."], [28, 2, 1, "", "impl", "The operator implementation to run"], [29, 2, 1, "", "input_obj", "The input object to use."], [30, 2, 1, "", "input_version", "The input version to use."], [31, 1, 1, "", "load_input", "Loads the input for the implementation."], [32, 1, 1, "", "measure", "Measures the runtime of the implementation."], [33, 2, 1, "", "store_output", "Whether to store the output to zarr or not."]], "finch.OperatorRunConfig.construct_output": [[27, 3, 2, "p-args", "args", "The output of load_input."]], "finch.RunConfig": [[35, 1, 1, "", "__eq__", "Return self==value."], [36, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [37, 1, 1, "", "__repr__", "Return repr(self)."], [38, 1, 1, "", "cleanup", "Perform cleanup after the measurement iterations."], [39, 2, 1, "", "impl", "The operator implementation to run"], [40, 2, 1, "", "iterations", "The number of iterations to run. The runtimes will be combined according to runtime_reduction."], [41, 1, 1, "", "load_input", "Loads the input for the implementation."], [42, 1, 1, "", "measure", "Measures the runtime of the implementation."], [43, 1, 1, "", "runtime_reduction", "Compute the arithmetic mean along the specified axis, ignoring NaNs."], [44, 1, 1, "", "setup", "Sets up the environment for this configuration. This will be called once before the measurement iterations start."], [45, 2, 1, "", "warmup", "If set to True, an additional warmup iteration will be added at the start of the measurement iterations, whose runtime will be discarded."]], "finch.Runtime": [[47, 1, 1, "", "__eq__", "Return self==value."], [48, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [49, 1, 1, "", "__repr__", "Return repr(self)."], [50, 2, 1, "", "compute", "Parallel (and some unmeasurable serial). The runtime used for running the final computation. This includes the parallel computation as well as some serial overhead that cannot be measured separately."], [51, 2, 1, "", "full", "The full runtime of the experiment."], [52, 2, 1, "", "input_loading", "Serial. The runtime used for loading the input."]], "finch.brn": [[53, 4, 1, "", "brn", "Blockwise thetav wrapper for zebra.brn()."], [54, 4, 1, "", "get_brn_input", "Returns an input object for brn functions."], [55, 4, 1, "", "get_repeated_brn", "Returns a repeated version of a BRN implementation. A repeated version repeats the brn computation iteratively, while the output of a previous iteration is used as an input of the next iteration."], [56, 4, 1, "", "get_repeated_brn_name", "Returns a descriptive name of a repeated BRN operator."], [57, 4, 1, "", "list_brn_implementations", "Returns all available implementations of the brn operator"], [58, 4, 1, "", "list_implementations", "Returns all available implementations of the brn operator"], [59, 4, 1, "", "list_thetav_implementations", "Returns all available implementations of the thetav operator."], [60, 4, 1, "", "thetav", "Blockwise thetav wrapper for zebra.brn()."]], "finch.brn.brn": [[53, 3, 2, "p-dataset", "dataset", "The brn operator input"], [53, 3, 2, "p-reps", "reps", "The amount of repeated BRN executions. Defaults to 1."]], "finch.brn.get_repeated_brn_name": [[56, 3, 2, "p-impl", "impl", "The repeated BRN operator This must be the output of finch.brn.get_repeated_brn()."]], "finch.brn.thetav": [[60, 3, 2, "p-dataset", "dataset", "The thetav operator input"]], "finch.config": [[61, 0, 1, "", "ConfigParser", "ConfigParser implementing interpolation."], [97, 0, 1, "", "ExtendedInterpolation", "Advanced variant of interpolation, supports the syntax used by `zc.buildout'. Enables interpolation between sections."], [102, 0, 1, "", "StringIO", "Text I/O implementation using an in-memory buffer."], [128, 6, 1, "", "config", "This variable contains the configuration of the finch core library. It is initialized from finch's config files when importing finch."], [129, 6, 1, "", "debug", "Debug mode toggle"], [130, 4, 1, "", "expand", "Expand variables Unix style."], [131, 4, 1, "", "read_config", "Reads a config file."], [132, 4, 1, "", "set_debug_mode", "Toggles the debug mode. If True, debug mode is enabled. If False, it is disabled. If the log level was not set explicitely, it will be set to WARNING if debug is disabled and to DEBUG if it is enabled."], [133, 4, 1, "", "set_log_level", "Overwrite the current logging level."]], "finch.config.ConfigParser": [[62, 2, 1, "", "BOOLEAN_STATES", ""], [63, 2, 1, "", "NONSPACECRE", ""], [64, 2, 1, "", "OPTCRE", ""], [65, 2, 1, "", "OPTCRE_NV", ""], [66, 2, 1, "", "SECTCRE", ""], [67, 1, 1, "", "__getitem__", ""], [68, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [69, 1, 1, "", "__setitem__", ""], [70, 1, 1, "", "add_section", "Create a new section in the configuration.  Extends RawConfigParser.add_section by validating if the section name is a string."], [71, 1, 1, "", "clear", ""], [72, 5, 1, "", "converters", ""], [73, 1, 1, "", "defaults", ""], [74, 1, 1, "", "get", "Get an option value for a given section."], [75, 1, 1, "", "getboolean", ""], [76, 1, 1, "", "getfloat", ""], [77, 1, 1, "", "getint", ""], [78, 1, 1, "", "has_option", "Check for the existence of a given option in a given section. If the specified `section' is None or an empty string, DEFAULT is assumed. If the specified `section' does not exist, returns False."], [79, 1, 1, "", "has_section", "Indicate whether the named section is present in the configuration."], [80, 1, 1, "", "items", "Return a list of (name, value) tuples for each option in a section."], [81, 1, 1, "", "options", "Return a list of option names for the given section name."], [82, 1, 1, "", "optionxform", ""], [83, 1, 1, "", "pop", "If key is not found, d is returned if given, otherwise KeyError is raised."], [84, 1, 1, "", "popitem", "Remove a section from the parser and return it as a (section_name, section_proxy) tuple. If no section is present, raise KeyError."], [85, 1, 1, "", "read", "Read and parse a filename or an iterable of filenames."], [86, 1, 1, "", "read_dict", "Read configuration from a dictionary."], [87, 1, 1, "", "read_file", "Like read() but the argument must be a file-like object."], [88, 1, 1, "", "read_string", "Read configuration from a given string."], [89, 1, 1, "", "readfp", "Deprecated, use read_file instead."], [90, 1, 1, "", "remove_option", "Remove an option."], [91, 1, 1, "", "remove_section", "Remove a file section."], [92, 1, 1, "", "sections", "Return a list of section names, excluding [DEFAULT]"], [93, 1, 1, "", "set", "Set an option.  Extends RawConfigParser.set by validating type and interpolation syntax on the value."], [94, 1, 1, "", "setdefault", ""], [95, 1, 1, "", "update", "If E present and has a .keys() method, does:     for k in E: D[k] = E[k] If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v In either case, this is followed by: for k, v in F.items(): D[k] = v"], [96, 1, 1, "", "write", "Write an .ini-format representation of the configuration state."]], "finch.config.ExtendedInterpolation": [[98, 1, 1, "", "before_get", ""], [99, 1, 1, "", "before_read", ""], [100, 1, 1, "", "before_set", ""], [101, 1, 1, "", "before_write", ""]], "finch.config.StringIO": [[103, 1, 1, "", "__iter__", "Implement iter(self)."], [104, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [105, 1, 1, "", "__next__", "Implement next(self)."], [106, 1, 1, "", "close", "Close the IO object."], [107, 2, 1, "", "closed", ""], [108, 1, 1, "", "detach", "Separate the underlying buffer from the TextIOBase and return it."], [109, 2, 1, "", "encoding", "Encoding of the text stream."], [110, 2, 1, "", "errors", "The error setting of the decoder or encoder."], [111, 1, 1, "", "fileno", "Returns underlying file descriptor if one exists."], [112, 1, 1, "", "flush", "Flush write buffers, if applicable."], [113, 1, 1, "", "getvalue", "Retrieve the entire contents of the object."], [114, 1, 1, "", "isatty", "Return whether this is an 'interactive' stream."], [115, 2, 1, "", "line_buffering", ""], [116, 2, 1, "", "newlines", ""], [117, 1, 1, "", "read", "Read at most size characters, returned as a string."], [118, 1, 1, "", "readable", "Returns True if the IO object can be read."], [119, 1, 1, "", "readline", "Read until newline or EOF."], [120, 1, 1, "", "readlines", "Return a list of lines from the stream."], [121, 1, 1, "", "seek", "Change stream position."], [122, 1, 1, "", "seekable", "Returns True if the IO object can be seeked."], [123, 1, 1, "", "tell", "Tell the current file position."], [124, 1, 1, "", "truncate", "Truncate size to pos."], [125, 1, 1, "", "writable", "Returns True if the IO object can be written."], [126, 1, 1, "", "write", "Write string to file."], [127, 1, 1, "", "writelines", "Write a list of lines to stream."]], "finch.config.read_config": [[131, 3, 2, "p-cfg_path", "cfg_path", "The path to the config file"], [131, 3, 2, "p-optional", "optional", "If True, nothing happens if the file does not exist. If False, an error will be raised."]], "finch.constants": [[134, 6, 1, "", "P0", "Surface pressure"], [135, 6, 1, "", "PC_CP_D", "Specific heat capacity of air at constant pressure"], [136, 6, 1, "", "PC_G", "Gravitational acceleration"], [137, 6, 1, "", "PC_R_D", "Gas constant of air"], [138, 6, 1, "", "PC_R_V", "Gas constant of water vapour [J kg-1 K-1]"]], "finch.data": [[139, 0, 1, "", "Chunks", "A Mapping is a generic container for associating key/value pairs."], [147, 6, 1, "", "DimOrder", "Type hint for dimension order. If the dimension order is a string, the dimensions are specified by individual characters ('x', 'y', etc.). With a list of strings, it is possible to give more descriptive names to individual dimensions."], [148, 0, 1, "", "Format", "Supported file formats"], [155, 0, 1, "", "Hashable", "Return hash(self)."], [158, 0, 1, "", "Input", "Class for managing experiment inputs on disk."], [296, 0, 1, "", "Iterable", "Abstract classes can override this to customize issubclass()."], [299, 4, 1, "", "adjust_dims", "Return a new DataArray with the same content as array such that the dimensions match dims in content and order. This is achieved with a combination of expand_dims, squeeze and transform. When trying to remove dimensions with sizes larger than 1, an error will be thrown."], [300, 6, 1, "", "auto_chunk_size", "The chunk size used for the \"auto\" keyword."], [301, 4, 1, "", "can_rechunk_no_split", "Returns True, if c1 can be rechunked according to c2 without the need to split up any chunks."], [302, 4, 1, "", "chunk_args_equal", "Returns whether two xarray chunk arguments are equal. Auto and None chunk arguments will always be equal. If a dimension name is not present, its size will be interpreted as None."], [303, 4, 1, "", "dataclass", "Returns the same class as was passed in, with dunder methods added based on the fields defined in the class."], [304, 4, 1, "", "deprecated", "This decorator can be used to insert a \"deprecated\" directive in your function/class docstring in order to documents the version of the project which deprecates this functionality in your library."], [305, 4, 1, "", "field", "Return an object to identify dataclass fields."], [306, 4, 1, "", "get_chunk_sizes", "Returns a list of explicit chunk sizes from a single chunk size."], [307, 4, 1, "", "get_dim_order_list", "Transforms a dimension order into list form."], [308, 4, 1, "", "glob", "Return a list of paths matching a pathname pattern."], [309, 6, 1, "", "grib_dir", "The base directory from where to load grib files"], [310, 4, 1, "", "load_array_grib", "Loads a DataArray from a given grib file."], [311, 4, 1, "", "load_grib", "Convenience function for loading multiple ``xarray.DataArray``s from a grib file with load_array_grib() and returning them as a dataset."], [312, 6, 1, "", "netcdf_dir", "The base directory from where to load and store netCDF files"], [313, 4, 1, "", "overload", "Decorator for overloaded functions/methods."], [314, 4, 1, "", "simplify_chunks", "Simplyfies a chunks dictionary by resolving \"auto\" and removing None entries."], [315, 6, 1, "", "tmp_dir", "A directory which can be used as a temporary storage"], [316, 4, 1, "", "translate_order", "Translates a dimension order from compact form to verbose form or vice versa. A dimension order in compact form is a string where each letter represents a dimension (e.g. \"xyz\"). A dimension order in verbose form is a list of dimension names (e.g. [\"x\", \"y\", \"generalVerticalLayer\"])."], [317, 6, 1, "", "zarr_dir", "The base directory from where to load and store zarr files"]], "finch.data.Chunks": [[140, 1, 1, "", "__eq__", "Return self==value."], [141, 1, 1, "", "__getitem__", ""], [142, 1, 1, "", "__subclasshook__", "Abstract classes can override this to customize issubclass()."], [143, 1, 1, "", "get", ""], [144, 1, 1, "", "items", ""], [145, 1, 1, "", "keys", ""], [146, 1, 1, "", "values", ""]], "finch.data.Format": [[149, 2, 1, "", "FAKE", ""], [150, 2, 1, "", "GRIB", ""], [151, 2, 1, "", "NETCDF", ""], [152, 2, 1, "", "ZARR", ""], [153, 2, 1, "", "name", "The name of the Enum member."], [154, 2, 1, "", "value", "The value of the Enum member."]], "finch.data.Hashable": [[156, 1, 1, "", "__hash__", "Return hash(self)."], [157, 1, 1, "", "__subclasshook__", "Abstract classes can override this to customize issubclass()."]], "finch.data.Input": [[159, 0, 1, "", "Version", "A version of the input"], [287, 1, 1, "", "__init__", "Creates a new Input for the given source."], [288, 1, 1, "", "add_version", "Adds a new version of this input. If a version with the same properties already exists, nothing happens. If a version with the same name already exists, a value error will be raised."], [289, 1, 1, "", "get_version", "Returns a version with the given properties."], [290, 1, 1, "", "has_version", "Returns whether a version with the given properties already exists"], [291, 1, 1, "", "list_versions", "Lists the available versions for this input"], [292, 2, 1, "", "name", "The name of this input"], [293, 2, 1, "", "source", "A function from which to get the input data"], [294, 2, 1, "", "source_version", "The version of the source data"], [295, 2, 1, "", "versions", "The different versions of this input"]], "finch.data.Input.Version": [[160, 1, 1, "", "__eq__", "Return self==value."], [161, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [162, 1, 1, "", "__le__", "Self is less or equal to other, if other can be constructed from self without any relevant future differences in performance when accessing the data and without any changes in content."], [163, 1, 1, "", "__repr__", "Return repr(self)."], [164, 2, 1, "", "chunks", "The chunking as a dict, mapping dimension short names to chunk sizes"], [165, 2, 1, "", "coords", "Whether this version holds coordinates"], [166, 2, 1, "", "dim_order", "The dimension order. The type of the dimension order (str or list[str]) must be the same across all versions of an input."], [167, 2, 1, "", "finch_version", "The finch version that was used to create this input version. DO NOT MODIFY"], [168, 2, 1, "", "format", "The file format of this version. This can be passed as a Format object or as a string representation of a Format item during initialization."], [169, 1, 1, "", "from_yaml", "Convert a representation node to a Python object."], [170, 1, 1, "", "get_all_chunks", "Returns a dict which holds a chunk size for every dimension provided"], [171, 1, 1, "", "impose", "Transforms the given dataset such that it conforms to this version."], [172, 2, 1, "", "name", "The name of this version"], [173, 1, 1, "", "to_yaml", "Convert a Python object to a representation node."], [174, 2, 1, "", "yaml_dumper", "alias of Dumper"], [284, 2, 1, "", "yaml_flow_style", ""], [285, 2, 1, "", "yaml_loader", ""], [286, 2, 1, "", "yaml_tag", "The tag to use for encoding in yaml. DO NOT MODIFY"]], "finch.data.Input.Version.yaml_dumper": [[175, 2, 1, "", "ANCHOR_TEMPLATE", ""], [176, 2, 1, "", "DEFAULT_MAPPING_TAG", ""], [177, 2, 1, "", "DEFAULT_SCALAR_TAG", ""], [178, 2, 1, "", "DEFAULT_SEQUENCE_TAG", ""], [179, 2, 1, "", "DEFAULT_TAG_PREFIXES", ""], [180, 2, 1, "", "ESCAPE_REPLACEMENTS", ""], [181, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [182, 1, 1, "", "add_implicit_resolver", ""], [183, 1, 1, "", "add_multi_representer", ""], [184, 1, 1, "", "add_path_resolver", ""], [185, 1, 1, "", "add_representer", ""], [186, 1, 1, "", "analyze_scalar", ""], [187, 1, 1, "", "anchor_node", ""], [188, 1, 1, "", "ascend_resolver", ""], [189, 1, 1, "", "check_empty_document", ""], [190, 1, 1, "", "check_empty_mapping", ""], [191, 1, 1, "", "check_empty_sequence", ""], [192, 1, 1, "", "check_resolver_prefix", ""], [193, 1, 1, "", "check_simple_key", ""], [194, 1, 1, "", "choose_scalar_style", ""], [195, 1, 1, "", "close", ""], [196, 1, 1, "", "descend_resolver", ""], [197, 1, 1, "", "determine_block_hints", ""], [198, 1, 1, "", "dispose", ""], [199, 1, 1, "", "emit", ""], [200, 1, 1, "", "expect_alias", ""], [201, 1, 1, "", "expect_block_mapping", ""], [202, 1, 1, "", "expect_block_mapping_key", ""], [203, 1, 1, "", "expect_block_mapping_simple_value", ""], [204, 1, 1, "", "expect_block_mapping_value", ""], [205, 1, 1, "", "expect_block_sequence", ""], [206, 1, 1, "", "expect_block_sequence_item", ""], [207, 1, 1, "", "expect_document_end", ""], [208, 1, 1, "", "expect_document_root", ""], [209, 1, 1, "", "expect_document_start", ""], [210, 1, 1, "", "expect_first_block_mapping_key", ""], [211, 1, 1, "", "expect_first_block_sequence_item", ""], [212, 1, 1, "", "expect_first_document_start", ""], [213, 1, 1, "", "expect_first_flow_mapping_key", ""], [214, 1, 1, "", "expect_first_flow_sequence_item", ""], [215, 1, 1, "", "expect_flow_mapping", ""], [216, 1, 1, "", "expect_flow_mapping_key", ""], [217, 1, 1, "", "expect_flow_mapping_simple_value", ""], [218, 1, 1, "", "expect_flow_mapping_value", ""], [219, 1, 1, "", "expect_flow_sequence", ""], [220, 1, 1, "", "expect_flow_sequence_item", ""], [221, 1, 1, "", "expect_node", ""], [222, 1, 1, "", "expect_nothing", ""], [223, 1, 1, "", "expect_scalar", ""], [224, 1, 1, "", "expect_stream_start", ""], [225, 1, 1, "", "flush_stream", ""], [226, 1, 1, "", "generate_anchor", ""], [227, 1, 1, "", "ignore_aliases", ""], [228, 1, 1, "", "increase_indent", ""], [229, 2, 1, "", "inf_value", ""], [230, 1, 1, "", "need_events", ""], [231, 1, 1, "", "need_more_events", ""], [232, 1, 1, "", "open", ""], [233, 1, 1, "", "prepare_anchor", ""], [234, 1, 1, "", "prepare_tag", ""], [235, 1, 1, "", "prepare_tag_handle", ""], [236, 1, 1, "", "prepare_tag_prefix", ""], [237, 1, 1, "", "prepare_version", ""], [238, 1, 1, "", "process_anchor", ""], [239, 1, 1, "", "process_scalar", ""], [240, 1, 1, "", "process_tag", ""], [241, 1, 1, "", "represent", ""], [242, 1, 1, "", "represent_binary", ""], [243, 1, 1, "", "represent_bool", ""], [244, 1, 1, "", "represent_complex", ""], [245, 1, 1, "", "represent_data", ""], [246, 1, 1, "", "represent_date", ""], [247, 1, 1, "", "represent_datetime", ""], [248, 1, 1, "", "represent_dict", ""], [249, 1, 1, "", "represent_float", ""], [250, 1, 1, "", "represent_int", ""], [251, 1, 1, "", "represent_list", ""], [252, 1, 1, "", "represent_mapping", ""], [253, 1, 1, "", "represent_module", ""], [254, 1, 1, "", "represent_name", ""], [255, 1, 1, "", "represent_none", ""], [256, 1, 1, "", "represent_object", ""], [257, 1, 1, "", "represent_ordered_dict", ""], [258, 1, 1, "", "represent_scalar", ""], [259, 1, 1, "", "represent_sequence", ""], [260, 1, 1, "", "represent_set", ""], [261, 1, 1, "", "represent_str", ""], [262, 1, 1, "", "represent_tuple", ""], [263, 1, 1, "", "represent_undefined", ""], [264, 1, 1, "", "represent_yaml_object", ""], [265, 1, 1, "", "resolve", ""], [266, 1, 1, "", "serialize", ""], [267, 1, 1, "", "serialize_node", ""], [268, 1, 1, "", "write_double_quoted", ""], [269, 1, 1, "", "write_folded", ""], [270, 1, 1, "", "write_indent", ""], [271, 1, 1, "", "write_indicator", ""], [272, 1, 1, "", "write_line_break", ""], [273, 1, 1, "", "write_literal", ""], [274, 1, 1, "", "write_plain", ""], [275, 1, 1, "", "write_single_quoted", ""], [276, 1, 1, "", "write_stream_end", ""], [277, 1, 1, "", "write_stream_start", ""], [278, 1, 1, "", "write_tag_directive", ""], [279, 1, 1, "", "write_version_directive", ""], [280, 2, 1, "", "yaml_implicit_resolvers", ""], [281, 2, 1, "", "yaml_multi_representers", ""], [282, 2, 1, "", "yaml_path_resolvers", ""], [283, 2, 1, "", "yaml_representers", ""]], "finch.data.Input.__init__": [[287, 3, 2, "p-name", "name", "The name of the input"], [287, 3, 2, "p-source", "source", "The source of the input. The dataset returned by this function must always have the same content. It should match the attributes of the passed version as closely as possible, but is not required to."], [287, 3, 2, "p-source_version", "source_version", "A version object describing the source. This version object cannot have None fields. The chunks for all dimensions need to be explicitly specified."], [287, 3, 2, "p-store_path", "store_path", "A path to a directory which can be used to store input versions. The versions will not be stored directly in this directory, but in a subdirectory according to name. If None is passed, the configured default finch input store will be used. Defaults to None."]], "finch.data.Input.get_version": [[289, 3, 2, "p-add_if_not_exists", "add_if_not_exists", "Indicates whether to directly add a newly created version to this input"], [289, 3, 2, "p-create_if_not_exists", "create_if_not_exists", "Indicates whether to create and return a new version if no such version already exists."], [289, 3, 2, "p-version", "version", "The version properties"], [289, 3, 2, "p-weak_compare", "weak_compare", "If true, a smaller version can also be returned. The partial order between versions is defined in the Version class."]], "finch.data.Iterable": [[297, 2, 1, "", "__class_getitem__", ""], [298, 1, 1, "", "__subclasshook__", "Abstract classes can override this to customize issubclass()."]], "finch.data.adjust_dims": [[299, 3, 2, "p-dims", "dims", "A list of dimension names, which identify the dimensions and the dimension order of the output array."]], "finch.data.chunk_args_equal": [[302, 3, 2, "p-c1", "c1", "The first chunk argument"], [302, 3, 2, "p-c2", "c2", "The second chunk argument"], [302, 3, 2, "p-dim_sizes", "dim_sizes", "The dimension sizes of the xarray datastructure for which c1 and c2 can be applied."]], "finch.data.deprecated": [[304, 3, 2, "p-line_length", "line_length", "Max line length of the directive text. If non nul, a long text is wrapped in several lines."], [304, 3, 2, "p-reason", "reason", "Reason message which documents the deprecation in your library (can be omitted)."], [304, 3, 2, "p-version", "version", "Version of your project which deprecates this feature. If you follow the Semantic Versioning, the version number has the format \"MAJOR.MINOR.PATCH\"."]], "finch.data.get_chunk_sizes": [[306, 3, 2, "p-d", "d", "The size of the dimension."], [306, 3, 2, "p-s", "s", "The single chunk size"]], "finch.data.get_dim_order_list": [[307, 3, 2, "p-order", "order", "The dimension order to transform."]], "finch.data.load_array_grib": [[310, 3, 2, "p-chunks", "chunks", "A dictionary, indicating the chunk size per dimension to be loaded. If None, no chunks will be used and the data will be loaded as notmal numpy arrays instead of dask arrays."], [310, 3, 2, "p-index_path", "index_path", "The path to a cfgrib index file. Ignored if multiple files are loaded."], [310, 3, 2, "p-key_filters", "key_filters", "A dictionary used for filtering GRIB messages. Only messages where the given key matches the according value in this dictionary will be loaded."], [310, 3, 2, "p-load_coords", "load_coords", "Whether to load coordinates or not."], [310, 3, 2, "p-parallel", "parallel", "Whether to load files in parallel. Ignored if only one file is loaded."], [310, 3, 2, "p-path", "path", "The path(s) to the grib file(s) from which to load the array"], [310, 3, 2, "p-shortName", "shortName", "The GRIB shortName of the variable to load"]], "finch.data.load_grib": [[311, 3, 2, "p-grib_file", "grib_file", "The location of the grib file to load"], [311, 3, 2, "p-kwargs", "kwargs", "Additional arguments passed to load_array_grib()"], [311, 3, 2, "p-short_names", "short_names", "The names of the variables to load"]], "finch.data.translate_order": [[316, 3, 2, "p-index", "index", "A dicitionary, mapping letter representations of the dimensions to their verbose names."], [316, 3, 2, "p-order", "order", "The dimension order either in compact or verbose form."]], "finch.environment": [[318, 0, 1, "", "Version", "This class abstracts handling of a project's versions."], [343, 0, 1, "", "WorkerEnvironment", "This class manages environments for dask workers."], [349, 6, 1, "", "custom_config_env_var", "The name of the environment variable specifying the location of a custom configuration file."], [350, 6, 1, "", "data_dir", "The directory of the data files."], [351, 6, 1, "", "default_custom_config", "The default location for a custom configuration file"], [352, 4, 1, "", "get_version", "Returns the current version of the finch package."], [353, 6, 1, "", "node_name_env_var", "The name of the environment variable holding the name of the current SLURM node."], [354, 6, 1, "", "package_root", "The root directory of the finch package."], [355, 6, 1, "", "proj_config", "The location of the project configuration file."], [356, 6, 1, "", "version_file", "The location of the file specifying the version of the finch package."]], "finch.environment.Version": [[319, 1, 1, "", "__eq__", "Return self==value."], [320, 1, 1, "", "__ge__", "Return self>=value."], [321, 1, 1, "", "__gt__", "Return self>value."], [322, 1, 1, "", "__hash__", "Return hash(self)."], [323, 1, 1, "", "__init__", "Initialize a Version object."], [324, 1, 1, "", "__le__", "Return self<=value."], [325, 1, 1, "", "__lt__", "Return self<value."], [326, 1, 1, "", "__ne__", "Return self!=value."], [327, 1, 1, "", "__repr__", "A representation of the Version that shows all internal state."], [328, 1, 1, "", "__str__", "A string representation of the version that can be rounded-tripped."], [329, 5, 1, "", "base_version", "The \"base version\" of the version."], [330, 5, 1, "", "dev", "The development number of the version."], [331, 5, 1, "", "epoch", "The epoch of the version."], [332, 5, 1, "", "is_devrelease", "Whether this version is a development release."], [333, 5, 1, "", "is_postrelease", "Whether this version is a post-release."], [334, 5, 1, "", "is_prerelease", "Whether this version is a pre-release."], [335, 5, 1, "", "local", "The local version segment of the version."], [336, 5, 1, "", "major", "The first item of release or 0 if unavailable."], [337, 5, 1, "", "micro", "The third item of release or 0 if unavailable."], [338, 5, 1, "", "minor", "The second item of release or 0 if unavailable."], [339, 5, 1, "", "post", "The post-release number of the version."], [340, 5, 1, "", "pre", "The pre-release segment of the version."], [341, 5, 1, "", "public", "The public portion of the version."], [342, 5, 1, "", "release", "The components of the \"release\" segment of the version."]], "finch.environment.Version.__init__": [[323, 3, 2, "p-version", "version", "The string representation of a version which will be parsed and normalized before use."]], "finch.environment.WorkerEnvironment": [[344, 2, 1, "", "env_var_map", "Maps attributes of this class to environment variables"], [345, 1, 1, "", "get_job_script_prologue", "Returns a list of bash commands setting up the environment of a worker."], [346, 1, 1, "", "load", "Returns a new worker environment whose attributes are initialized according to the current environment."], [347, 2, 1, "", "omp_threads", "The number of threads available to openmp"], [348, 1, 1, "", "set", "Sets environment variables according to this worker environment"]], "finch.evaluation": [[357, 4, 1, "", "amdahl_speedup", "Returns the speedups for a serial runtime fractions and a selection of core counts."], [358, 4, 1, "", "combine_runtimes", "Combines different runtimes together into a new runtime by adding them up."], [359, 4, 1, "", "create_cores_dimension", "Merges the dimensions in the results array which contribute to the total amount of cores into a single 'cores' dimension. The number of cores are calculated by the product of the coordinates of the individual dimensions. The resulting dimension is sorted in increasing core order."], [360, 4, 1, "", "create_plots", "Creates a series of plots for the results array. The plot creation works as follows. Every plot has multiple different lines, which correspond to the different implementations. The y-axis indicates the value of the result, while the x-axis is a dimension of the result array. For every dimension of size greater than 1, except for the 'imp' dimension, a new plot will be created. The other dimensions will then be reduced by flattening and then reducing according to the given reduction function."], [361, 4, 1, "", "create_result_dataset", "Constructs a dataset from the results of an experiment. The dimensions are given by the attributes of the Version and RunConfig classes. The coordinates are labels for the version and run config attributes. The array entries in the dataset are the different runtimes which were recorded This result dataset can then be used as an input for different evaluation functions. The result dataset will contain NaN for every combination of version and run config attributes, which is not listed in versions."], [362, 4, 1, "", "deprecated", "This decorator can be used to insert a \"deprecated\" directive in your function/class docstring in order to documents the version of the project which deprecates this functionality in your library."], [363, 6, 1, "", "exp_name_attr", "The name of the attribute storing the experiment name in the results dataset."], [364, 4, 1, "", "find_scaling", "Returns the scaling factor and scaling rate for a series of speedups. This is done via regression on functions of the type $y = \u0007lpha * x^\beta$. $\u0007lpha$ indicates the scaling factor and $\beta$ the scaling rate. This assumes that the speedup for scale = 1 is 1."], [365, 4, 1, "", "get_plots_dir", "Returns the path to the directory where plots should be stored for a specific results dataset."], [366, 4, 1, "", "get_pyplot_grouped_bar_pos", "Returns an array of bar positions when trying to create a grouped bar plot for pyplot, along with the width of an individual bar. A row in the returned array contains the bar positions for a label, while a column contains the bar positions for a group."], [367, 4, 1, "", "plot_runtime_parts", "Plots how the full runtimes are split up."], [368, 6, 1, "", "plot_style", "The plot style to use for creating plots."], [369, 4, 1, "", "print_results", "Prints the results of an experiment for different run configurations and input versions."], [370, 4, 1, "", "print_version_results", "Prints the results of an experiment for different input versions."], [371, 4, 1, "", "remove_labels", "Removes the given labels in the given main dimension from the results array."], [372, 4, 1, "", "rename_labels", "Rename labels for some dimensions. This changes the coordinates in the results dataset"], [373, 6, 1, "", "rt_combined_attr", "The name of the attribute storing the list of combined runtimes in the results dataset."], [374, 4, 1, "", "serial_overhead_analysis", "Estimates the serial fraction of the total runtime. This is done via the closed-form solution of least squares regression with Amdahl's law."], [375, 4, 1, "", "simple_lin_reg", "Performs simple linear regression along the given axis."], [376, 4, 1, "", "speedup", "Calculates the speedup for an array of runtimes."], [377, 4, 1, "", "store_config", "Stores the configuration of the runtime experiment as a yaml. The configuration are the coordinate values of the results array."]], "finch.evaluation.amdahl_speedup": [[357, 3, 2, "p-c", "c", "A numpy array of core counts. This must have the same shape as f or must be broadcastable."], [357, 3, 2, "p-f", "f", "A numpy array of serial runtime fractions. These must be between 0 and 1."]], "finch.evaluation.combine_runtimes": [[358, 3, 2, "p-new_runtime", "new_runtime", "The name of the new runtime to insert"], [358, 3, 2, "p-results", "results", "The results dataset"], [358, 3, 2, "p-to_add", "to_add", "The names of the runtimes to add"]], "finch.evaluation.deprecated": [[362, 3, 2, "p-line_length", "line_length", "Max line length of the directive text. If non nul, a long text is wrapped in several lines."], [362, 3, 2, "p-reason", "reason", "Reason message which documents the deprecation in your library (can be omitted)."], [362, 3, 2, "p-version", "version", "Version of your project which deprecates this feature. If you follow the Semantic Versioning, the version number has the format \"MAJOR.MINOR.PATCH\"."]], "finch.evaluation.get_pyplot_grouped_bar_pos": [[366, 3, 2, "p-groups", "groups", "The number of groups in the bar plot"], [366, 3, 2, "p-labels", "labels", "The number of labels in the bar plot"]], "finch.evaluation.plot_runtime_parts": [[367, 3, 2, "p-first_dims", "first_dims", "The dimensions to prioritize in the order in which they are plotted. The first entry will be interpreted as the main dimension."], [367, 3, 2, "p-results", "results", "The results dataset"]], "finch.evaluation.rename_labels": [[372, 3, 2, "p-kwargs", "kwargs", "The renames argument as kwargs. If neither renames or kwargs are given, nothing happens"], [372, 3, 2, "p-renames", "renames", "A dictionary mapping dimension names to rename instructions. Rename instructions can be either in the form of a dictionary, mapping old values to new values, or in the form of a list, completely replacing the old values directly. Defaults to None, which means that the rename instructions are passed in kwargs."], [372, 3, 2, "p-results", "results", "The results dataset"]], "finch.evaluation.serial_overhead_analysis": [[374, 3, 2, "p-c", "c", "shape: (n_implementations, n_core_selections). The core selections"], [374, 3, 2, "p-c1", "c1", "shape: n_implementations. The core counts for the runtime baselines. If None, the first column of c will be used."], [374, 3, 2, "p-t", "t", "shape: (n_implementations, n_core_selections). The runtime measurements"], [374, 3, 2, "p-t1", "t1", "shape: n_implementations. The runtime baseline. If None, the first column of t will be used."]], "finch.evaluation.simple_lin_reg": [[375, 3, 2, "p-axis", "axis", "The axis along which a measurement series is stored. If None (default), x and y will be flattened."], [375, 3, 2, "p-x", "x", "The input values"], [375, 3, 2, "p-y", "y", "The (measured) output values"]], "finch.evaluation.speedup": [[376, 3, 2, "p-axis", "axis", "The axis which defines a series of runtimes. Only relevant if base is not given. Defaults to the last dimension."], [376, 3, 2, "p-base", "base", "The base runtimes from which to compute the speedup. Should have one dimension less than runtimes. By default (None), the base will be determined from the first element in the runtime series."], [376, 3, 2, "p-runtimes", "runtimes", "The array of runtimes to convert to speedups"]], "finch.measure_runtimes": [[378, 3, 2, "p-pbar", "pbar", "Progressbar argument."], [378, 3, 2, "p-run_config", "run_config", "The run configurations to measure."]], "finch.operators": [[379, 4, 1, "", "custom_map_blocks", "Custom implementation of map_blocks from dask for xarray data arrays based on dask's blockwise and map_blocks functions."]], "finch.scheduler": [[380, 0, 1, "", "Client", "Connect to and submit computation to a Dask cluster"], [446, 0, 1, "", "Cluster", "Superclass for cluster objects"], [464, 0, 1, "", "ClusterConfig", "A configuration class for configuring a dask SLURM cluster."], [473, 0, 1, "", "SLURMCluster", "Launch Dask on a SLURM cluster"], [504, 4, 1, "", "clear_memory", "Clears the memory of the current scheduler and workers. Attention: This function currently raises a NotImplementedError, because dask currently provides no efficient way of clearning the memory of the scheduler."], [505, 6, 1, "", "client", "The currently active dask client."], [506, 4, 1, "", "dask_config_get_not_none", "Returns the value of dask.config.get(key, default) and returns the default if None would be returned."], [507, 4, 1, "", "dataclass", "Returns the same class as was passed in, with dunder methods added based on the fields defined in the class."], [508, 4, 1, "", "get_client", "Returns the currently registered client."], [509, 4, 1, "", "parse_slurm_time", "Returns a timedelta from the given duration as is being passed to SLURM"], [510, 4, 1, "", "scale_and_wait", "Scales the current registered cluster to n workers and waits for them to start up."], [511, 4, 1, "", "start_scheduler", "Starts a new scheduler either in debug or run mode."], [512, 4, 1, "", "start_slurm_cluster", "Starts a new SLURM cluster with the given config and returns a client for it. If a cluster is already running with a different config, it is shut down."], [513, 0, 1, "", "timedelta", "Difference between two datetime values."]], "finch.scheduler.Client": [[381, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [382, 1, 1, "", "__repr__", "Return repr(self)."], [383, 5, 1, "", "amm", "Convenience accessors for the active_memory_manager"], [384, 1, 1, "", "as_current", "Thread-local, Task-local context manager that causes the Client.current class method to return self. Any Future objects deserialized inside this context manager will be automatically attached to this Client."], [385, 1, 1, "", "benchmark_hardware", "Run a benchmark on the workers for memory, disk, and network bandwidths"], [386, 1, 1, "", "call_stack", "The actively running call stack of all relevant keys"], [387, 1, 1, "", "cancel", "Cancel running futures"], [388, 1, 1, "", "close", "Close this client"], [389, 1, 1, "", "collections_to_dsk", "Convert many collections into a single dask graph, after optimization"], [390, 1, 1, "", "compute", "Compute dask collections on cluster"], [391, 1, 1, "", "current", "When running within the context of as_client, return the context-local current client. Otherwise, return the latest initialised Client. If no Client instances exist, raise ValueError. If allow_global is set to False, raise ValueError if running outside of the as_client context manager."], [392, 5, 1, "", "dashboard_link", "Link to the scheduler's dashboard."], [393, 1, 1, "", "dump_cluster_state", "Extract a dump of the entire cluster state and persist to disk or a URL. This is intended for debugging purposes only."], [394, 1, 1, "", "futures_of", "Wrapper method of futures_of"], [395, 1, 1, "", "gather", "Gather futures from distributed memory"], [396, 1, 1, "", "get", "Compute dask graph"], [397, 1, 1, "", "get_dataset", "Get named dataset from the scheduler if present. Return the default or raise a KeyError if not present."], [398, 1, 1, "", "get_events", "Retrieve structured topic logs"], [399, 1, 1, "", "get_executor", "Return a concurrent.futures Executor for submitting tasks on this Client"], [400, 1, 1, "", "get_metadata", "Get arbitrary metadata from scheduler"], [401, 1, 1, "", "get_scheduler_logs", "Get logs from scheduler"], [402, 1, 1, "", "get_task_stream", "Get task stream data from scheduler"], [403, 1, 1, "", "get_versions", "Return version info for the scheduler, all workers and myself"], [404, 1, 1, "", "get_worker_logs", "Get logs from workers"], [405, 1, 1, "", "has_what", "Which keys are held by which workers"], [406, 5, 1, "", "io_loop", ""], [407, 1, 1, "", "list_datasets", "List named datasets available on the scheduler"], [408, 1, 1, "", "log_event", "Log an event under a given topic"], [409, 5, 1, "", "loop", ""], [410, 1, 1, "", "map", "Map a function on a sequence of arguments"], [411, 1, 1, "", "nbytes", "The bytes taken up by each key on the cluster"], [412, 1, 1, "", "ncores", "The number of threads/cores available on each worker node"], [413, 1, 1, "", "normalize_collection", "Replace collection's tasks by already existing futures if they exist"], [414, 1, 1, "", "nthreads", "The number of threads/cores available on each worker node"], [415, 1, 1, "", "persist", "Persist dask collections on cluster"], [416, 2, 1, "", "preloads", ""], [417, 1, 1, "", "processing", "The tasks currently running on each worker"], [418, 1, 1, "", "profile", "Collect statistical profiling information about recent work"], [419, 1, 1, "", "publish_dataset", "Publish named datasets to scheduler"], [420, 1, 1, "", "rebalance", "Rebalance data within network"], [421, 1, 1, "", "register_scheduler_plugin", "Register a scheduler plugin."], [422, 1, 1, "", "register_worker_callbacks", "Registers a setup callback function for all current and future workers."], [423, 1, 1, "", "register_worker_plugin", "Registers a lifecycle worker plugin for all current and future workers."], [424, 1, 1, "", "replicate", "Set replication of futures within network"], [425, 1, 1, "", "restart", "Restart all workers. Reset local state. Optionally wait for workers to return."], [426, 1, 1, "", "restart_workers", "Restart a specified set of workers"], [427, 1, 1, "", "retire_workers", "Retire certain workers on the scheduler"], [428, 1, 1, "", "retry", "Retry failed futures"], [429, 1, 1, "", "run", "Run a function on all workers outside of task scheduling system"], [430, 1, 1, "", "run_on_scheduler", "Run a function on the scheduler process"], [431, 1, 1, "", "scatter", "Scatter data into distributed memory"], [432, 1, 1, "", "scheduler_info", "Basic information about the workers in the cluster"], [433, 1, 1, "", "set_metadata", "Set arbitrary metadata in the scheduler"], [434, 1, 1, "", "shutdown", "Shut down the connected scheduler and workers"], [435, 1, 1, "", "start", "Start scheduler running in separate thread"], [436, 1, 1, "", "story", "Returns a cluster-wide story for the given keys or stimulus_id's"], [437, 1, 1, "", "submit", "Submit a function application to the scheduler"], [438, 1, 1, "", "subscribe_topic", "Subscribe to a topic and execute a handler for every received event"], [439, 1, 1, "", "unpublish_dataset", "Remove named datasets from scheduler"], [440, 1, 1, "", "unregister_worker_plugin", "Unregisters a lifecycle worker plugin"], [441, 1, 1, "", "unsubscribe_topic", "Unsubscribe from a topic and remove event handler"], [442, 1, 1, "", "upload_file", "Upload local package to workers"], [443, 1, 1, "", "wait_for_workers", "Blocking call to wait for n workers before continuing"], [444, 1, 1, "", "who_has", "The workers storing each future's data"], [445, 1, 1, "", "write_scheduler_file", "Write the scheduler information to a json file."]], "finch.scheduler.Client.call_stack": [[386, 3, 2, "p-futures", "futures", "List of futures, defaults to all data"], [386, 3, 2, "p-keys", "keys", "List of key names, defaults to all data"]], "finch.scheduler.Client.cancel": [[387, 3, 2, "p-asynchronous", "asynchronous", "If True the client is in asynchronous mode"], [387, 3, 2, "p-force", "force", "Cancel this future even if other clients desire it"], [387, 3, 2, "p-futures", "futures", "The list of Futures"]], "finch.scheduler.Client.close": [[388, 3, 2, "p-timeout", "timeout", "Time in seconds after which to raise a dask.distributed.TimeoutError"]], "finch.scheduler.Client.compute": [[390, 3, 2, "p-actors", "actors", "Whether these tasks should exist on the worker as stateful actors. Specified on a global (True/False) or per-task ({'x': True, 'y': False}) basis. See actors for additional details."], [390, 3, 2, "p-allow_other_workers", "allow_other_workers", "Used with workers. Indicates whether or not the computations may be performed on workers that are not in the workers set(s)."], [390, 3, 2, "p-collections", "collections", "Collections like dask.array or dataframe or dask.value objects"], [390, 3, 2, "p-fifo_timeout", "fifo_timeout", "Allowed amount of time between calls to consider the same priority"], [390, 3, 2, "p-optimize_graph", "optimize_graph", "Whether or not to optimize the underlying graphs"], [390, 3, 2, "p-priority", "priority", "Optional prioritization of task.  Zero is default. Higher priorities take precedence"], [390, 3, 2, "p-resources", "resources", "Defines the resources each instance of this mapped task requires on the worker; e.g. {'GPU': 2}. See worker resources for details on defining resources."], [390, 3, 2, "p-retries", "retries", "Number of allowed automatic retries if computing a result fails"], [390, 3, 2, "p-sync", "sync", "Returns Futures if False (default) or concrete values if True"], [390, 3, 2, "p-traverse", "traverse", "By default dask traverses builtin python collections looking for dask objects passed to compute. For large collections this can be expensive. If none of the arguments contain any dask objects, set traverse=False to avoid doing this traversal."], [390, 3, 2, "p-workers", "workers", "A set of worker hostnames on which computations may be performed. Leave empty to default to all workers (common case)"]], "finch.scheduler.Client.current": [[391, 3, 2, "p-allow_global", "allow_global", "If True returns the default client"]], "finch.scheduler.Client.dump_cluster_state": [[393, 3, 2, "p-exclude", "exclude", "A collection of attribute names which are supposed to be excluded from the dump, e.g. to exclude code, tracebacks, logs, etc."], [393, 3, 2, "p-filename", "filename", "The path or URL to write to. The appropriate file suffix (.msgpack.gz or .yaml) will be appended automatically."], [393, 3, 2, "p-format", "format", "Either \"msgpack\" or \"yaml\". If msgpack is used (default), the output will be stored in a gzipped file as msgpack."], [393, 3, 2, "p-write_from_scheduler", "write_from_scheduler", "If None (default), infer based on whether filename looks like a URL or a local path: True if the filename contains :// (like s3://my-bucket/cluster-dump), False otherwise (like local_dir/cluster-dump)."]], "finch.scheduler.Client.futures_of": [[394, 3, 2, "p-futures", "futures", "The futures"]], "finch.scheduler.Client.gather": [[395, 3, 2, "p-asynchronous", "asynchronous", "If True the client is in asynchronous mode"], [395, 3, 2, "p-direct", "direct", "Whether or not to connect directly to the workers, or to ask the scheduler to serve as intermediary.  This can also be set when creating the Client."], [395, 3, 2, "p-errors", "errors", "Either 'raise' or 'skip' if we should raise if a future has erred or skip its inclusion in the output collection"], [395, 3, 2, "p-futures", "futures", "This can be a possibly nested collection of Future objects. Collections can be lists, sets, or dictionaries"]], "finch.scheduler.Client.get": [[396, 3, 2, "p-actors", "actors", "Whether these tasks should exist on the worker as stateful actors. Specified on a global (True/False) or per-task ({'x': True, 'y': False}) basis. See actors for additional details."], [396, 3, 2, "p-allow_other_workers", "allow_other_workers", "Used with workers. Indicates whether or not the computations may be performed on workers that are not in the workers set(s)."], [396, 3, 2, "p-asynchronous", "asynchronous", "If True the client is in asynchronous mode"], [396, 3, 2, "p-direct", "direct", "Whether or not to connect directly to the workers, or to ask the scheduler to serve as intermediary.  This can also be set when creating the Client."], [396, 3, 2, "p-dsk", "dsk", ""], [396, 3, 2, "p-fifo_timeout", "fifo_timeout", "Allowed amount of time between calls to consider the same priority"], [396, 3, 2, "p-keys", "keys", ""], [396, 3, 2, "p-priority", "priority", "Optional prioritization of task.  Zero is default. Higher priorities take precedence"], [396, 3, 2, "p-resources", "resources", "Defines the resources each instance of this mapped task requires on the worker; e.g. {'GPU': 2}. See worker resources for details on defining resources."], [396, 3, 2, "p-retries", "retries", "Number of allowed automatic retries if computing a result fails"], [396, 3, 2, "p-sync", "sync", "Returns Futures if False or concrete values if True (default)."], [396, 3, 2, "p-workers", "workers", "A set of worker addresses or hostnames on which computations may be performed. Leave empty to default to all workers (common case)"]], "finch.scheduler.Client.get_dataset": [[397, 3, 2, "p-default", "default", "optional, not set by default If set, do not raise a KeyError if the name is not present but return this default"], [397, 3, 2, "p-kwargs", "kwargs", "additional keyword arguments to _get_dataset"], [397, 3, 2, "p-name", "name", "name of the dataset to retrieve"]], "finch.scheduler.Client.get_events": [[398, 3, 2, "p-topic", "topic", "Name of topic log to retrieve events for. If no topic is provided, then logs for all topics will be returned."]], "finch.scheduler.Client.get_metadata": [[400, 3, 2, "p-default", "default", "If the key does not exist then return this value instead. If not provided then this raises a KeyError if the key is not present"], [400, 3, 2, "p-keys", "keys", "Key to access.  If a list then gets within a nested collection"]], "finch.scheduler.Client.get_scheduler_logs": [[401, 3, 2, "p-n", "n", "Number of logs to retrieve.  Maxes out at 10000 by default, configurable via the distributed.admin.log-length configuration value."]], "finch.scheduler.Client.get_task_stream": [[402, 3, 2, "p-bokeh_resources", "bokeh_resources", "Specifies if the resource component is INLINE or CDN"], [402, 3, 2, "p-count", "count", "The number of desired records, ignored if both start and stop are specified"], [402, 3, 2, "p-filename", "filename", "The filename to save to if you set plot='save'"], [402, 3, 2, "p-plot", "plot", "If true then also return a Bokeh figure If plot == 'save' then save the figure to a file"], [402, 3, 2, "p-start", "start", "When you want to start recording If a number it should be the result of calling time() If a string then it should be a time difference before now, like '60s' or '500 ms'"], [402, 3, 2, "p-stop", "stop", "When you want to stop recording"]], "finch.scheduler.Client.get_versions": [[403, 3, 2, "p-check", "check", "raise ValueError if all required & optional packages do not match"], [403, 3, 2, "p-packages", "packages", "Extra package names to check"]], "finch.scheduler.Client.get_worker_logs": [[404, 3, 2, "p-n", "n", "Number of logs to retrieve.  Maxes out at 10000 by default, configurable via the distributed.admin.log-length configuration value."], [404, 3, 2, "p-nanny", "nanny", "Whether to get the logs from the workers (False) or the nannies (True). If specified, the addresses in workers should still be the worker addresses, not the nanny addresses."], [404, 3, 2, "p-workers", "workers", "List of worker addresses to retrieve.  Gets all workers by default."]], "finch.scheduler.Client.has_what": [[405, 3, 2, "p-workers", "workers", "A list of worker addresses, defaults to all"]], "finch.scheduler.Client.log_event": [[408, 3, 2, "p-msg", "msg", "Event message to log. Note this must be msgpack serializable."], [408, 3, 2, "p-topic", "topic", "Name of the topic under which to log an event. To log the same event under multiple topics, pass a list of topic names."]], "finch.scheduler.Client.map": [[410, 3, 2, "p-actor", "actor", "Whether these tasks should exist on the worker as stateful actors. See actors for additional details."], [410, 3, 2, "p-actors", "actors", "Alias for actor"], [410, 3, 2, "p-allow_other_workers", "allow_other_workers", "Used with workers. Indicates whether or not the computations may be performed on workers that are not in the workers set(s)."], [410, 3, 2, "p-batch_size", "batch_size", "Submit tasks to the scheduler in batches of (at most) batch_size. Larger batch sizes can be useful for very large iterables, as the cluster can start processing tasks while later ones are submitted asynchronously."], [410, 3, 2, "p-fifo_timeout", "fifo_timeout", "Allowed amount of time between calls to consider the same priority"], [410, 3, 2, "p-func", "func", "Callable to be scheduled for execution. If func returns a coroutine, it will be run on the main event loop of a worker. Otherwise func will be run in a worker's task executor pool (see Worker.executors for more information.)"], [410, 3, 2, "p-iterables", "iterables", "List-like objects to map over.  They should have the same length."], [410, 3, 2, "p-key", "key", "Prefix for task names if string.  Explicit names if list."], [410, 3, 2, "p-priority", "priority", "Optional prioritization of task.  Zero is default. Higher priorities take precedence"], [410, 3, 2, "p-pure", "pure", "Whether or not the function is pure.  Set pure=False for impure functions like np.random.random. See pure functions for more details."], [410, 3, 2, "p-resources", "resources", "Defines the resources each instance of this mapped task requires on the worker; e.g. {'GPU': 2}. See worker resources for details on defining resources."], [410, 3, 2, "p-retries", "retries", "Number of allowed automatic retries if a task fails"], [410, 3, 2, "p-workers", "workers", "A set of worker hostnames on which computations may be performed. Leave empty to default to all workers (common case)"]], "finch.scheduler.Client.nbytes": [[411, 3, 2, "p-keys", "keys", "A list of keys, defaults to all keys"], [411, 3, 2, "p-summary", "summary", "Summarize keys into key types"]], "finch.scheduler.Client.ncores": [[412, 3, 2, "p-workers", "workers", "A list of workers that we care about specifically. Leave empty to receive information about all workers."]], "finch.scheduler.Client.normalize_collection": [[413, 3, 2, "p-collection", "collection", "Collection like dask.array or dataframe or dask.value objects"]], "finch.scheduler.Client.nthreads": [[414, 3, 2, "p-workers", "workers", "A list of workers that we care about specifically. Leave empty to receive information about all workers."]], "finch.scheduler.Client.persist": [[415, 3, 2, "p-actors", "actors", "Whether these tasks should exist on the worker as stateful actors. Specified on a global (True/False) or per-task ({'x': True, 'y': False}) basis. See actors for additional details."], [415, 3, 2, "p-allow_other_workers", "allow_other_workers", "Used with workers. Indicates whether or not the computations may be performed on workers that are not in the workers set(s)."], [415, 3, 2, "p-collections", "collections", "Collections like dask.array or dataframe or dask.value objects"], [415, 3, 2, "p-fifo_timeout", "fifo_timeout", "Allowed amount of time between calls to consider the same priority"], [415, 3, 2, "p-optimize_graph", "optimize_graph", "Whether or not to optimize the underlying graphs"], [415, 3, 2, "p-priority", "priority", "Optional prioritization of task.  Zero is default. Higher priorities take precedence"], [415, 3, 2, "p-resources", "resources", "Defines the resources each instance of this mapped task requires on the worker; e.g. {'GPU': 2}. See worker resources for details on defining resources."], [415, 3, 2, "p-retries", "retries", "Number of allowed automatic retries if computing a result fails"], [415, 3, 2, "p-workers", "workers", "A set of worker hostnames on which computations may be performed. Leave empty to default to all workers (common case)"]], "finch.scheduler.Client.processing": [[417, 3, 2, "p-workers", "workers", "A list of worker addresses, defaults to all"]], "finch.scheduler.Client.profile": [[418, 3, 2, "p-filename", "filename", "Filename to save the plot"], [418, 3, 2, "p-key", "key", "Key prefix to select, this is typically a function name like 'inc' Leave as None to collect all data"], [418, 3, 2, "p-plot", "plot", "Whether or not to return a plot object"], [418, 3, 2, "p-scheduler", "scheduler", "If true, return the profile information from the scheduler's administrative thread rather than the workers. This is useful when profiling Dask's scheduling itself."], [418, 3, 2, "p-server", "server", "If true, return the profile of the worker's administrative thread rather than the worker threads. This is useful when profiling Dask itself, rather than user code."], [418, 3, 2, "p-start", "start", ""], [418, 3, 2, "p-stop", "stop", ""], [418, 3, 2, "p-workers", "workers", "List of workers to restrict profile information"]], "finch.scheduler.Client.publish_dataset": [[419, 3, 2, "p-args", "args", ""], [419, 3, 2, "p-kwargs", "kwargs", "named collections to publish on the scheduler"]], "finch.scheduler.Client.rebalance": [[420, 3, 2, "p-futures", "futures", "A list of futures to balance, defaults all data"], [420, 3, 2, "p-workers", "workers", "A list of workers on which to balance, defaults to all workers"]], "finch.scheduler.Client.register_scheduler_plugin": [[421, 3, 2, "p-idempotent", "idempotent", "Do not re-register if a plugin of the given name already exists."], [421, 3, 2, "p-name", "name", "Name for the plugin; if None, a name is taken from the plugin instance or automatically generated if not present."], [421, 3, 2, "p-plugin", "plugin", "SchedulerPlugin instance to pass to the scheduler."]], "finch.scheduler.Client.register_worker_callbacks": [[422, 3, 2, "p-setup", "setup", "Function to register and run on all workers"]], "finch.scheduler.Client.register_worker_plugin": [[423, 3, 2, "p-name", "name", "A name for the plugin. Registering a plugin with the same name will have no effect. If plugin has no name attribute a random name is used."], [423, 3, 2, "p-nanny", "nanny", "Whether to register the plugin with workers or nannies."], [423, 3, 2, "p-plugin", "plugin", "WorkerPlugin or NannyPlugin instance to register."]], "finch.scheduler.Client.replicate": [[424, 3, 2, "p-branching_factor", "branching_factor", "The number of workers that can copy data in each generation"], [424, 3, 2, "p-futures", "futures", "Futures we wish to replicate"], [424, 3, 2, "p-n", "n", "Number of processes on the cluster on which to replicate the data. Defaults to all."], [424, 3, 2, "p-workers", "workers", "Workers on which we want to restrict the replication. Defaults to all."]], "finch.scheduler.Client.restart": [[425, 3, 2, "p-timeout", "timeout", "How long to wait for workers to shut down and come back, if wait_for_workers is True, otherwise just how long to wait for workers to shut down. Raises asyncio.TimeoutError if this is exceeded."], [425, 3, 2, "p-wait_for_workers", "wait_for_workers", "Whether to wait for all workers to reconnect, or just for them to shut down (default True). Use restart(wait_for_workers=False) combined with Client.wait_for_workers() for granular control over how many workers to wait for."]], "finch.scheduler.Client.restart_workers": [[426, 3, 2, "p-timeout", "timeout", "Number of seconds to wait"], [426, 3, 2, "p-workers", "workers", "Workers to restart."]], "finch.scheduler.Client.retire_workers": [[427, 3, 2, "p-close_workers", "close_workers", ""], [427, 3, 2, "p-workers", "workers", ""]], "finch.scheduler.Client.retry": [[428, 3, 2, "p-asynchronous", "asynchronous", "If True the client is in asynchronous mode"], [428, 3, 2, "p-futures", "futures", "The list of Futures"]], "finch.scheduler.Client.run": [[429, 3, 2, "p-function", "function", "The function to run"], [429, 3, 2, "p-nanny", "nanny", "Whether to run function on the nanny. By default, the function is run on the worker process.  If specified, the addresses in workers should still be the worker addresses, not the nanny addresses."], [429, 3, 2, "p-on_error", "on_error", "If the function raises an error on a worker:"], [429, 3, 2, "p-wait", "wait", "If the function is asynchronous whether or not to wait until that function finishes."], [429, 3, 2, "p-workers", "workers", "Workers on which to run the function. Defaults to all known workers."]], "finch.scheduler.Client.run_on_scheduler": [[430, 3, 2, "p-function", "function", "The function to run on the scheduler process"]], "finch.scheduler.Client.scatter": [[431, 3, 2, "p-asynchronous", "asynchronous", "If True the client is in asynchronous mode"], [431, 3, 2, "p-broadcast", "broadcast", "Whether to send each data element to all workers. By default we round-robin based on number of cores."], [431, 3, 2, "p-data", "data", "Data to scatter out to workers.  Output type matches input type."], [431, 3, 2, "p-direct", "direct", "Whether or not to connect directly to the workers, or to ask the scheduler to serve as intermediary.  This can also be set when creating the Client."], [431, 3, 2, "p-hash", "hash", "Whether or not to hash data to determine key. If False then this uses a random key"], [431, 3, 2, "p-timeout", "timeout", "Time in seconds after which to raise a dask.distributed.TimeoutError"], [431, 3, 2, "p-workers", "workers", "Optionally constrain locations of data. Specify workers as hostname/port pairs, e.g. ('127.0.0.1', 8787)."]], "finch.scheduler.Client.submit": [[437, 3, 2, "p-actor", "actor", "Whether this task should exist on the worker as a stateful actor. See actors for additional details."], [437, 3, 2, "p-actors", "actors", "Alias for actor"], [437, 3, 2, "p-allow_other_workers", "allow_other_workers", "Used with workers. Indicates whether or not the computations may be performed on workers that are not in the workers set(s)."], [437, 3, 2, "p-fifo_timeout", "fifo_timeout", "Allowed amount of time between calls to consider the same priority"], [437, 3, 2, "p-func", "func", "Callable to be scheduled as func(*args **kwargs). If func returns a coroutine, it will be run on the main event loop of a worker. Otherwise func will be run in a worker's task executor pool (see Worker.executors for more information.)"], [437, 3, 2, "p-key", "key", "Unique identifier for the task.  Defaults to function-name and hash"], [437, 3, 2, "p-priority", "priority", "Optional prioritization of task.  Zero is default. Higher priorities take precedence"], [437, 3, 2, "p-pure", "pure", "Whether or not the function is pure.  Set pure=False for impure functions like np.random.random. See pure functions for more details."], [437, 3, 2, "p-resources", "resources", "Defines the resources each instance of this mapped task requires on the worker; e.g. {'GPU': 2}. See worker resources for details on defining resources."], [437, 3, 2, "p-retries", "retries", "Number of allowed automatic retries if the task fails"], [437, 3, 2, "p-workers", "workers", "A set of worker addresses or hostnames on which computations may be performed. Leave empty to default to all workers (common case)"]], "finch.scheduler.Client.subscribe_topic": [[438, 3, 2, "p-handler", "handler", "A handler called for every received event. The handler must accept a single argument event which is a tuple (timestamp, msg) where timestamp refers to the clock on the scheduler."], [438, 3, 2, "p-topic", "topic", "The topic name"]], "finch.scheduler.Client.unpublish_dataset": [[439, 3, 2, "p-name", "name", "The name of the dataset to unpublish"]], "finch.scheduler.Client.unregister_worker_plugin": [[440, 3, 2, "p-name", "name", "Name of the plugin to unregister. See the Client.register_worker_plugin() docstring for more information."]], "finch.scheduler.Client.upload_file": [[442, 3, 2, "p-filename", "filename", "Filename of .py, .egg or .zip file to send to workers"]], "finch.scheduler.Client.wait_for_workers": [[443, 3, 2, "p-n_workers", "n_workers", "The number of workers"], [443, 3, 2, "p-timeout", "timeout", "Time in seconds after which to raise a dask.distributed.TimeoutError"]], "finch.scheduler.Client.who_has": [[444, 3, 2, "p-futures", "futures", "A list of futures, defaults to all data"]], "finch.scheduler.Client.write_scheduler_file": [[445, 3, 2, "p-scheduler_file", "scheduler_file", "Path to a write the scheduler file."]], "finch.scheduler.Cluster": [[447, 1, 1, "", "__eq__", "Return self==value."], [448, 1, 1, "", "__hash__", "Return hash(self)."], [449, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [450, 1, 1, "", "__repr__", "Return repr(self)."], [451, 1, 1, "", "adapt", "Turn on adaptivity"], [452, 1, 1, "", "close", ""], [453, 5, 1, "", "dashboard_link", ""], [454, 1, 1, "", "get_client", "Return client for the cluster"], [455, 1, 1, "", "get_logs", "Return logs for the cluster, scheduler and workers"], [456, 1, 1, "", "logs", ""], [457, 5, 1, "", "loop", ""], [458, 5, 1, "", "name", ""], [459, 5, 1, "", "observed", ""], [460, 5, 1, "", "plan", ""], [461, 5, 1, "", "requested", ""], [462, 1, 1, "", "scale", "Scale cluster to n workers"], [463, 5, 1, "", "scheduler_address", ""]], "finch.scheduler.Cluster.get_logs": [[455, 3, 2, "p-cluster", "cluster", "Whether or not to collect logs for the cluster manager"], [455, 3, 2, "p-scheduler", "scheduler", "Whether or not to collect logs for the scheduler"], [455, 3, 2, "p-workers", "workers", "A list of worker addresses to select. Defaults to all workers if True or no workers if False"]], "finch.scheduler.Cluster.scale": [[462, 3, 2, "p-n", "n", "Target number of workers"]], "finch.scheduler.ClusterConfig": [[465, 1, 1, "", "__eq__", "Return self==value."], [466, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [467, 1, 1, "", "__repr__", "Return repr(self)."], [468, 2, 1, "", "cores_per_worker", "The number of cores available per worker"], [469, 2, 1, "", "exclusive_jobs", "Toggle whether to use a full node exclusively for one job."], [470, 2, 1, "", "omp_parallelism", "Toggle whether the cores of the worker should be reserved to the implementation of the task. If true, a worker thinks it has only one one thread available and won't run tasks in parallel. Instead, zebra is configured with the given number of threads."], [471, 2, 1, "", "queuing", "If True, queuing will be used by dask. If False, it will be disabled."], [472, 2, 1, "", "workers_per_job", "The number of workers to spawn per SLURM job"]], "finch.scheduler.SLURMCluster": [[474, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [475, 1, 1, "", "adapt", "Scale Dask cluster automatically based on scheduler activity."], [476, 5, 1, "", "asynchronous", "Are we running in the event loop?"], [477, 1, 1, "", "from_name", "Create an instance of this class to represent an existing cluster by name."], [478, 2, 1, "", "job_cls", "alias of SLURMJob"], [494, 5, 1, "", "job_header", ""], [495, 5, 1, "", "job_name", ""], [496, 1, 1, "", "job_script", ""], [497, 1, 1, "", "new_worker_spec", "Return name and spec for the next worker"], [498, 5, 1, "", "plan", ""], [499, 5, 1, "", "requested", ""], [500, 1, 1, "", "scale", "Scale cluster to specified configurations."], [501, 1, 1, "", "scale_down", ""], [502, 1, 1, "", "scale_up", "Scale cluster to n workers"], [503, 1, 1, "", "sync", "Call func with args synchronously or asynchronously depending on the calling context"]], "finch.scheduler.SLURMCluster.adapt": [[475, 3, 2, "p-maximum_jobs", "maximum_jobs", "Maximum number of jobs"], [475, 3, 2, "p-minimum_jobs", "minimum_jobs", "Minimum number of jobs"]], "finch.scheduler.SLURMCluster.job_cls": [[479, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [480, 1, 1, "", "__repr__", "Return repr(self)."], [481, 2, 1, "", "cancel_command", ""], [482, 1, 1, "", "close", "Close the process"], [483, 2, 1, "", "config_name", ""], [484, 1, 1, "", "default_config_name", ""], [485, 1, 1, "", "finished", "Wait until the server has finished"], [486, 1, 1, "", "job_file", "Write job submission script to temporary file"], [487, 2, 1, "", "job_id_regexp", ""], [488, 1, 1, "", "job_script", "Construct a job submission script"], [489, 1, 1, "", "start", "Start workers and point them to our local scheduler"], [490, 5, 1, "", "status", ""], [491, 2, 1, "", "submit_command", ""], [492, 5, 1, "", "worker_process_memory", ""], [493, 5, 1, "", "worker_process_threads", ""]], "finch.scheduler.SLURMCluster.scale": [[500, 3, 2, "p-cores", "cores", "Target number of cores"], [500, 3, 2, "p-jobs", "jobs", "Target number of jobs"], [500, 3, 2, "p-memory", "memory", "Target amount of memory"], [500, 3, 2, "p-n", "n", "Target number of workers"]], "finch.scheduler.SLURMCluster.scale_up": [[502, 3, 2, "p-n", "n", "Target number of workers"]], "finch.scheduler.parse_slurm_time": [[509, 3, 2, "p-t", "t", "The time in SLURM format"]], "finch.scheduler.start_scheduler": [[511, 3, 2, "p-cluster_args", "cluster_args", "The positional arguments passed to finch.start_slurm_cluster()"], [511, 3, 2, "p-cluster_kwargs", "cluster_kwargs", "The keyword arguments passed to finch.start_slurm_cluster()"], [511, 3, 2, "p-debug", "debug", "If False, a new SLURM cluster will be started and a client connected to the new cluster is returned. If True, None is returned and dask is configured to run a synchronous scheduler."]], "finch.scheduler.start_slurm_cluster": [[512, 3, 2, "p-cfg", "cfg", "The configuration of the cluster to start"]], "finch.scheduler.timedelta": [[514, 1, 1, "", "__abs__", "abs(self)"], [515, 1, 1, "", "__add__", "Return self+value."], [516, 1, 1, "", "__bool__", "True if self else False"], [517, 1, 1, "", "__divmod__", "Return divmod(self, value)."], [518, 1, 1, "", "__eq__", "Return self==value."], [519, 1, 1, "", "__floordiv__", "Return self//value."], [520, 1, 1, "", "__ge__", "Return self>=value."], [521, 1, 1, "", "__getattribute__", "Return getattr(self, name)."], [522, 1, 1, "", "__gt__", "Return self>value."], [523, 1, 1, "", "__hash__", "Return hash(self)."], [524, 1, 1, "", "__le__", "Return self<=value."], [525, 1, 1, "", "__lt__", "Return self<value."], [526, 1, 1, "", "__mod__", "Return self%value."], [527, 1, 1, "", "__mul__", "Return self*value."], [528, 1, 1, "", "__ne__", "Return self!=value."], [529, 1, 1, "", "__neg__", "-self"], [530, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [531, 1, 1, "", "__pos__", "+self"], [532, 1, 1, "", "__radd__", "Return value+self."], [533, 1, 1, "", "__rdivmod__", "Return divmod(value, self)."], [534, 1, 1, "", "__repr__", "Return repr(self)."], [535, 1, 1, "", "__rfloordiv__", "Return value//self."], [536, 1, 1, "", "__rmod__", "Return value%self."], [537, 1, 1, "", "__rmul__", "Return value*self."], [538, 1, 1, "", "__rsub__", "Return value-self."], [539, 1, 1, "", "__rtruediv__", "Return value/self."], [540, 1, 1, "", "__str__", "Return str(self)."], [541, 1, 1, "", "__sub__", "Return self-value."], [542, 1, 1, "", "__truediv__", "Return self/value."], [543, 2, 1, "", "days", "Number of days."], [544, 2, 1, "", "max", ""], [545, 2, 1, "", "microseconds", "Number of microseconds (>= 0 and less than 1 second)."], [546, 2, 1, "", "min", ""], [547, 2, 1, "", "resolution", ""], [548, 2, 1, "", "seconds", "Number of seconds (>= 0 and less than 1 day)."], [549, 1, 1, "", "total_seconds", "Total seconds in the duration."]], "finch.util": [[552, 0, 1, "", "Config", "Base class for configuration classes. Classes inheriting from this class must be dataclasses (with the @dataclass decorator)."], [554, 6, 1, "", "ImgSuffix", "A literal for image file suffixes."], [555, 6, 1, "", "PathLike", "Type alias for path types, as recommended py PEP 519."], [556, 6, 1, "", "PbarArg", "Argument type for handling progress bars. Functions accepting the progress bar argument support outputting their progress via a tqdm progress bar. The argument can then either be a boolean, indicating that a new progress bar should be created, or no progress bar should be used at all, or it can be a preexisting progress bar which will be updated."], [557, 0, 1, "", "RandomWord", "The RandomWord class encapsulates multiple methods dealing with the generation of random words and lists of random words."], [563, 0, 1, "", "RecursiveNamespace", "A types.SimpleNamespace which can handle nested dictionaries."], [578, 0, 1, "", "TypeVar", "Type variable."], [585, 4, 1, "", "add_missing_properties", "Return x as a copy, with attributes from y added to x which were not already present."], [586, 4, 1, "", "arg2list", "Return a single-element list if x is not a list. Otherwise return x."], [587, 4, 1, "", "check_socket_open", "Return whether a port is in use / open (True) or not (False)."], [588, 4, 1, "", "clear_dir", "Removes the content of the given directory."], [589, 0, 1, "", "closing", "Context to automatically close something at the end of a block."], [595, 4, 1, "", "equals_not_none", "Compares the common properties of the two given objects. Return True if the not-None properties present in both object are all equal."], [596, 4, 1, "", "fill_none_properties", "Return x as a copy, where every attribute which is None is set to the attribute of y."], [597, 4, 1, "", "flat_list", "Creates a flat list from the argument. The argument can be any object. If it is not a list, a single-element list is returned. If it is a list, a flattened version of this list will be returned."], [598, 4, 1, "", "flatten_dict", "Flattens a dictionary. The keys of the inner dictionary are appended to the outer key with the given separator."], [599, 4, 1, "", "funcs_from_args", "Takes a function f and a list of arguments args and returns a list of functions which are the partial applications of f onto args."], [600, 4, 1, "", "get_absolute", "Return the abolute path in the given context if a relative path was given. If an absolute path is given, it is directly returned."], [601, 4, 1, "", "get_class_attribute_names", "Return the attribute names of a class."], [602, 4, 1, "", "get_class_attributes", "Return the class attributes of an object as a dictionary."], [603, 4, 1, "", "get_path", "Returns a new path by joining the given path arguments. If the directories do not exist yet, they will be created."], [604, 4, 1, "", "get_pbar", "Convenience function for handling progress bar arguments. This makes sure that a tqdm progress bar is returned if one is requested, or None."], [605, 4, 1, "", "get_primitive_attrs_from_dataclass", "Returns the flattened fields from a dataclass as primitives."], [606, 4, 1, "", "has_attributes", "Return true if y has the same not-None attributes as x."], [607, 4, 1, "", "inverse", "Returns the inverse dictionary of the input."], [608, 4, 1, "", "is_2d_list_of", "Type guard for checking lists of lists."], [609, 4, 1, "", "is_callable_list", "Type guard for checking that a list contains callable objects."], [610, 4, 1, "", "is_list_of", "Type guard for checking lists."], [611, 4, 1, "", "list_funcs_matching", "Returns a list of functions from a module matching the given parameters."], [612, 4, 1, "", "map_keys", "Returns a dictionary where the keys of d1 were mapped according to d2."], [613, 4, 1, "", "parse_bool", ""], [614, 4, 1, "", "random_entity_name", "Return a random name for an entity, such as a file or a variable."], [615, 4, 1, "", "recursive_update", "Returns a copy of d with its content replaced by updates wherever specified. Nested dictionaries won't be replaced, but updated recursively as specified by updates."], [616, 4, 1, "", "remove_if_exists", "Removes the given directory if it exists and returns the original path."], [617, 4, 1, "", "sig_matches_hint", "Return True if the function signature and the Callable type hint match."]], "finch.util.Config": [[553, 1, 1, "", "list_configs", "Returns a list of run configurations, which is the euclidean product between the given lists of individual configurations."]], "finch.util.RandomWord": [[558, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [559, 1, 1, "", "filter", "Return all existing words that match the criteria specified by the arguments."], [560, 1, 1, "", "random_words", "Generate a list of n random words specified by the amount parameter and fit the criteria specified."], [561, 1, 1, "", "read_words", "Will soon be deprecated. This method isn't meant to be public, but will remain for backwards compatibility. Developers: use _get_words_from_text_file internally instead."], [562, 1, 1, "", "word", "Returns a random word that fits the criteria specified by the arguments."]], "finch.util.RandomWord.filter": [[559, 3, 2, "p-ends_with", "ends_with", "the string each word should end with. Defaults to \"\"."], [559, 3, 2, "p-include_categories", "include_categories", "a list of strings denoting a part of speech. Each word returned will be in the category of at least one part of speech. By default, all parts of speech are enabled. Defaults to None."], [559, 3, 2, "p-include_parts_of_speech", "include_parts_of_speech", "Same as include_categories, but will soon be deprecated."], [559, 3, 2, "p-regex", "regex", "a custom regular expression which each word must fully match (re.fullmatch). Defaults to None."], [559, 3, 2, "p-starts_with", "starts_with", "the string each word should start with. Defaults to \"\"."], [559, 3, 2, "p-word_max_length", "word_max_length", "the maximum length of each word. Defaults to None."], [559, 3, 2, "p-word_min_length", "word_min_length", "the minimum length of each word. Defaults to None."]], "finch.util.RandomWord.random_words": [[560, 3, 2, "p-amount", "amount", "the amount of words to generate. Defaults to 1."], [560, 3, 2, "p-ends_with", "ends_with", "the string each word should end with. Defaults to \"\"."], [560, 3, 2, "p-include_categories", "include_categories", "a list of strings denoting a part of speech. Each word returned will be in the category of at least one part of speech. By default, all parts of speech are enabled. Defaults to None."], [560, 3, 2, "p-include_parts_of_speech", "include_parts_of_speech", "Same as include_categories, but will soon be deprecated."], [560, 3, 2, "p-regex", "regex", "a custom regular expression which each word must fully match (re.fullmatch). Defaults to None."], [560, 3, 2, "p-return_less_if_necessary", "return_less_if_necessary", "if set to True, if there aren't enough words to statisfy the amount, instead of raising a NoWordsToChoseFrom exception, return all words that did statisfy the original query."], [560, 3, 2, "p-starts_with", "starts_with", "the string each word should start with. Defaults to \"\"."], [560, 3, 2, "p-word_max_length", "word_max_length", "the maximum length of each word. Defaults to None."], [560, 3, 2, "p-word_min_length", "word_min_length", "the minimum length of each word. Defaults to None."]], "finch.util.RandomWord.word": [[562, 3, 2, "p-ends_with", "ends_with", "the string the word should end with. Defaults to \"\"."], [562, 3, 2, "p-include_categories", "include_categories", "a list of strings denoting a part of speech. Each word returned will be in the category of at least one part of speech. By default, all parts of speech are enabled. Defaults to None."], [562, 3, 2, "p-include_parts_of_speech", "include_parts_of_speech", "Same as include_categories, but will soon be deprecated."], [562, 3, 2, "p-regex", "regex", "a custom regular expression which each word must fully match (re.fullmatch). Defaults to None."], [562, 3, 2, "p-starts_with", "starts_with", "the string each word should start with. Defaults to \"\"."], [562, 3, 2, "p-word_max_length", "word_max_length", "the maximum length of the word. Defaults to None."], [562, 3, 2, "p-word_min_length", "word_min_length", "the minimum length of the word. Defaults to None."]], "finch.util.RecursiveNamespace": [[564, 1, 1, "", "__delattr__", "Implement delattr(self, name)."], [565, 1, 1, "", "__eq__", "Return self==value."], [566, 1, 1, "", "__ge__", "Return self>=value."], [567, 1, 1, "", "__getattribute__", "Return getattr(self, name)."], [568, 1, 1, "", "__gt__", "Return self>value."], [569, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [570, 1, 1, "", "__le__", "Return self<=value."], [571, 1, 1, "", "__lt__", "Return self<value."], [572, 1, 1, "", "__ne__", "Return self!=value."], [573, 1, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [574, 1, 1, "", "__reduce__", "Return state information for pickling"], [575, 1, 1, "", "__repr__", "Return repr(self)."], [576, 1, 1, "", "__setattr__", "Implement setattr(self, name, value)."], [577, 1, 1, "", "map_entry", ""]], "finch.util.TypeVar": [[579, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [580, 1, 1, "", "__init_subclass__", "This method is called when a class is subclassed."], [581, 1, 1, "", "__or__", "Return self|value."], [582, 1, 1, "", "__reduce__", "Helper for pickle."], [583, 1, 1, "", "__repr__", "Return repr(self)."], [584, 1, 1, "", "__ror__", "Return value|self."]], "finch.util.check_socket_open": [[587, 3, 2, "p-host", "host", "The hostname"], [587, 3, 2, "p-port", "port", "The port to check"]], "finch.util.closing": [[590, 2, 1, "", "__class_getitem__", ""], [591, 1, 1, "", "__enter__", "Return self upon entering the runtime context."], [592, 1, 1, "", "__exit__", "Raise any exception triggered within the runtime context."], [593, 1, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [594, 1, 1, "", "__subclasshook__", "Abstract classes can override this to customize issubclass()."]], "finch.util.flat_list": [[597, 3, 2, "p-arg", "arg", "The argument to flatten"]], "finch.util.get_absolute": [[600, 3, 2, "p-context", "context", "The context for a relative path. Defaults to the current working directory."], [600, 3, 2, "p-path", "path", "The absolute or relative path."]], "finch.util.get_class_attribute_names": [[601, 3, 2, "p-cls", "cls", "The class to extract the attribute names from"]], "finch.util.get_pbar": [[604, 3, 2, "p-iterations", "iterations", "The number of iterations to perform if a new progress bar was requested."], [604, 3, 2, "p-pbar", "pbar", "The progress bar argument"]], "finch.util.has_attributes": [[606, 3, 2, "p-excludes", "excludes", "Attributes to exclude from the comparison. Defaults to no exclusions."]], "finch.util.random_entity_name": [[614, 3, 2, "p-excludes", "excludes", "A list of words to exclude from generation. Defaults to an empty list."]], "finch.util.recursive_update": [[615, 3, 2, "p-d", "d", "The dictionary to update"], [615, 3, 2, "p-updates", "updates", "The updates to perform recursively"]], "finch.util.sig_matches_hint": [[617, 3, 2, "p-hint", "hint", "The type hint"], [617, 3, 2, "p-sig", "sig", "The function signature"]], "zebra": [[618, 4, 1, "", "brn", "Computes the bulk richardson number."], [619, 4, 1, "", "set_threads", "Set the number of threads to use in parallel computations."], [620, 4, 1, "", "thetav", "Computes the virtual potential temperature for the bulk richardson number."]], "": [[627, 7, 1, "confval-0", "config_dir", "string"], [627, 7, 1, 1, "config_path", "string"], [627, 7, 1, 1, "debug_config_path", "string"], [627, 7, 1, 1, "debug_mode", "bool"], [627, 7, 1, 1, "dir", "string"], [627, 7, 1, 1, "grib_definition_path", "string"], [627, 7, 1, 1, "grib_index_dir", "string"], [627, 7, 1, 1, "input_store", "string"], [627, 7, 1, 1, "log_dir", "string"], [627, 7, 1, 1, "log_format", "string"], [627, 7, 1, 1, "log_level", "string, optional"], [627, 7, 1, 1, "plot_dir", "string"], [627, 7, 1, 1, "pref_report_dir", "string"], [627, 7, 1, 1, "results_dir", "string"], [627, 7, 1, 1, "scaling_timeout", "int"], [627, 7, 1, 1, "scratch_dir", "string"], [627, 7, 1, 1, "tmp_dir", "string"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:parameter", "4": "py:function", "5": "py:property", "6": "py:data", "7": "std:confval"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["std", "confval", "configuration value"]}, "titleterms": {"api": 0, "gener": 0, "data": [0, 623, 627], "handl": 0, "input": [0, 630, 631], "manag": [0, 631], "experi": [0, 627, 629, 630], "evalu": [0, 627, 628, 630], "plot": [0, 628], "dask": [0, 629], "configur": [0, 627, 629, 633], "util": 0, "function": 0, "class": [0, 158, 159, 473, 629], "public": [1, 12, 19, 23, 34, 46, 61, 102, 139, 148, 158, 159, 174, 296, 343, 380, 464, 478, 513, 589], "member": [1, 12, 19, 23, 34, 46, 61, 102, 139, 148, 158, 159, 174, 296, 343, 380, 464, 478, 513, 589], "method": [1, 12, 19, 23, 34, 46, 61, 97, 102, 139, 155, 158, 159, 174, 296, 318, 343, 380, 446, 464, 473, 478, 513, 552, 557, 563, 578, 589], "constructor": [1, 12, 23, 34, 46, 61, 102, 158, 159, 174, 318, 380, 446, 464, 473, 478, 513, 557, 563, 578, 589], "string": [1, 12, 23, 34, 46, 159, 318, 380, 446, 464, 473, 478, 513, 563, 578], "represent": [1, 12, 23, 34, 46, 159, 318, 380, 446, 464, 473, 478, 513, 563, 578], "special": [1, 12, 19, 23, 34, 46, 61, 102, 139, 155, 159, 296, 318, 446, 464, 473, 513, 563, 578, 589], "see": [43, 56, 311, 380, 388, 390, 395, 396, 397, 400, 402, 405, 407, 410, 411, 412, 413, 414, 415, 417, 419, 423, 424, 425, 426, 427, 430, 431, 433, 434, 437, 438, 439, 440, 441, 444, 475, 497, 604], "also": [43, 56, 311, 380, 388, 390, 395, 396, 397, 400, 402, 405, 407, 410, 411, 412, 413, 414, 415, 417, 419, 423, 424, 425, 426, 427, 430, 431, 433, 434, 437, 438, 439, 440, 441, 444, 475, 497, 604], "properti": [61, 318, 380, 446, 473, 478], "warn": [420, 623, 627], "note": [424, 426, 431, 629, 630, 633], "import": [557, 559], "ad": 621, "new": [621, 631], "oper": [621, 624, 629, 630], "setup": 622, "develop": 622, "environ": 622, "instal": [622, 625], "finch": [622, 623, 633], "distribut": 623, "process": 623, "icon": 623, "overview": 623, "thetav": 624, "brn": [624, 627], "conda": 625, "mamba": 625, "pip": 625, "introduct": 626, "specifi": 627, "config": 627, "file": 627, "content": 627, "valu": 627, "global": 627, "run": [627, 629, 630, 633], "The": 628, "result": 628, "dataset": 628, "runtim": [628, 629], "measur": 629, "object": 629, "first": 630, "step": 630, "implement": 630, "an": 630, "tip": 630, "defin": 630, "attent": [630, 633], "full": 630, "script": 630, "creat": 631, "version": 631, "retriev": 631, "us": 632, "librari": 632, "debug": 633}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"API": [[0, "api"]], "General": [[0, "general"]], "Data Handling": [[0, "data-handling"]], "Input Management": [[0, "input-management"], [631, "input-management"]], "Experiments": [[0, "experiments"]], "Evaluation": [[0, "evaluation"], [628, "evaluation"]], "Plotting": [[0, "plotting"]], "Dask Configuration": [[0, "dask-configuration"]], "Utility Functions and Classes": [[0, "utility-functions-and-classes"]], "Public members": [[1, "public-members"], [12, "public-members"], [19, "public-members"], [23, "public-members"], [34, "public-members"], [46, "public-members"], [61, "public-members"], [102, "public-members"], [139, "public-members"], [148, "public-members"], [158, "public-members"], [159, "public-members"], [174, "public-members"], [296, "public-members"], [343, "public-members"], [380, "public-members"], [464, "public-members"], [478, "public-members"], [513, "public-members"], [589, "public-members"]], "Methods": [[1, "methods"], [23, "methods"], [34, "methods"], [61, "methods"], [97, "methods"], [102, "methods"], [139, "methods"], [158, "methods"], [159, "methods"], [174, "methods"], [343, "methods"], [380, "methods"], [446, "methods"], [464, "methods"], [473, "methods"], [478, "methods"], [513, "methods"], [552, "methods"], [557, "methods"], [563, "methods"]], "Constructors": [[1, "constructors"], [12, "constructors"], [23, "constructors"], [34, "constructors"], [46, "constructors"], [61, "constructors"], [102, "constructors"], [158, "constructors"], [159, "constructors"], [174, "constructors"], [318, "constructors"], [380, "constructors"], [446, "constructors"], [464, "constructors"], [473, "constructors"], [478, "constructors"], [513, "constructors"], [557, "constructors"], [563, "constructors"], [578, "constructors"], [589, "constructors"]], "String representation": [[1, "string-representation"], [12, "string-representation"], [23, "string-representation"], [34, "string-representation"], [46, "string-representation"], [159, "string-representation"], [318, "string-representation"], [380, "string-representation"], [446, "string-representation"], [464, "string-representation"], [473, "string-representation"], [478, "string-representation"], [513, "string-representation"], [563, "string-representation"], [578, "string-representation"]], "Special methods": [[1, "special-methods"], [12, "special-methods"], [19, "special-methods"], [23, "special-methods"], [34, "special-methods"], [46, "special-methods"], [61, "special-methods"], [102, "special-methods"], [139, "special-methods"], [155, "special-methods"], [159, "special-methods"], [296, "special-methods"], [318, "special-methods"], [446, "special-methods"], [464, "special-methods"], [473, "special-methods"], [513, "special-methods"], [563, "special-methods"], [578, "special-methods"], [589, "special-methods"]], "See also": [[43, null], [56, null], [311, null], [380, null], [388, null], [390, null], [395, null], [396, null], [397, null], [400, null], [402, null], [405, null], [407, null], [410, null], [411, null], [412, null], [413, null], [414, null], [415, null], [417, null], [419, null], [423, null], [424, null], [425, null], [426, null], [427, null], [430, null], [431, null], [433, null], [434, null], [437, null], [438, null], [439, null], [440, null], [441, null], [444, null], [475, null], [497, null], [604, null]], "Properties": [[61, "properties"], [318, "properties"], [380, "properties"], [446, "properties"], [473, "properties"], [478, "properties"]], "Classes": [[158, "classes"], [159, "classes"], [473, "classes"]], "Warning": [[420, null], [623, null], [627, null], [627, null], [627, null], [627, null], [627, null], [627, null]], "Note": [[424, null], [426, null], [431, null], [629, null], [630, null], [633, null]], "Important": [[557, null], [559, null]], "Adding new Operators": [[621, "adding-new-operators"]], "Setup": [[622, "setup"]], "Development Environment": [[622, "development-environment"]], "Installing finch": [[622, "installing-finch"]], "finch [distributed data processing for ICON data]": [[623, "finch-distributed-data-processing-for-icon-data"]], "Overview": [[623, "overview"]], "Operators": [[624, "operators"]], "THETAV": [[624, "thetav"]], "BRN": [[624, "brn"]], "Installation": [[625, "installation"]], "conda / mamba": [[625, "conda-mamba"]], "pip": [[625, "pip"]], "Introduction": [[626, "introduction"]], "Configuration": [[627, "configuration"], [633, "configuration"]], "Specifying Config Files": [[627, "specifying-config-files"]], "Config File Content": [[627, "config-file-content"]], "Configurable Values": [[627, "configurable-values"]], "[global]": [[627, "global"]], "[data]": [[627, "data"]], "[experiments]": [[627, "experiments"]], "[evaluation]": [[627, "evaluation"]], "[brn]": [[627, "brn"]], "[run]": [[627, "run"]], "The Results Dataset": [[628, "the-results-dataset"]], "Plotting Runtime Results": [[628, "plotting-runtime-results"]], "Running Experiments": [[629, "running-experiments"]], "Measuring Operator Runtimes": [[629, "measuring-operator-runtimes"]], "Dask Configurations": [[629, "dask-configurations"]], "Configuration Classes": [[629, "configuration-classes"]], "Runtime Objects": [[629, "runtime-objects"]], "First Steps": [[630, "first-steps"]], "Implementing an Operator": [[630, "implementing-an-operator"]], "Tip": [[630, null], [630, null]], "Defining Inputs": [[630, "defining-inputs"]], "Attention": [[630, null], [633, null]], "Running and Evaluating Experiments": [[630, "running-and-evaluating-experiments"]], "Full Script": [[630, "full-script"]], "Creating a new Input": [[631, "creating-a-new-input"]], "Creating new Versions": [[631, "creating-new-versions"]], "Retrieving Versions": [[631, "retrieving-versions"]], "Using the library": [[632, "using-the-library"]], "Running Finch": [[633, "running-finch"]], "Debugging": [[633, "debugging"]]}, "indexentries": {"config_dir": [[627, "confval-0"], [627, "confval-config_dir"]], "config_path": [[627, "confval-config_path"]], "configuration value": [[627, "confval-0"], [627, "confval-config_dir"], [627, "confval-config_path"], [627, "confval-debug_config_path"], [627, "confval-debug_mode"], [627, "confval-dir"], [627, "confval-grib_definition_path"], [627, "confval-grib_index_dir"], [627, "confval-input_store"], [627, "confval-log_dir"], [627, "confval-log_format"], [627, "confval-log_level"], [627, "confval-plot_dir"], [627, "confval-pref_report_dir"], [627, "confval-results_dir"], [627, "confval-scaling_timeout"], [627, "confval-scratch_dir"], [627, "confval-tmp_dir"]], "debug_config_path": [[627, "confval-debug_config_path"]], "debug_mode": [[627, "confval-debug_mode"]], "dir": [[627, "confval-dir"]], "grib_definition_path": [[627, "confval-grib_definition_path"]], "grib_index_dir": [[627, "confval-grib_index_dir"]], "input_store": [[627, "confval-input_store"]], "log_dir": [[627, "confval-log_dir"]], "log_format": [[627, "confval-log_format"]], "log_level": [[627, "confval-log_level"]], "plot_dir": [[627, "confval-plot_dir"]], "pref_report_dir": [[627, "confval-pref_report_dir"]], "results_dir": [[627, "confval-results_dir"]], "scaling_timeout": [[627, "confval-scaling_timeout"]], "scratch_dir": [[627, "confval-scratch_dir"]], "tmp_dir": [[627, "confval-tmp_dir"]]}, "docurls": ["api.html", "api/finch/DaskRunConfig.html", "api/finch/DaskRunConfig.__eq__.html", "api/finch/DaskRunConfig.__init__.html", "api/finch/DaskRunConfig.__repr__.html", "api/finch/DaskRunConfig.cleanup.html", "api/finch/DaskRunConfig.cluster_config.html", "api/finch/DaskRunConfig.construct_output.html", "api/finch/DaskRunConfig.create_report.html", "api/finch/DaskRunConfig.measure.html", "api/finch/DaskRunConfig.setup.html", "api/finch/DaskRunConfig.workers.html", "api/finch/DaskRuntime.html", "api/finch/DaskRuntime.__eq__.html", "api/finch/DaskRuntime.__init__.html", "api/finch/DaskRuntime.__repr__.html", "api/finch/DaskRuntime.graph_construction.html", "api/finch/DaskRuntime.optimization.html", "api/finch/DaskRuntime.serialization.html", "api/finch/DefaultOperator.html", "api/finch/DefaultOperator.__call__.html", "api/finch/DefaultOperator.__class_getitem__.html", "api/finch/DefaultOperator.__subclasshook__.html", "api/finch/OperatorRunConfig.html", "api/finch/OperatorRunConfig.__eq__.html", "api/finch/OperatorRunConfig.__init__.html", "api/finch/OperatorRunConfig.__repr__.html", "api/finch/OperatorRunConfig.construct_output.html", "api/finch/OperatorRunConfig.impl.html", "api/finch/OperatorRunConfig.input_obj.html", "api/finch/OperatorRunConfig.input_version.html", "api/finch/OperatorRunConfig.load_input.html", "api/finch/OperatorRunConfig.measure.html", "api/finch/OperatorRunConfig.store_output.html", "api/finch/RunConfig.html", "api/finch/RunConfig.__eq__.html", "api/finch/RunConfig.__init__.html", "api/finch/RunConfig.__repr__.html", "api/finch/RunConfig.cleanup.html", "api/finch/RunConfig.impl.html", "api/finch/RunConfig.iterations.html", "api/finch/RunConfig.load_input.html", "api/finch/RunConfig.measure.html", "api/finch/RunConfig.runtime_reduction.html", "api/finch/RunConfig.setup.html", "api/finch/RunConfig.warmup.html", "api/finch/Runtime.html", "api/finch/Runtime.__eq__.html", "api/finch/Runtime.__init__.html", "api/finch/Runtime.__repr__.html", "api/finch/Runtime.compute.html", "api/finch/Runtime.full.html", "api/finch/Runtime.input_loading.html", "api/finch/brn/brn.html", "api/finch/brn/get_brn_input.html", "api/finch/brn/get_repeated_brn.html", "api/finch/brn/get_repeated_brn_name.html", "api/finch/brn/list_brn_implementations.html", "api/finch/brn/list_implementations.html", "api/finch/brn/list_thetav_implementations.html", "api/finch/brn/thetav.html", "api/finch/config/ConfigParser.html", "api/finch/config/ConfigParser.BOOLEAN_STATES.html", "api/finch/config/ConfigParser.NONSPACECRE.html", "api/finch/config/ConfigParser.OPTCRE.html", "api/finch/config/ConfigParser.OPTCRE_NV.html", "api/finch/config/ConfigParser.SECTCRE.html", "api/finch/config/ConfigParser.__getitem__.html", "api/finch/config/ConfigParser.__init__.html", "api/finch/config/ConfigParser.__setitem__.html", "api/finch/config/ConfigParser.add_section.html", "api/finch/config/ConfigParser.clear.html", "api/finch/config/ConfigParser.converters.html", "api/finch/config/ConfigParser.defaults.html", "api/finch/config/ConfigParser.get.html", "api/finch/config/ConfigParser.getboolean.html", "api/finch/config/ConfigParser.getfloat.html", "api/finch/config/ConfigParser.getint.html", "api/finch/config/ConfigParser.has_option.html", "api/finch/config/ConfigParser.has_section.html", "api/finch/config/ConfigParser.items.html", "api/finch/config/ConfigParser.options.html", "api/finch/config/ConfigParser.optionxform.html", "api/finch/config/ConfigParser.pop.html", "api/finch/config/ConfigParser.popitem.html", "api/finch/config/ConfigParser.read.html", "api/finch/config/ConfigParser.read_dict.html", "api/finch/config/ConfigParser.read_file.html", "api/finch/config/ConfigParser.read_string.html", "api/finch/config/ConfigParser.readfp.html", "api/finch/config/ConfigParser.remove_option.html", "api/finch/config/ConfigParser.remove_section.html", "api/finch/config/ConfigParser.sections.html", "api/finch/config/ConfigParser.set.html", "api/finch/config/ConfigParser.setdefault.html", "api/finch/config/ConfigParser.update.html", "api/finch/config/ConfigParser.write.html", "api/finch/config/ExtendedInterpolation.html", "api/finch/config/ExtendedInterpolation.before_get.html", "api/finch/config/ExtendedInterpolation.before_read.html", "api/finch/config/ExtendedInterpolation.before_set.html", "api/finch/config/ExtendedInterpolation.before_write.html", "api/finch/config/StringIO.html", "api/finch/config/StringIO.__iter__.html", "api/finch/config/StringIO.__new__.html", "api/finch/config/StringIO.__next__.html", "api/finch/config/StringIO.close.html", "api/finch/config/StringIO.closed.html", "api/finch/config/StringIO.detach.html", "api/finch/config/StringIO.encoding.html", "api/finch/config/StringIO.errors.html", "api/finch/config/StringIO.fileno.html", "api/finch/config/StringIO.flush.html", "api/finch/config/StringIO.getvalue.html", "api/finch/config/StringIO.isatty.html", "api/finch/config/StringIO.line_buffering.html", "api/finch/config/StringIO.newlines.html", "api/finch/config/StringIO.read.html", "api/finch/config/StringIO.readable.html", "api/finch/config/StringIO.readline.html", "api/finch/config/StringIO.readlines.html", "api/finch/config/StringIO.seek.html", "api/finch/config/StringIO.seekable.html", "api/finch/config/StringIO.tell.html", "api/finch/config/StringIO.truncate.html", "api/finch/config/StringIO.writable.html", "api/finch/config/StringIO.write.html", "api/finch/config/StringIO.writelines.html", "api/finch/config/config.html", "api/finch/config/debug.html", "api/finch/config/expand.html", "api/finch/config/read_config.html", "api/finch/config/set_debug_mode.html", "api/finch/config/set_log_level.html", "api/finch/constants/P0.html", "api/finch/constants/PC_CP_D.html", "api/finch/constants/PC_G.html", "api/finch/constants/PC_R_D.html", "api/finch/constants/PC_R_V.html", "api/finch/data/Chunks.html", "api/finch/data/Chunks.__eq__.html", "api/finch/data/Chunks.__getitem__.html", "api/finch/data/Chunks.__subclasshook__.html", "api/finch/data/Chunks.get.html", "api/finch/data/Chunks.items.html", "api/finch/data/Chunks.keys.html", "api/finch/data/Chunks.values.html", "api/finch/data/DimOrder.html", "api/finch/data/Format.html", "api/finch/data/Format.FAKE.html", "api/finch/data/Format.GRIB.html", "api/finch/data/Format.NETCDF.html", "api/finch/data/Format.ZARR.html", "api/finch/data/Format.name.html", "api/finch/data/Format.value.html", "api/finch/data/Hashable.html", "api/finch/data/Hashable.__hash__.html", "api/finch/data/Hashable.__subclasshook__.html", "api/finch/data/Input.html", "api/finch/data/Input.Version.html", "api/finch/data/Input.Version.__eq__.html", "api/finch/data/Input.Version.__init__.html", "api/finch/data/Input.Version.__le__.html", "api/finch/data/Input.Version.__repr__.html", "api/finch/data/Input.Version.chunks.html", "api/finch/data/Input.Version.coords.html", "api/finch/data/Input.Version.dim_order.html", "api/finch/data/Input.Version.finch_version.html", "api/finch/data/Input.Version.format.html", "api/finch/data/Input.Version.from_yaml.html", "api/finch/data/Input.Version.get_all_chunks.html", "api/finch/data/Input.Version.impose.html", "api/finch/data/Input.Version.name.html", "api/finch/data/Input.Version.to_yaml.html", "api/finch/data/Input.Version.yaml_dumper.html", "api/finch/data/Input.Version.yaml_dumper.ANCHOR_TEMPLATE.html", "api/finch/data/Input.Version.yaml_dumper.DEFAULT_MAPPING_TAG.html", "api/finch/data/Input.Version.yaml_dumper.DEFAULT_SCALAR_TAG.html", "api/finch/data/Input.Version.yaml_dumper.DEFAULT_SEQUENCE_TAG.html", "api/finch/data/Input.Version.yaml_dumper.DEFAULT_TAG_PREFIXES.html", "api/finch/data/Input.Version.yaml_dumper.ESCAPE_REPLACEMENTS.html", "api/finch/data/Input.Version.yaml_dumper.__init__.html", "api/finch/data/Input.Version.yaml_dumper.add_implicit_resolver.html", "api/finch/data/Input.Version.yaml_dumper.add_multi_representer.html", "api/finch/data/Input.Version.yaml_dumper.add_path_resolver.html", "api/finch/data/Input.Version.yaml_dumper.add_representer.html", "api/finch/data/Input.Version.yaml_dumper.analyze_scalar.html", "api/finch/data/Input.Version.yaml_dumper.anchor_node.html", "api/finch/data/Input.Version.yaml_dumper.ascend_resolver.html", "api/finch/data/Input.Version.yaml_dumper.check_empty_document.html", "api/finch/data/Input.Version.yaml_dumper.check_empty_mapping.html", "api/finch/data/Input.Version.yaml_dumper.check_empty_sequence.html", "api/finch/data/Input.Version.yaml_dumper.check_resolver_prefix.html", "api/finch/data/Input.Version.yaml_dumper.check_simple_key.html", "api/finch/data/Input.Version.yaml_dumper.choose_scalar_style.html", "api/finch/data/Input.Version.yaml_dumper.close.html", "api/finch/data/Input.Version.yaml_dumper.descend_resolver.html", "api/finch/data/Input.Version.yaml_dumper.determine_block_hints.html", "api/finch/data/Input.Version.yaml_dumper.dispose.html", "api/finch/data/Input.Version.yaml_dumper.emit.html", "api/finch/data/Input.Version.yaml_dumper.expect_alias.html", "api/finch/data/Input.Version.yaml_dumper.expect_block_mapping.html", "api/finch/data/Input.Version.yaml_dumper.expect_block_mapping_key.html", "api/finch/data/Input.Version.yaml_dumper.expect_block_mapping_simple_value.html", "api/finch/data/Input.Version.yaml_dumper.expect_block_mapping_value.html", "api/finch/data/Input.Version.yaml_dumper.expect_block_sequence.html", "api/finch/data/Input.Version.yaml_dumper.expect_block_sequence_item.html", "api/finch/data/Input.Version.yaml_dumper.expect_document_end.html", "api/finch/data/Input.Version.yaml_dumper.expect_document_root.html", "api/finch/data/Input.Version.yaml_dumper.expect_document_start.html", "api/finch/data/Input.Version.yaml_dumper.expect_first_block_mapping_key.html", "api/finch/data/Input.Version.yaml_dumper.expect_first_block_sequence_item.html", "api/finch/data/Input.Version.yaml_dumper.expect_first_document_start.html", "api/finch/data/Input.Version.yaml_dumper.expect_first_flow_mapping_key.html", "api/finch/data/Input.Version.yaml_dumper.expect_first_flow_sequence_item.html", "api/finch/data/Input.Version.yaml_dumper.expect_flow_mapping.html", "api/finch/data/Input.Version.yaml_dumper.expect_flow_mapping_key.html", "api/finch/data/Input.Version.yaml_dumper.expect_flow_mapping_simple_value.html", "api/finch/data/Input.Version.yaml_dumper.expect_flow_mapping_value.html", "api/finch/data/Input.Version.yaml_dumper.expect_flow_sequence.html", "api/finch/data/Input.Version.yaml_dumper.expect_flow_sequence_item.html", "api/finch/data/Input.Version.yaml_dumper.expect_node.html", "api/finch/data/Input.Version.yaml_dumper.expect_nothing.html", "api/finch/data/Input.Version.yaml_dumper.expect_scalar.html", "api/finch/data/Input.Version.yaml_dumper.expect_stream_start.html", "api/finch/data/Input.Version.yaml_dumper.flush_stream.html", "api/finch/data/Input.Version.yaml_dumper.generate_anchor.html", "api/finch/data/Input.Version.yaml_dumper.ignore_aliases.html", "api/finch/data/Input.Version.yaml_dumper.increase_indent.html", "api/finch/data/Input.Version.yaml_dumper.inf_value.html", "api/finch/data/Input.Version.yaml_dumper.need_events.html", "api/finch/data/Input.Version.yaml_dumper.need_more_events.html", "api/finch/data/Input.Version.yaml_dumper.open.html", "api/finch/data/Input.Version.yaml_dumper.prepare_anchor.html", "api/finch/data/Input.Version.yaml_dumper.prepare_tag.html", "api/finch/data/Input.Version.yaml_dumper.prepare_tag_handle.html", "api/finch/data/Input.Version.yaml_dumper.prepare_tag_prefix.html", "api/finch/data/Input.Version.yaml_dumper.prepare_version.html", "api/finch/data/Input.Version.yaml_dumper.process_anchor.html", "api/finch/data/Input.Version.yaml_dumper.process_scalar.html", "api/finch/data/Input.Version.yaml_dumper.process_tag.html", "api/finch/data/Input.Version.yaml_dumper.represent.html", "api/finch/data/Input.Version.yaml_dumper.represent_binary.html", "api/finch/data/Input.Version.yaml_dumper.represent_bool.html", "api/finch/data/Input.Version.yaml_dumper.represent_complex.html", "api/finch/data/Input.Version.yaml_dumper.represent_data.html", "api/finch/data/Input.Version.yaml_dumper.represent_date.html", "api/finch/data/Input.Version.yaml_dumper.represent_datetime.html", "api/finch/data/Input.Version.yaml_dumper.represent_dict.html", "api/finch/data/Input.Version.yaml_dumper.represent_float.html", "api/finch/data/Input.Version.yaml_dumper.represent_int.html", "api/finch/data/Input.Version.yaml_dumper.represent_list.html", "api/finch/data/Input.Version.yaml_dumper.represent_mapping.html", "api/finch/data/Input.Version.yaml_dumper.represent_module.html", "api/finch/data/Input.Version.yaml_dumper.represent_name.html", "api/finch/data/Input.Version.yaml_dumper.represent_none.html", "api/finch/data/Input.Version.yaml_dumper.represent_object.html", "api/finch/data/Input.Version.yaml_dumper.represent_ordered_dict.html", "api/finch/data/Input.Version.yaml_dumper.represent_scalar.html", "api/finch/data/Input.Version.yaml_dumper.represent_sequence.html", "api/finch/data/Input.Version.yaml_dumper.represent_set.html", "api/finch/data/Input.Version.yaml_dumper.represent_str.html", "api/finch/data/Input.Version.yaml_dumper.represent_tuple.html", "api/finch/data/Input.Version.yaml_dumper.represent_undefined.html", "api/finch/data/Input.Version.yaml_dumper.represent_yaml_object.html", "api/finch/data/Input.Version.yaml_dumper.resolve.html", "api/finch/data/Input.Version.yaml_dumper.serialize.html", "api/finch/data/Input.Version.yaml_dumper.serialize_node.html", "api/finch/data/Input.Version.yaml_dumper.write_double_quoted.html", "api/finch/data/Input.Version.yaml_dumper.write_folded.html", "api/finch/data/Input.Version.yaml_dumper.write_indent.html", "api/finch/data/Input.Version.yaml_dumper.write_indicator.html", "api/finch/data/Input.Version.yaml_dumper.write_line_break.html", "api/finch/data/Input.Version.yaml_dumper.write_literal.html", "api/finch/data/Input.Version.yaml_dumper.write_plain.html", "api/finch/data/Input.Version.yaml_dumper.write_single_quoted.html", "api/finch/data/Input.Version.yaml_dumper.write_stream_end.html", "api/finch/data/Input.Version.yaml_dumper.write_stream_start.html", "api/finch/data/Input.Version.yaml_dumper.write_tag_directive.html", "api/finch/data/Input.Version.yaml_dumper.write_version_directive.html", "api/finch/data/Input.Version.yaml_dumper.yaml_implicit_resolvers.html", "api/finch/data/Input.Version.yaml_dumper.yaml_multi_representers.html", "api/finch/data/Input.Version.yaml_dumper.yaml_path_resolvers.html", "api/finch/data/Input.Version.yaml_dumper.yaml_representers.html", "api/finch/data/Input.Version.yaml_flow_style.html", "api/finch/data/Input.Version.yaml_loader.html", "api/finch/data/Input.Version.yaml_tag.html", "api/finch/data/Input.__init__.html", "api/finch/data/Input.add_version.html", "api/finch/data/Input.get_version.html", "api/finch/data/Input.has_version.html", "api/finch/data/Input.list_versions.html", "api/finch/data/Input.name.html", "api/finch/data/Input.source.html", "api/finch/data/Input.source_version.html", "api/finch/data/Input.versions.html", "api/finch/data/Iterable.html", "api/finch/data/Iterable.__class_getitem__.html", "api/finch/data/Iterable.__subclasshook__.html", "api/finch/data/adjust_dims.html", "api/finch/data/auto_chunk_size.html", "api/finch/data/can_rechunk_no_split.html", "api/finch/data/chunk_args_equal.html", "api/finch/data/dataclass.html", "api/finch/data/deprecated.html", "api/finch/data/field.html", "api/finch/data/get_chunk_sizes.html", "api/finch/data/get_dim_order_list.html", "api/finch/data/glob.html", "api/finch/data/grib_dir.html", "api/finch/data/load_array_grib.html", "api/finch/data/load_grib.html", "api/finch/data/netcdf_dir.html", "api/finch/data/overload.html", "api/finch/data/simplify_chunks.html", "api/finch/data/tmp_dir.html", "api/finch/data/translate_order.html", "api/finch/data/zarr_dir.html", "api/finch/environment/Version.html", "api/finch/environment/Version.__eq__.html", "api/finch/environment/Version.__ge__.html", "api/finch/environment/Version.__gt__.html", "api/finch/environment/Version.__hash__.html", "api/finch/environment/Version.__init__.html", "api/finch/environment/Version.__le__.html", "api/finch/environment/Version.__lt__.html", "api/finch/environment/Version.__ne__.html", "api/finch/environment/Version.__repr__.html", "api/finch/environment/Version.__str__.html", "api/finch/environment/Version.base_version.html", "api/finch/environment/Version.dev.html", "api/finch/environment/Version.epoch.html", "api/finch/environment/Version.is_devrelease.html", "api/finch/environment/Version.is_postrelease.html", "api/finch/environment/Version.is_prerelease.html", "api/finch/environment/Version.local.html", "api/finch/environment/Version.major.html", "api/finch/environment/Version.micro.html", "api/finch/environment/Version.minor.html", "api/finch/environment/Version.post.html", "api/finch/environment/Version.pre.html", "api/finch/environment/Version.public.html", "api/finch/environment/Version.release.html", "api/finch/environment/WorkerEnvironment.html", "api/finch/environment/WorkerEnvironment.env_var_map.html", "api/finch/environment/WorkerEnvironment.get_job_script_prologue.html", "api/finch/environment/WorkerEnvironment.load.html", "api/finch/environment/WorkerEnvironment.omp_threads.html", "api/finch/environment/WorkerEnvironment.set.html", "api/finch/environment/custom_config_env_var.html", "api/finch/environment/data_dir.html", "api/finch/environment/default_custom_config.html", "api/finch/environment/get_version.html", "api/finch/environment/node_name_env_var.html", "api/finch/environment/package_root.html", "api/finch/environment/proj_config.html", "api/finch/environment/version_file.html", "api/finch/eval/amdahl_speedup.html", "api/finch/eval/combine_runtimes.html", "api/finch/eval/create_cores_dimension.html", "api/finch/eval/create_plots.html", "api/finch/eval/create_result_dataset.html", "api/finch/eval/deprecated.html", "api/finch/eval/exp_name_attr.html", "api/finch/eval/find_scaling.html", "api/finch/eval/get_plots_dir.html", "api/finch/eval/get_pyplot_grouped_bar_pos.html", "api/finch/eval/plot_runtime_parts.html", "api/finch/eval/plot_style.html", "api/finch/eval/print_results.html", "api/finch/eval/print_version_results.html", "api/finch/eval/remove_labels.html", "api/finch/eval/rename_labels.html", "api/finch/eval/rt_combined_attr.html", "api/finch/eval/serial_overhead_analysis.html", "api/finch/eval/simple_lin_reg.html", "api/finch/eval/speedup.html", "api/finch/eval/store_config.html", "api/finch/measure_runtimes.html", "api/finch/operators/custom_map_blocks.html", "api/finch/scheduler/Client.html", "api/finch/scheduler/Client.__init__.html", "api/finch/scheduler/Client.__repr__.html", "api/finch/scheduler/Client.amm.html", "api/finch/scheduler/Client.as_current.html", "api/finch/scheduler/Client.benchmark_hardware.html", "api/finch/scheduler/Client.call_stack.html", "api/finch/scheduler/Client.cancel.html", "api/finch/scheduler/Client.close.html", "api/finch/scheduler/Client.collections_to_dsk.html", "api/finch/scheduler/Client.compute.html", "api/finch/scheduler/Client.current.html", "api/finch/scheduler/Client.dashboard_link.html", "api/finch/scheduler/Client.dump_cluster_state.html", "api/finch/scheduler/Client.futures_of.html", "api/finch/scheduler/Client.gather.html", "api/finch/scheduler/Client.get.html", "api/finch/scheduler/Client.get_dataset.html", "api/finch/scheduler/Client.get_events.html", "api/finch/scheduler/Client.get_executor.html", "api/finch/scheduler/Client.get_metadata.html", "api/finch/scheduler/Client.get_scheduler_logs.html", "api/finch/scheduler/Client.get_task_stream.html", "api/finch/scheduler/Client.get_versions.html", "api/finch/scheduler/Client.get_worker_logs.html", "api/finch/scheduler/Client.has_what.html", "api/finch/scheduler/Client.io_loop.html", "api/finch/scheduler/Client.list_datasets.html", "api/finch/scheduler/Client.log_event.html", "api/finch/scheduler/Client.loop.html", "api/finch/scheduler/Client.map.html", "api/finch/scheduler/Client.nbytes.html", "api/finch/scheduler/Client.ncores.html", "api/finch/scheduler/Client.normalize_collection.html", "api/finch/scheduler/Client.nthreads.html", "api/finch/scheduler/Client.persist.html", "api/finch/scheduler/Client.preloads.html", "api/finch/scheduler/Client.processing.html", "api/finch/scheduler/Client.profile.html", "api/finch/scheduler/Client.publish_dataset.html", "api/finch/scheduler/Client.rebalance.html", "api/finch/scheduler/Client.register_scheduler_plugin.html", "api/finch/scheduler/Client.register_worker_callbacks.html", "api/finch/scheduler/Client.register_worker_plugin.html", "api/finch/scheduler/Client.replicate.html", "api/finch/scheduler/Client.restart.html", "api/finch/scheduler/Client.restart_workers.html", "api/finch/scheduler/Client.retire_workers.html", "api/finch/scheduler/Client.retry.html", "api/finch/scheduler/Client.run.html", "api/finch/scheduler/Client.run_on_scheduler.html", "api/finch/scheduler/Client.scatter.html", "api/finch/scheduler/Client.scheduler_info.html", "api/finch/scheduler/Client.set_metadata.html", "api/finch/scheduler/Client.shutdown.html", "api/finch/scheduler/Client.start.html", "api/finch/scheduler/Client.story.html", "api/finch/scheduler/Client.submit.html", "api/finch/scheduler/Client.subscribe_topic.html", "api/finch/scheduler/Client.unpublish_dataset.html", "api/finch/scheduler/Client.unregister_worker_plugin.html", "api/finch/scheduler/Client.unsubscribe_topic.html", "api/finch/scheduler/Client.upload_file.html", "api/finch/scheduler/Client.wait_for_workers.html", "api/finch/scheduler/Client.who_has.html", "api/finch/scheduler/Client.write_scheduler_file.html", "api/finch/scheduler/Cluster.html", "api/finch/scheduler/Cluster.__eq__.html", "api/finch/scheduler/Cluster.__hash__.html", "api/finch/scheduler/Cluster.__init__.html", "api/finch/scheduler/Cluster.__repr__.html", "api/finch/scheduler/Cluster.adapt.html", "api/finch/scheduler/Cluster.close.html", "api/finch/scheduler/Cluster.dashboard_link.html", "api/finch/scheduler/Cluster.get_client.html", "api/finch/scheduler/Cluster.get_logs.html", "api/finch/scheduler/Cluster.logs.html", "api/finch/scheduler/Cluster.loop.html", "api/finch/scheduler/Cluster.name.html", "api/finch/scheduler/Cluster.observed.html", "api/finch/scheduler/Cluster.plan.html", "api/finch/scheduler/Cluster.requested.html", "api/finch/scheduler/Cluster.scale.html", "api/finch/scheduler/Cluster.scheduler_address.html", "api/finch/scheduler/ClusterConfig.html", "api/finch/scheduler/ClusterConfig.__eq__.html", "api/finch/scheduler/ClusterConfig.__init__.html", "api/finch/scheduler/ClusterConfig.__repr__.html", "api/finch/scheduler/ClusterConfig.cores_per_worker.html", "api/finch/scheduler/ClusterConfig.exclusive_jobs.html", "api/finch/scheduler/ClusterConfig.omp_parallelism.html", "api/finch/scheduler/ClusterConfig.queuing.html", "api/finch/scheduler/ClusterConfig.workers_per_job.html", "api/finch/scheduler/SLURMCluster.html", "api/finch/scheduler/SLURMCluster.__init__.html", "api/finch/scheduler/SLURMCluster.adapt.html", "api/finch/scheduler/SLURMCluster.asynchronous.html", "api/finch/scheduler/SLURMCluster.from_name.html", "api/finch/scheduler/SLURMCluster.job_cls.html", "api/finch/scheduler/SLURMCluster.job_cls.__init__.html", "api/finch/scheduler/SLURMCluster.job_cls.__repr__.html", "api/finch/scheduler/SLURMCluster.job_cls.cancel_command.html", "api/finch/scheduler/SLURMCluster.job_cls.close.html", "api/finch/scheduler/SLURMCluster.job_cls.config_name.html", "api/finch/scheduler/SLURMCluster.job_cls.default_config_name.html", "api/finch/scheduler/SLURMCluster.job_cls.finished.html", "api/finch/scheduler/SLURMCluster.job_cls.job_file.html", "api/finch/scheduler/SLURMCluster.job_cls.job_id_regexp.html", "api/finch/scheduler/SLURMCluster.job_cls.job_script.html", "api/finch/scheduler/SLURMCluster.job_cls.start.html", "api/finch/scheduler/SLURMCluster.job_cls.status.html", "api/finch/scheduler/SLURMCluster.job_cls.submit_command.html", "api/finch/scheduler/SLURMCluster.job_cls.worker_process_memory.html", "api/finch/scheduler/SLURMCluster.job_cls.worker_process_threads.html", "api/finch/scheduler/SLURMCluster.job_header.html", "api/finch/scheduler/SLURMCluster.job_name.html", "api/finch/scheduler/SLURMCluster.job_script.html", "api/finch/scheduler/SLURMCluster.new_worker_spec.html", "api/finch/scheduler/SLURMCluster.plan.html", "api/finch/scheduler/SLURMCluster.requested.html", "api/finch/scheduler/SLURMCluster.scale.html", "api/finch/scheduler/SLURMCluster.scale_down.html", "api/finch/scheduler/SLURMCluster.scale_up.html", "api/finch/scheduler/SLURMCluster.sync.html", "api/finch/scheduler/clear_memory.html", "api/finch/scheduler/client.html", "api/finch/scheduler/dask_config_get_not_none.html", "api/finch/scheduler/dataclass.html", "api/finch/scheduler/get_client.html", "api/finch/scheduler/parse_slurm_time.html", "api/finch/scheduler/scale_and_wait.html", "api/finch/scheduler/start_scheduler.html", "api/finch/scheduler/start_slurm_cluster.html", "api/finch/scheduler/timedelta.html", "api/finch/scheduler/timedelta.__abs__.html", "api/finch/scheduler/timedelta.__add__.html", "api/finch/scheduler/timedelta.__bool__.html", "api/finch/scheduler/timedelta.__divmod__.html", "api/finch/scheduler/timedelta.__eq__.html", "api/finch/scheduler/timedelta.__floordiv__.html", "api/finch/scheduler/timedelta.__ge__.html", "api/finch/scheduler/timedelta.__getattribute__.html", "api/finch/scheduler/timedelta.__gt__.html", "api/finch/scheduler/timedelta.__hash__.html", "api/finch/scheduler/timedelta.__le__.html", "api/finch/scheduler/timedelta.__lt__.html", "api/finch/scheduler/timedelta.__mod__.html", "api/finch/scheduler/timedelta.__mul__.html", "api/finch/scheduler/timedelta.__ne__.html", "api/finch/scheduler/timedelta.__neg__.html", "api/finch/scheduler/timedelta.__new__.html", "api/finch/scheduler/timedelta.__pos__.html", "api/finch/scheduler/timedelta.__radd__.html", "api/finch/scheduler/timedelta.__rdivmod__.html", "api/finch/scheduler/timedelta.__repr__.html", "api/finch/scheduler/timedelta.__rfloordiv__.html", "api/finch/scheduler/timedelta.__rmod__.html", "api/finch/scheduler/timedelta.__rmul__.html", "api/finch/scheduler/timedelta.__rsub__.html", "api/finch/scheduler/timedelta.__rtruediv__.html", "api/finch/scheduler/timedelta.__str__.html", "api/finch/scheduler/timedelta.__sub__.html", "api/finch/scheduler/timedelta.__truediv__.html", "api/finch/scheduler/timedelta.days.html", "api/finch/scheduler/timedelta.max.html", "api/finch/scheduler/timedelta.microseconds.html", "api/finch/scheduler/timedelta.min.html", "api/finch/scheduler/timedelta.resolution.html", "api/finch/scheduler/timedelta.seconds.html", "api/finch/scheduler/timedelta.total_seconds.html", "api/finch/set_debug_mode.html", "api/finch/set_log_level.html", "api/finch/util/Config.html", "api/finch/util/Config.list_configs.html", "api/finch/util/ImgSuffix.html", "api/finch/util/PathLike.html", "api/finch/util/PbarArg.html", "api/finch/util/RandomWord.html", "api/finch/util/RandomWord.__init__.html", "api/finch/util/RandomWord.filter.html", "api/finch/util/RandomWord.random_words.html", "api/finch/util/RandomWord.read_words.html", "api/finch/util/RandomWord.word.html", "api/finch/util/RecursiveNamespace.html", "api/finch/util/RecursiveNamespace.__delattr__.html", "api/finch/util/RecursiveNamespace.__eq__.html", "api/finch/util/RecursiveNamespace.__ge__.html", "api/finch/util/RecursiveNamespace.__getattribute__.html", "api/finch/util/RecursiveNamespace.__gt__.html", "api/finch/util/RecursiveNamespace.__init__.html", "api/finch/util/RecursiveNamespace.__le__.html", "api/finch/util/RecursiveNamespace.__lt__.html", "api/finch/util/RecursiveNamespace.__ne__.html", "api/finch/util/RecursiveNamespace.__new__.html", "api/finch/util/RecursiveNamespace.__reduce__.html", "api/finch/util/RecursiveNamespace.__repr__.html", "api/finch/util/RecursiveNamespace.__setattr__.html", "api/finch/util/RecursiveNamespace.map_entry.html", "api/finch/util/TypeVar.html", "api/finch/util/TypeVar.__init__.html", "api/finch/util/TypeVar.__init_subclass__.html", "api/finch/util/TypeVar.__or__.html", "api/finch/util/TypeVar.__reduce__.html", "api/finch/util/TypeVar.__repr__.html", "api/finch/util/TypeVar.__ror__.html", "api/finch/util/add_missing_properties.html", "api/finch/util/arg2list.html", "api/finch/util/check_socket_open.html", "api/finch/util/clear_dir.html", "api/finch/util/closing.html", "api/finch/util/closing.__class_getitem__.html", "api/finch/util/closing.__enter__.html", "api/finch/util/closing.__exit__.html", "api/finch/util/closing.__init__.html", "api/finch/util/closing.__subclasshook__.html", "api/finch/util/equals_not_none.html", "api/finch/util/fill_none_properties.html", "api/finch/util/flat_list.html", "api/finch/util/flatten_dict.html", "api/finch/util/funcs_from_args.html", "api/finch/util/get_absolute.html", "api/finch/util/get_class_attribute_names.html", "api/finch/util/get_class_attributes.html", "api/finch/util/get_path.html", "api/finch/util/get_pbar.html", "api/finch/util/get_primitive_attrs_from_dataclass.html", "api/finch/util/has_attributes.html", "api/finch/util/inverse.html", "api/finch/util/is_2d_list_of.html", "api/finch/util/is_callable_list.html", "api/finch/util/is_list_of.html", "api/finch/util/list_funcs_matching.html", "api/finch/util/map_keys.html", "api/finch/util/parse_bool.html", "api/finch/util/random_entity_name.html", "api/finch/util/recursive_update.html", "api/finch/util/remove_if_exists.html", "api/finch/util/sig_matches_hint.html", "api/zebra/brn.html", "api/zebra/set_threads.html", "api/zebra/thetav.html", "dev/operators.html", "dev/setup.html", "index.html", "operators.html", "usage/installation.html", "usage/introduction.html", "usage/library/config.html", "usage/library/evaluation.html", "usage/library/experiments.html", "usage/library/first_steps.html", "usage/library/input.html", "usage/library/main.html", "usage/script.html"]})